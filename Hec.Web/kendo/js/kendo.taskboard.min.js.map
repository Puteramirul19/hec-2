{"version":3,"sources":["raw-js/kendo.taskboard.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Taskboard","this","$","window","ui","Observable","encode","htmlEncode","extend","DOT","NS","CLICK","ACTION","TaskBoardColumnStyles","element","header","headerText","ellipsis","spacer","actions","cardsContainer","columnCards","actionButton","card","cardTitle","sortableSuffix","textbox","input","newColumn","editColumn","disabled","dragPlaceholder","dragHint","ignoreDrag","grabbingCursor","preventDefault","ev","TaskBoardColumn","init","options","dataItem","that","_dataItem","sortableUniqueClass","sortableIdentifier","styles","_render","_attachEvents","states","isReorderable","_initSortable","fn","call","empty","container","addCard","cardHtml","append","edit","addClass","_renderEditHeader","getDataItem","cards","children","template","data","getter","dataTextField","buttons","editTemplate","messages","attr","icon","spriteCssClass","text","command","html","renderButton","iconClass","fillMode","builtinButtons","name","rules","deleteColumn","defaultButtons","headerLabelId","guid","uid","css","width","appendTo","_renderHeader","_buildActionsHtml","setTimeout","find","trigger","i","length","button","isPlainObject","Object","keys","_validateRules","tool","split","_actionClick","target","closest","value","_textboxBlur","on","bind","keyCode","ENTER","dirClass","isRtl","sortable","Sortable","ignore","connectWith","filter","hint","clone","offsetWidth","height","offsetHeight","placeholder","move","_move","start","_start","end","_end","change","_change","draggable","userEvents","unbind","_select","ignoreDragSelectors","event","is","columnElement","sender","parents","moveArgs","action","newIndex","oldIndex","destroy","off","TaskBoardNewColumn","taskboard","Column","NewColumn","jQuery","TaskBoardCard","resources","contentTemplate","hbox","title","link","selectable","dataTitleField","cardMenuButton","body","dataDescriptionField","cardMenuButtonTemplate","headerActions","flatButton","actionsIcon","categoryColor","moveCursor","cardMenu","_resources","borderDir","isDisabled","toggleClass","dataCategoryField","color","get","categoryBorder","isSelectable","key","resource","field","cardResources","multiple","dataSource","view","resourceIndex","cardResource","valuePrimitive","dataValueField","dataIndex","resourceColor","dataColorField","result","push","_buildTemplate","format","headerTemplate","bodyTemplate","Card","ContextMenu","TaskBoardCardMenu","_overrideTemplates","_extendItems","_onSelect","_onOpen","_focus","templates","sprite","defaultItems","editCard","deleteCard","events","concat","item","items","_append","_extendItem","isEmptyObject","args","CardMenu","TaskBoardCommand","Class","_confirm","content","okText","cancel","confirm","taskboardOptions","editable","confirmation","fakePromise","Deferred","resolve","kendoConfirm","buttonLayout","open","AddColumnCommand","exec","column","columns","each","index","enableByColumn","addColumn","EditColumnCommand","DeleteColumnCommand","columnDS","columnsDataSource","deleteColumnConfirm","done","cancelChanges","remove","sync","SaveColumnCommand","columnSettings","val","set","CancelEditColumnCommand","MoveFocusCommand","columnIndex","cardElement","currentColumnIndex","direction","Math","max","min","_getColumnByElement","eq","_moveFromCardFocus","focusCard","currentIndex","seekFocusableCard","_getFocusableCard","focus","lastIndex","focusable","TaskBoardBaseCardCommand","_updateOrder","nextCard","dataOrderField","currentCard","cardIndex","map","idx","prevCard","SelectCardCommand","SaveChangesCommand","taskBoardOptions","receivedStatus","dataStatusField","targetColumn","_getColumn","activeElm","document","activeElement","pane","form","validate","then","DeleteCardCommand","deleteCardConfirm","fail","MoveCardCommand","EditCardCommand","_openPane","AddCardCommand","OpenPaneCommand","ClosePaneCommand","_closePane","SearchCommand","filters","searchOptions","search","operator","fields","_buildFilters","logic","Command","commands","Form","TaskBoardPane","_commandClick","fieldFormat","close","buttonTemplate","themeColor","delete","saveChanges","create","buttonsContainer","footerActions","footerActionButtons","_renderContent","_buildButtonsHtml","_buildHeaderTemplate","primary","TaskBoardPreviewPane","previewPane","preview","TaskBoardEditPane","formSettings","label","buttonsTemplate","formLabelId","focusFirst","formData","TaskBoardCreatePane","columnStatusField","firstColumn","at","status","add","createNewCard","Pane","panes","Preview","Edit","Create","baseButton","primaryButton","Keyboard","register","registerShortcut","selector","shortcut","isNaN","toUpperCase","charCodeAt","ctrlKey","shiftKey","altKey","handler","_handler","shortcuts","_getAction","_trigger","_compareShortcut","_getShortcutModifier","navigator","platform","indexOf","metaKey","KeyboardManager","TaskBoardStyles","wrapper","toolbar","columnsContainer","selected","undefined$1","Widget","DataSource","isArray","Array","GENERIC","MOVE","MOVE_START","MOVE_END","SELECT","EXECUTE","CHANGE","ERROR","DATABINDING","DATABOUND","COLUMNSDATABINDING","COLUMNSDATABOUND","TaskBoard","_sortableIdentifier","_wrapper","_columnsDataSource","_initResources","_dataSource","_initToolbar","_initCardMenu","_initKeyboard","autoBind","load","notify","reorderable","previewCard","description","defaultTools","type","overflow","component","componentOptions","commandOn","_columns","merge","itemsByStatus","itemsByColumn","columnElm","fetchPromises","_progress","fetch","when","apply","read","cardElm","getByUid","columnDataItem","columnByStatus","select","toggle","removeClass","_extendExecArgs","saveCard","model","_buildStates","_createNewModel","insert","before","executeCommand","saveColumn","keyboardManager","enable","readOnly","readOnlyByColumn","setDataSource","setColumnsDataSource","_renderCards","after","outerWidth","parseInt","ESC","headerElm","contentElm","colsContainer","tools","toolbarElm","toolbarOptions","_processTools","parentMessages","ToolBar","_toolbarClick","isDefaultTool","forEach","t","temp","hidden","_isToolEnabled","toolName","found","isEditable","_isEditable","_isReorderable","_isSelectable","isReadOnly","isSearchable","_isSearchable","notLocalColumns","transport","LocalTransport","support","commandName","commandOptions","console","warn","cardDataItem","draggableEvent","elm","ns","sort","dir","schema","defaultValue","_columnsChangeHandler","_columnsErrorHandler","_columnsDataSourceChange","_error","statusField","_moveEnd","_moveStart","_changeOrder","_tabindex","_changeHandler","_errorHandler","_clearColumns","_renderCard","cardMenuOptions","showOn","alignToAnchor","_addResource","_resourceDataSource","resourceDS","progress","_registerShortcuts","DELETE","UP","DOWN","LEFT","RIGHT","plugin","kendo$1","__meta__","id","category","depends","default","defineProperty"],"mappings":"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","file":"kendo.taskboard.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.sortable.js'), require('kendo.html.button.js'), require('kendo.core.js'), require('kendo.icons.js'), require('kendo.menu.js'), require('kendo.dialog.js'), require('kendo.form.js'), require('kendo.data.js'), require('kendo.toolbar.js'), require('kendo.textbox.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.sortable', 'kendo.html.button', 'kendo.core', 'kendo.icons', 'kendo.menu', 'kendo.dialog', 'kendo.form', 'kendo.data', 'kendo.toolbar', 'kendo.textbox'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Taskboard = {})));\n})(this, (function (exports) {\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            Observable = kendo.Observable,\n            encode = kendo.htmlEncode,\n            extend = $.extend,\n\n            DOT = \".\",\n            NS = DOT + \"kendoTaskBoardColumn\",\n\n            CLICK = \"click\",\n            BLUR = \"blur\",\n\n            MOVE = \"move\",\n            MOVE_START = \"moveStart\",\n            MOVE_END = \"moveEnd\",\n            CHANGE = \"change\",\n            ACTION = \"action\";\n\n        var TaskBoardColumnStyles = {\n            element: \"k-taskboard-column\",\n            header: \"k-taskboard-column-header\",\n            headerText: \"k-taskboard-column-header-text\",\n            ellipsis: \"k-text-ellipsis\",\n            spacer: \"k-spacer\",\n            actions: \"k-taskboard-column-header-actions\",\n            cardsContainer: \"k-taskboard-column-cards-container\",\n            columnCards: \"k-taskboard-column-cards\",\n            actionButton: \"k-taskboard-column-action-button\",\n            card: \"k-taskboard-card\",\n            cardTitle: \"k-card-title\",\n            sortableSuffix: \"-kendosortable\",\n            textbox: \"k-textbox k-input k-input-md k-rounded-md k-input-solid\",\n            input: \"k-input-inner\",\n            newColumn: \"k-taskboard-column-new\",\n            editColumn: \"k-taskboard-column-edit\",\n            disabled: \"k-disabled\",\n            dragPlaceholder: \"k-taskboard-drag-placeholder\",\n            dragHint: \"k-taskboard-drag-hint\",\n            ignoreDrag: \"k-taskboard-drag-ignore\",\n            grabbingCursor: \"k-cursor-grabbing\"\n        };\n\n        function preventDefault(ev) { ev.preventDefault(); }\n\n        var TaskBoardColumn = Observable.extend({\n            init: function(options, dataItem) {\n                var that = this;\n\n                that._dataItem = dataItem;\n                that.options = extend(true, {}, options);\n\n                that.sortableUniqueClass = that.options.sortableIdentifier + TaskBoardColumn.styles.sortableSuffix;\n                that._render();\n                that._attachEvents();\n\n                if (options.states.isReorderable) {\n                    that._initSortable();\n                }\n\n                Observable.fn.init.call(that);\n            },\n\n            empty: function() {\n                var that = this;\n                that.container.empty();\n            },\n\n            addCard: function(cardHtml) {\n                var that = this;\n                that.container.append(cardHtml);\n            },\n\n            edit: function() {\n                var that = this,\n                    styles = TaskBoardColumn.styles;\n\n                that.element.addClass(styles.editColumn);\n                that._renderEditHeader();\n            },\n\n            getDataItem: function() {\n                return this._dataItem;\n            },\n\n            cards: function() {\n                var that = this;\n\n                return that.container.children();\n            },\n\n            template: (data) => `<div class=\"${encode(data.styles.headerText)} ${encode(data.styles.ellipsis)}\">${kendo.getter(data.dataTextField)(data)}</div>` +\n                      `<span class=\"${encode(data.styles.spacer)}\"></span>` +\n                      `${data.buttons}`,\n\n            editTemplate: (data) => `<div class=\"${encode(data.styles.headerText)} ${encode(data.styles.ellipsis)}\">` +\n                            `<span class=\"${encode(data.styles.textbox)}\">` +\n                                `<input class=\"${encode(data.styles.input)}\" placeholder=\"${encode(kendo.getter(data.dataTextField)(data) ? data.messages.editColumn : data.messages.newColumn)}\" ${encode(kendo.attr(\"command\"))}=\"SaveColumnCommand\" value=\"${encode(kendo.getter(data.dataTextField)(data))}\" />` +\n                            '</span>' +\n                            '</div>' +\n                            `<span class=\"${encode(data.styles.spacer)}\"></span>` +\n                            `${data.buttons}`,\n\n            actionButton: ({ styles, icon, spriteCssClass, text, command, options }) =>\n                        kendo.html.renderButton(`<button class=\"${encode(styles.actionButton)}\" title=\"${encode(text)}\" ${encode(kendo.attr(\"command\"))}=\"${encode(command)}\" ${options ? encode(kendo.attr('options')) + \"=\" + encode(options) : \"\"}></button>`, {\n                            icon: encode(icon),\n                            iconClass: `k-button-icon ${encode(spriteCssClass)}`,\n                            fillMode: \"flat\"\n                        }),\n\n            builtinButtons: {\n                \"editColumn\": { name: \"editColumn\", icon: \"pencil\", text: \"Edit Column\", command: \"EditColumnCommand\", rules: \"isEditable\" },\n                \"addCard\": { name: \"addCard\", icon: \"plus\", text: \"Add Card\", command: \"AddCardCommand\", rules: \"isEditable\" },\n                \"deleteColumn\": { name: \"deleteColumn\", icon: \"x\", text: \"Delete Column\", command: \"DeleteColumnCommand\", rules: \"isEditable\" }\n            },\n\n            defaultButtons: [ \"editColumn\", \"addCard\", \"deleteColumn\" ],\n\n            _render: function() {\n                var that = this,\n                    styles = TaskBoardColumn.styles,\n                    headerLabelId = kendo.guid(),\n                    element = $(\"<div class='\" + styles.element + \"'></div>\")\n                        .attr(kendo.attr(\"uid\"), that._dataItem.uid)\n                        .css({\n                            width: that.options.width\n                        })\n                        .attr(\"role\", \"list\").attr(\"aria-labelledby\", headerLabelId),\n                    header = $(\"<div class='\" + styles.header + \"'></div>\"),\n                    cardsContainer = $(\"<div class='\" + styles.cardsContainer + \"'></div>\"),\n                    columnCards = $(\"<div class='\" + styles.columnCards + \"'></div>\");\n\n                that.header = header.appendTo(element).attr(\"id\", headerLabelId);\n\n                that._renderHeader();\n\n                cardsContainer.appendTo(element);\n                that.container = columnCards\n                                    .appendTo(cardsContainer)\n                                    .addClass(that.sortableUniqueClass);\n\n                that.element = element;\n            },\n\n            _renderHeader: function() {\n                var that = this,\n                    styles = TaskBoardColumn.styles,\n                    options = that.options,\n                    template = options.template ? options.template : that.template;\n\n                that.header.append(kendo.template(template)(extend(true, {}, {\n                    styles: styles,\n                    buttons: that._buildActionsHtml(),\n                    dataTextField: options.dataTextField\n                }, that._dataItem)));\n            },\n\n            _renderEditHeader: function() {\n                var that = this,\n                    styles = TaskBoardColumn.styles,\n                    options = that.options,\n                    template = options.editTemplate ? options.editTemplate : that.editTemplate;\n\n                that.header.html(\"\");\n\n                that.header.append(kendo.template(template)(extend(true, {}, {\n                    styles: styles,\n                    messages: options.messages,\n                    buttons: that._buildActionsHtml(),\n                    dataTextField: options.dataTextField\n                }, that._dataItem)));\n\n                setTimeout(function() {\n                    that.header.find(\"input\").trigger(\"focus\");\n                }, 0);\n\n                that.header.find(DOT + styles.actions).addClass(styles.disabled);\n            },\n\n            _buildActionsHtml: function() {\n                var that = this,\n                    options = that.options,\n                    messages = options.messages,\n                    buttons = options.buttons || that.defaultButtons,\n                    styles = TaskBoardColumn.styles,\n                    html = \"<div class='\" + styles.actions + \"'>\";\n\n                for (var i = 0; i < buttons.length; i++) {\n                    var button = buttons[i];\n                    button = ($.isPlainObject(button) && Object.keys(button).length === 1 && button.name) ? button.name : button;\n\n                    if (typeof button === \"string\") {\n                        button = extend(true, {},\n                            that.builtinButtons[button] || { spriteCssClass: button, command: button + \"Command\" },\n                            { text: messages[button] || button }\n                        );\n                    } else if ($.isPlainObject(button) && button.name) {\n                        button = extend(true, button,\n                            { text: messages[button.name] }\n                        );\n                    }\n\n                    if (!that._validateRules(button)) {\n                        continue;\n                    }\n\n                    button.spriteCssClass = button.spriteCssClass || \"\";\n\n                    html += kendo.template(that.actionButton)(extend(true, {}, {\n                        styles: styles,\n                        options: false\n                    }, button));\n                }\n\n                html += \"</div>\";\n\n                return html;\n            },\n\n            _validateRules: function(tool) {\n                var that = this,\n                    states = that.options.states,\n                    rules = tool.rules ? tool.rules.split(\";\") : [];\n\n                if (!rules.length) {\n                    return true;\n                }\n\n                for (var i = 0; i < rules.length; i++) {\n                    if (!states[rules[i]]) {\n                        return false;\n                    }\n                }\n\n                return true;\n            },\n\n            _actionClick: function(ev) {\n                var that = this,\n                    target = $(ev.target).closest(\"[\" + kendo.attr(\"command\") + \"]\"),\n                    command = target.attr(kendo.attr(\"command\")),\n                    options = target.attr(kendo.attr(\"options\"));\n\n                options = typeof(options) === \"string\" ? { value: options } : options;\n\n                if (!command) {\n                    return;\n                }\n\n                that.trigger(ACTION, {\n                    command: command,\n                    options: extend({ target: target }, options)\n                });\n            },\n\n            _textboxBlur: function(ev) {\n                var that = this,\n                    target = $(ev.target).closest(\"[\" + kendo.attr(\"command\") + \"]\"),\n                    command = target.attr(kendo.attr(\"command\")),\n                    options = target.attr(kendo.attr(\"options\"));\n\n                options = typeof(options) === \"string\" ? { value: options } : options;\n\n                if (!command) {\n                    return;\n                }\n\n                that.trigger(ACTION, {\n                    command: command,\n                    options: extend({ target: target }, options)\n                });\n            },\n\n            _attachEvents: function() {\n                var that = this;\n\n                that.header.on(CLICK + NS,\n                    DOT + TaskBoardColumn.styles.actionButton,\n                    that._actionClick.bind(that));\n\n                that.header.on(BLUR + NS,\n                    DOT + TaskBoardColumn.styles.input,\n                    that._textboxBlur.bind(that));\n\n                that.header.on(\"keyup\" + NS,\n                    DOT + TaskBoardColumn.styles.input,\n                    function(ev) {\n                        if (ev.keyCode === kendo.keys.ENTER) {\n                            that._textboxBlur(ev);\n                        }\n                    }\n                );\n\n                if (that.container) {\n                    that.container.on(CLICK + NS,\n                        DOT + TaskBoardColumn.styles.card + \" [\" + kendo.attr(\"command\") + \"]\",\n                        that._actionClick.bind(that));\n\n                    that.container.on(CLICK + NS,\n                        DOT + TaskBoardColumn.styles.card + \" a.\" + TaskBoardColumn.styles.cardTitle,\n                        preventDefault);\n\n                }\n            },\n\n            _initSortable: function() {\n                var that = this,\n                    isRtl = that.options.states.isRtl,\n                    dirClass = isRtl ? \" k-rtl\" : \"\",\n                    container = that.container;\n\n                if (!that.container) {\n                    return;\n                }\n\n                that.sortable = new ui.Sortable(container, {\n                    ignore: DOT + TaskBoardColumn.styles.ignoreDrag + \" *\",\n                    connectWith: DOT + that.sortableUniqueClass,\n                    filter: DOT + TaskBoardColumn.styles.card,\n                    hint: function(element) {\n                        return element.clone()\n                            .addClass(TaskBoardColumn.styles.dragHint + \" \" + TaskBoardColumn.styles.grabbingCursor + dirClass)\n                            .css({\n                            width: element[0].offsetWidth,\n                            height: element[0].offsetHeight\n                        });\n                    },\n                    placeholder: function(element) {\n                        return $(\"<div></div>\")\n                            .addClass(TaskBoardColumn.styles.dragPlaceholder + \" \" + TaskBoardColumnStyles.card)\n                            .css({\n                                height: element[0].offsetHeight\n                            });\n                    },\n                    move: that._move.bind(that),\n                    start: that._start.bind(that),\n                    end: that._end.bind(that),\n                    change: that._change.bind(that)\n                });\n\n                that.sortable.draggable.userEvents.unbind(\"select\");\n                that.sortable.draggable.userEvents.bind(\"select\", that._select.bind(that));\n            },\n\n            _select: function(ev) {\n                var ignoreDragSelectors = TaskBoardColumn.ignoreDragSelectors;\n                var target = $(ev.event.target);\n\n                for (var i = 0; i < ignoreDragSelectors.length; i++) {\n                    if (target.is(ignoreDragSelectors[i])) {\n                        ev.preventDefault();\n                        break;\n                    }\n                }\n            },\n\n            _move: function(ev) {\n                extend(ev, {\n                    columnElement: ev.sender.element.parents(DOT + TaskBoardColumn.styles.element)\n                });\n                this.trigger(MOVE, ev);\n            },\n\n            _start: function(ev) {\n                extend(ev, {\n                    columnElement: ev.sender.element.parents(DOT + TaskBoardColumn.styles.element)\n                });\n                this.trigger(MOVE_START, ev);\n            },\n\n            _end: function(ev) {\n                const that = this;\n                let moveArgs = {\n                    command: \"MoveCardCommand\",\n                    options: ev\n                };\n\n                extend(ev, {\n                    columnElement: ev.sender.element.parents(DOT + TaskBoardColumn.styles.element)\n                });\n                this.trigger(MOVE_END, ev);\n\n                if (ev.action === \"receive\" && ev.newIndex >= 0 && that.trigger(ACTION, moveArgs)) {\n                    ev.preventDefault();\n                    return;\n                } else if (ev.action === \"sort\" && ev.newIndex !== ev.oldIndex) {\n                    moveArgs.options.newIndex += 1;\n                    that.trigger(ACTION, moveArgs);\n                }\n            },\n\n            _change: function(ev) {\n                var that = this;\n\n                extend(ev, {\n                    columnElement: ev.sender.element.parents(DOT + TaskBoardColumn.styles.element)\n                });\n\n                that.trigger(CHANGE, ev);\n\n            },\n\n            destroy: function() {\n                var that = this;\n\n                that.header.off(NS);\n                that.container.off(NS);\n\n                if (that.sortable) {\n                    that.sortable.destroy();\n                }\n            }\n        });\n\n        var TaskBoardNewColumn = TaskBoardColumn.extend({\n            _render: function() {\n                var that = this,\n                    styles = TaskBoardColumn.styles,\n                    element = $(\"<div class='\" + styles.element + \"'></div>\").addClass(styles.newColumn).attr(kendo.attr(\"uid\"), that._dataItem.uid),\n                    header = $(\"<div class='\" + styles.header + \"'></div>\");\n\n                that.header = header.appendTo(element);\n\n                that._renderEditHeader();\n\n                that.element = element;\n            }\n        });\n\n        extend(kendo.ui, {\n            taskboard: {\n                Column: TaskBoardColumn,\n                NewColumn: TaskBoardNewColumn\n            }\n        });\n\n        extend(true, kendo.ui.taskboard.Column, {\n            styles: TaskBoardColumnStyles,\n            ignoreDragSelectors: [\"img\"]\n        });\n\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            Observable = kendo.Observable,\n            encode = kendo.htmlEncode,\n            extend = $.extend;\n\n        var TaskBoardCardStyles = {\n            element: \"k-taskboard-card\",\n            card: \"k-card\",\n            header: \"k-card-header\",\n            hbox: \"k-hbox\",\n            title: \"k-card-title\",\n            link: \"k-link\",\n            spacer: \"k-spacer\",\n            button: \"k-button\",\n            cardMenuButton: \"k-taskboard-card-menu-button k-icon-button\",\n            flatButton: \"k-button-md k-rounded-md k-button-flat k-button-flat-base\",\n            body: \"k-card-body\",\n            actionsIcon: \"more-vertical\",\n            moveCursor: \"k-cursor-move\",\n            categoryBorder: \"k-taskboard-card-category\",\n            headerActions: \"k-card-header-actions\",\n            disabled: \"k-disabled\"\n        };\n\n        var TaskBoardCard = Observable.extend({\n            init: function(options, dataItem, resources) {\n                var that = this;\n\n                that._dataItem = dataItem;\n                that.resources = resources;\n\n                that.options = extend(true, {}, options);\n\n                that._render();\n\n                Observable.fn.init.call(that);\n            },\n\n            contentTemplate: (data) => `<div class=\"${encode(data.styles.header)} ${encode(data.styles.hbox)}\">` +\n                `<a class=\"${encode(data.styles.title)} ${encode(data.styles.link)}\" href=\"#\" ${data.selectable ? kendo.attr(\"command\") + '=SelectCardCommand' : ''}>${encode(kendo.getter(data.dataTitleField)(data))}</a>` +\n                `<span class=\"${encode(data.styles.spacer)}\"></span>` +\n                `${data.cardMenuButton}` +\n            '</div>' +\n            `<div class=\"${encode(data.styles.body)}\"><p>${encode(kendo.getter(data.dataDescriptionField)(data))}</p></div>`,\n\n            cardMenuButtonTemplate: ({ styles }) => `<div class=\"${encode(styles.headerActions)}\"><button aria-label=\"menu\" class=\"${encode(styles.button)} ${encode(styles.flatButton)} ${encode(styles.cardMenuButton)}\">` +\n                                        kendo.ui.icon({ icon: encode(styles.actionsIcon), iconClass: \"k-button-icon\" }) +\n                                    '</button></div>',\n\n            _render: function() {\n                var that = this,\n                    options = that.options,\n                    styles = TaskBoardCard.styles,\n                    template = options.template || that.contentTemplate,\n                    element = $(\"<div class='\" + styles.element + \" \" + styles.card + \" \" + styles.moveCursor + \"'></div>\"),\n                    cardMenuButtonTemplate = options.cardMenu ? that.cardMenuButtonTemplate : \"\",\n                    resources = that._resources(that._dataItem),\n                    borderDir = options.states.isRtl ? \"borderRightColor\" : \"borderLeftColor\",\n                    categoryColor;\n\n                element\n                    .attr(kendo.attr(\"uid\"), that._dataItem.uid)\n                    .attr(\"aria-disabled\", !options.states.isDisabled)\n                    .attr(\"role\", \"listitem\")\n                    .toggleClass(styles.disabled, options.states.isDisabled);\n\n                categoryColor = (resources[options.dataCategoryField] && resources[options.dataCategoryField].color) ||\n                                    that._dataItem.get(options.dataCategoryField);\n\n                if (categoryColor) {\n                    element.addClass(styles.categoryBorder).css(borderDir, categoryColor);\n                }\n\n                element.append(kendo.template(template)(extend(true, {}, {\n                    styles: styles,\n                    cardMenuButton: kendo.template(cardMenuButtonTemplate)({ styles: styles }),\n                    selectable: options.states.isSelectable,\n                    resources: resources,\n                    dataTitleField: options.dataTitleField,\n                    dataDescriptionField: options.dataDescriptionField\n                }, that._dataItem)));\n\n                that.element = element;\n            },\n\n            _resources: function(card) {\n                var that = this,\n                    resources = {};\n\n                if (!that.resources) {\n                    return resources;\n                }\n\n                for (var key in that.resources) {\n                    var resource = that.resources[key];\n                    var field = resource.field;\n                    var cardResources = kendo.getter(field)(card);\n\n                    if (!cardResources) {\n                        continue;\n                    }\n\n                    if (!resource.multiple) {\n                        cardResources = [cardResources];\n                    }\n\n                    var data = resource.dataSource.view();\n\n                    for (var resourceIndex = 0; resourceIndex < cardResources.length; resourceIndex++) {\n                        var cardResource = null;\n\n                        var value = cardResources[resourceIndex];\n\n                        if (!resource.valuePrimitive) {\n                            value = kendo.getter(resource.dataValueField)(value);\n                        }\n\n                        for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n                            if (data[dataIndex].get(resource.dataValueField) == value) {\n                                cardResource = data[dataIndex];\n                                break;\n                            }\n                        }\n\n                        if (cardResource !== null) {\n                            var resourceColor = kendo.getter(resource.dataColorField)(cardResource);\n                            var result = {\n                                field: resource.field,\n                                title: resource.title,\n                                name: resource.name,\n                                text: kendo.getter(resource.dataTextField)(cardResource),\n                                value: value,\n                                color: resourceColor\n                            };\n\n                            if (resource.multiple) {\n                                if (resources[resource.field]) {\n                                    resources[resource.field].push(result);\n                                } else {\n                                    resources[resource.field] = [result];\n                                }\n                            } else {\n                                resources[resource.field] = result;\n                            }\n                        }\n                    }\n                }\n                return resources;\n            },\n\n            _buildTemplate: function() {\n                var that = this,\n                    options = that.options,\n                    headerTemplate = kendo.format(that.headerTemplate, options.dataTitleField),\n                    bodyTemplate = kendo.format(that.bodyTemplate, options.dataDescriptionField);\n\n                return headerTemplate + bodyTemplate;\n            }\n        });\n\n        extend(kendo.ui.taskboard, {\n            Card: TaskBoardCard\n        });\n\n        extend(true, kendo.ui.taskboard.Card, { styles: TaskBoardCardStyles });\n\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            extend = $.extend,\n            template = kendo.template,\n            ContextMenu = kendo.ui.ContextMenu,\n            encode = kendo.htmlEncode,\n\n            ACTION = \"action\";\n\n        var TaskBoardCardMenu = ContextMenu.extend({\n            init: function(element, options) {\n                var that = this;\n\n                ContextMenu.fn.init.call(that, element, options);\n\n                that._overrideTemplates();\n                that._extendItems();\n\n                that.bind(\"select\", that._onSelect.bind(that));\n                that.bind(\"open\", that._onOpen.bind(that));\n                that.bind(\"activate\", that._focus.bind(that));\n            },\n\n            _overrideTemplates: function() {\n                this.templates.sprite = ({ icon, spriteCssClass }) => `${(icon || spriteCssClass) ? kendo.ui.icon({ icon: encode(icon || \"\"), iconClass: encode(spriteCssClass || \"\") }) : ''}`;\n            },\n\n            defaultItems: {\n                \"editCard\": { name: \"editCard\", text: \"Edit card\", icon: \"pencil\", command: \"EditCardCommand\", rules: \"isEditable\" },\n                \"deleteCard\": { name: \"deleteCard\", text: \"Delete card\", icon: \"trash\", command: \"DeleteCardCommand\", rules: \"isEditable\" }\n            },\n\n            events: ContextMenu.fn.events.concat([\n                ACTION\n            ]),\n\n            _extendItems: function() {\n                var that = this,\n                    items = that.options.items,\n                    item, isBuiltInTool;\n\n                if (items && items.length) {\n                    for (var i = 0; i < items.length; i++) {\n                        item = items[i];\n                        isBuiltInTool = $.isPlainObject(item) && Object.keys(item).length === 1 && item.name;\n\n                        if (isBuiltInTool) {\n                            item = item.name;\n                        }\n\n                        if ($.isPlainObject(item)) {\n                            that._append(item);\n                        } else if (that.defaultItems[item]) {\n                            item = that.defaultItems[item];\n                            that._append(item);\n                        } else if (typeof(item) === \"string\") {\n                            item = { name: item, text: item, spriteCssClass: item, command: item + \"Command\" };\n                            that._append(item);\n                        }\n                    }\n                } else {\n                    for (var key in that.defaultItems) {\n                        item = that.defaultItems[key];\n                        that._append(item);\n                    }\n                }\n            },\n\n            _append: function(item) {\n                var that = this;\n\n                that._extendItem(item);\n\n                if (that._validateRules(item)) {\n                    that.append(item);\n                }\n            },\n\n            _extendItem: function(item) {\n                var that = this,\n                    messages = that.options.messages,\n                    attr = {};\n\n                attr[kendo.attr(\"command\")] = item.command;\n\n                if (item.options) {\n                    attr[kendo.attr(\"options\")] = item.options;\n                }\n\n                extend(item, {\n                    text: messages[item.name],\n                    icon: item.icon || \"\",\n                    spriteCssClass: item.spriteCssClass || \"\",\n                    attr: attr,\n                    uid: kendo.guid()\n                });\n            },\n\n            _validateRules: function(tool) {\n                var that = this,\n                    states = that.options.states,\n                    rules = tool.rules ? tool.rules.split(\";\") : [];\n\n                if (!rules.length) {\n                    return true;\n                }\n\n                for (var i = 0; i < rules.length; i++) {\n                    if (!states[rules[i]]) {\n                        return false;\n                    }\n                }\n\n                return true;\n            },\n\n            _onSelect: function(ev) {\n                var command = $(ev.item).attr(kendo.attr(\"command\")),\n                    options = $(ev.item).attr(kendo.attr(\"options\")),\n                    target = $(ev.target);\n\n                options = typeof(options) === \"string\" ? { value: options } : options;\n\n                if (!command) {\n                    return;\n                }\n\n                this.action({\n                    command: command,\n                    options: extend({ target: target }, options)\n                });\n            },\n\n            _onOpen: function(ev) {\n                var menu = ev.sender,\n                    items = menu.options.items;\n\n                if (!items && $.isEmptyObject(this.defaultItems)) {\n                    ev.preventDefault();\n                }\n            },\n\n            _focus: function(ev) {\n                if (ev.sender) {\n                    ev.sender.element.trigger(\"focus\");\n                }\n            },\n\n            action: function(args) {\n                this.trigger(ACTION, args);\n            }\n        });\n\n        extend(kendo.ui.taskboard, {\n            CardMenu: TaskBoardCardMenu\n        });\n\n        })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n            var kendo = window.kendo,\n                extend = $.extend,\n                isPlainObject = $.isPlainObject,\n                Class = kendo.Class;\n\n            var TaskBoardCommand = Class.extend({\n                init: function(options) {\n                    this.options = options;\n                    this.taskboard = options.taskboard;\n                },\n                _confirm: function(title, content, okText, cancel) {\n                    var that = this,\n                        taskboard = that.taskboard,\n                        taskboardOptions = taskboard.options,\n                        confirm;\n\n                    if (isPlainObject(taskboardOptions.editable) && taskboardOptions.editable.confirmation === false ) {\n                        var fakePromise = $.Deferred();\n                        fakePromise.resolve();\n                        return fakePromise;\n                    }\n\n                    confirm = $(\"<div></div>\").kendoConfirm(extend({}, {\n                        title: title,\n                        content: content,\n                        messages: {\n                            okText: okText,\n                            cancel: cancel\n                        },\n                        buttonLayout: \"normal\"\n                    })).data(\"kendoConfirm\");\n\n                    confirm.open();\n\n                    setTimeout(function() {\n                        confirm.element.trigger(\"focus\");\n                    });\n\n                    return confirm.result;\n                }\n            });\n\n            // Column commands\n            var AddColumnCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        taskboard = that.taskboard;\n\n                    if (taskboard.trigger(\"editColumn\", { column: null })) {\n                        return;\n                    }\n\n                    taskboard.columns().each(function(index, column) {\n                        taskboard.enableByColumn(column, false);\n                    });\n                    taskboard.addColumn();\n                }\n            });\n\n            var EditColumnCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        options = that.options,\n                        taskboard = that.taskboard;\n\n                    if (taskboard.trigger(\"editColumn\", { column: options.column })) {\n                        return;\n                    }\n\n                    taskboard.columns().each(function(index, column) {\n                        taskboard.enableByColumn(column, false);\n                    });\n                    taskboard.editColumn(options.columnElement);\n                }\n            });\n\n            var DeleteColumnCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        options = that.options,\n                        taskboard = that.taskboard,\n                        taskboardOptions = taskboard.options,\n                        messages = taskboardOptions.messages,\n                        columnDS = taskboard.columnsDataSource;\n\n                    var result = that._confirm(messages.deleteColumn, messages.deleteColumnConfirm, messages[\"delete\"], messages.cancel);\n\n                    result.done(function() {\n                        if (taskboard.trigger(\"deleteColumn\", { column: options.column })) {\n                            taskboard.dataSource.cancelChanges();\n                            return;\n                        }\n\n                        columnDS.remove(options.column);\n                        columnDS.sync();\n                    });\n                }\n            });\n\n            var SaveColumnCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        options = that.options,\n                        taskboard = that.taskboard,\n                        columnSettings = taskboard.options.columnSettings,\n                        columnDS = taskboard.columnsDataSource,\n                        column = options.column,\n                        text = options.target.val();\n\n                    if (taskboard.trigger(\"saveColumn\", { column: options.column })) {\n                        taskboard.dataSource.cancelChanges();\n                        return;\n                    }\n\n                    column.set(columnSettings.dataTextField, text);\n                    columnDS.sync();\n                }\n            });\n\n            var CancelEditColumnCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        taskboard = that.taskboard,\n                        columnDS = taskboard.columnsDataSource;\n\n                    columnDS.cancelChanges();\n                }\n            });\n\n            //Move focus command\n            var MoveFocusCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        taskboard = that.taskboard,\n                        options = that.options,\n                        cardElement = options.cardElement,\n                        columnElement = options.columnElement,\n                        columns = taskboard.columns(),\n                        currentColumnIndex = columnElement.index(),\n                        direction = options.value,\n                        columnIndex, column;\n\n                    switch (direction) {\n                        case \"left\":\n                            columnIndex = Math.max(0, currentColumnIndex - 1);\n                            break;\n                        case \"right\":\n                            columnIndex = Math.min(columns.length - 1, currentColumnIndex + 1);\n                            break;\n                        default:\n                            columnIndex = currentColumnIndex;\n                            break;\n                    }\n\n                    that.columns = columns;\n                    that.columnIndex = columnIndex;\n                    that.column = column = taskboard._getColumnByElement(columns.eq(columnIndex));\n                    that.cards = column.cards();\n\n                    if (cardElement) {\n                        that._moveFromCardFocus(direction, cardElement);\n                    } else if (columnElement && direction === \"down\") {\n                        that.cards.eq(0).trigger(\"focus\");\n                    } else {\n                        columns.eq(columnIndex).trigger(\"focus\");\n                    }\n                },\n                _moveFromCardFocus: function(direction, cardElement) {\n                    var that = this,\n                        currentIndex = cardElement.index(),\n                        focusCard, index, seekFocusableCard = false;\n\n                    switch (direction) {\n                        case \"up\":\n                            index = currentIndex - 1;\n                            break;\n                        case \"down\":\n                            index = currentIndex + 1;\n                            break;\n                        default:\n                            seekFocusableCard = true;\n                            index = currentIndex;\n                            break;\n                    }\n\n                    focusCard = that.cards.eq(index);\n\n                    if (!focusCard.length && seekFocusableCard) {\n                        focusCard = that._getFocusableCard(index, direction);\n                    }\n\n                    if (index >= 0) {\n                        focusCard.trigger(\"focus\");\n                    } else {\n                        that.options.columnElement.focus();\n                    }\n                },\n                _getFocusableCard: function(index, direction) {\n                    var that = this,\n                        lastIndex = that.cards.length - 1,\n                        focusable = that.cards.eq(Math.min(index, lastIndex));\n\n                    if (focusable.length) {\n                        return focusable;\n                    }\n\n                    if (that.columnIndex <= 0 || that.columnIndex >= that.columns.length - 1) {\n                        return;\n                    }\n\n                    switch (direction) {\n                        case \"left\":\n                            that.columnIndex = Math.max(0, that.columnIndex - 1);\n                            break;\n                        case \"right\":\n                            that.columnIndex = Math.min(that.columns.length - 1, that.columnIndex + 1);\n                            break;\n                    }\n\n                    that.column = that.taskboard._getColumnByElement(that.columns.eq(that.columnIndex));\n                    that.cards = that.column.cards();\n\n                    return that._getFocusableCard(index, direction);\n\n                }\n            });\n\n            // Card commands\n            var TaskBoardBaseCardCommand = TaskBoardCommand.extend({\n                _updateOrder: function(column, currentIndex) {\n                    var that = this,\n                        taskboard = that.taskboard,\n                        taskBoardOptions = taskboard.options,\n                        dataOrderField = taskBoardOptions.dataOrderField,\n                        options = that.options,\n                        currentCard = options.card,\n                        cardIndex = options.cardElement ? options.cardElement.index() : column.cards().length,\n                        newIndex = currentIndex,\n                        cards = column.cards().map(function(idx, card) {\n                            return taskboard.dataItem(card);\n                        }),\n                        prevCard = cards[cardIndex - 1],\n                        nextCard;\n\n                        currentCard.set(dataOrderField, newIndex);\n\n                        if (prevCard && prevCard.get(dataOrderField) >= currentCard.get(dataOrderField)) {\n                            currentCard.set(dataOrderField, prevCard.get(dataOrderField) + 1);\n                        }\n\n                        for (var i = newIndex + 1; i < cards.length; i++) {\n                            nextCard = cards[i];\n\n                            if (nextCard.get(dataOrderField) <= currentCard.get(dataOrderField)) {\n                                nextCard.set(dataOrderField, currentCard.get(dataOrderField) + 1);\n                                currentCard = nextCard;\n                            } else {\n                                break;\n                            }\n                        }\n                }\n            });\n\n            var SelectCardCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        taskboard = that.taskboard,\n                        options = that.options,\n                        cardElement = options.cardElement;\n\n                    taskboard._select(cardElement, true);\n                    cardElement.focus();\n                }\n            });\n\n            var SaveChangesCommand = TaskBoardBaseCardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        taskboard = that.taskboard,\n                        taskBoardOptions = taskboard.options,\n                        options = that.options,\n                        receivedStatus = options.card.get(taskBoardOptions.dataStatusField),\n                        targetColumn = taskboard._getColumn(receivedStatus),\n                        activeElm = $(document.activeElement);\n\n                    if (activeElm.length) {\n                        activeElm.trigger(\"change\");\n                    }\n\n                    if (taskboard.pane && taskboard.pane.form && !taskboard.pane.form.validate()) {\n                        return;\n                    }\n\n                    if (taskboard.trigger(\"saveCard\", { card: options.card })) {\n                        taskboard.dataSource.cancelChanges();\n                        return;\n                    }\n\n                    if (targetColumn && taskBoardOptions.dataOrderField) {\n                        that._updateOrder(targetColumn, options.card.get(taskBoardOptions.dataOrderField));\n                    }\n\n                    taskboard.dataSource.sync().then(function() {\n                        taskboard.columns().eq(0).trigger(\"focus\");\n                    });\n                }\n            });\n\n            var DeleteCardCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        taskboard = that.taskboard,\n                        messages = taskboard.options.messages,\n                        options = that.options;\n\n                    var result = that._confirm(messages.deleteCard, messages.deleteCardConfirm, messages[\"delete\"], messages.cancel);\n\n                    result\n                        .done(function() {\n                            if (taskboard.trigger(\"deleteCard\", { card: options.card })) {\n                                taskboard.dataSource.cancelChanges();\n                                return;\n                            }\n\n                            taskboard.dataSource.remove(options.card);\n                            taskboard.dataSource.sync().then(function() {\n                                taskboard.columns().eq(0).trigger(\"focus\");\n                            });\n                        })\n                        .fail(function() {\n                            options.cardElement.trigger(\"focus\");\n                        });\n                }\n            });\n\n            var MoveCardCommand = TaskBoardBaseCardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        taskboard = that.taskboard,\n                        taskBoardOptions = taskboard.options,\n                        columnSettings = taskBoardOptions.columnSettings,\n                        options = that.options,\n                        column = options.column,\n                        card = options.card,\n                        newIndex = options.newIndex,\n                        receivedStatus = column.get(columnSettings.dataStatusField);\n\n                    card.set(taskBoardOptions.dataStatusField, receivedStatus);\n\n                    if (taskBoardOptions.dataOrderField) {\n                        that._updateOrder(taskboard._getColumn(receivedStatus), newIndex);\n                    }\n\n                    taskboard.dataSource.sync();\n                }\n            });\n\n            var EditCardCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        taskboard = that.taskboard,\n                        options = that.options;\n\n                    if (taskboard.trigger(\"editCard\", { card: options.card })) {\n                        return;\n                    }\n\n                    taskboard._openPane(extend({\n                        pane: \"Edit\"\n                    }, options));\n                }\n            });\n\n            var AddCardCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        taskboard = that.taskboard,\n                        options = that.options;\n\n                    if (taskboard.trigger(\"editCard\", { card: null })) {\n                        return;\n                    }\n                    taskboard.dataSource.cancelChanges();\n                    taskboard._openPane(extend({\n                        pane: \"Create\"\n                    }, options));\n                }\n            });\n\n            // Pane commands\n            var OpenPaneCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        options = that.options,\n                        taskboard = that.taskboard;\n\n                    taskboard._openPane({\n                        pane: options.value,\n                        card: options.card,\n                        cardElement: options.cardElement,\n                        column: options.column,\n                        columnElement: options.columnElement\n                    });\n                }\n            });\n\n            var ClosePaneCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        taskboard = that.taskboard;\n\n                    taskboard._closePane();\n                    taskboard.dataSource.cancelChanges();\n                }\n            });\n\n            // Search command\n\n            var SearchCommand = TaskBoardCommand.extend({\n                exec: function() {\n                    var that = this,\n                        value = that.options.value,\n                        taskboard = that.taskboard,\n                        taskboardOptions = taskboard.options,\n                        searchOptions = taskboardOptions.search,\n                        operator = searchOptions.operator,\n                        fields = (searchOptions && searchOptions.fields) || [ taskboardOptions.dataTitleField, taskboardOptions.dataDescriptionField ],\n                        filters;\n\n                    filters = that._buildFilters(fields, operator, value);\n\n                    taskboard.dataSource.filter(filters);\n                },\n                _buildFilters: function(fields, operator, value) {\n                    var filters = fields.map(function(field) {\n                        return { field: field, operator: operator, value: value };\n                    });\n\n                    return { logic: \"or\", filters: filters };\n                }\n            });\n\n            extend(kendo.ui.taskboard, {\n                Command: TaskBoardCommand,\n                commands: {\n                    AddColumnCommand: AddColumnCommand,\n                    EditColumnCommand: EditColumnCommand,\n                    DeleteColumnCommand: DeleteColumnCommand,\n                    SaveColumnCommand: SaveColumnCommand,\n                    CancelEditColumnCommand: CancelEditColumnCommand,\n                    OpenPaneCommand: OpenPaneCommand,\n                    ClosePaneCommand: ClosePaneCommand,\n                    SelectCardCommand: SelectCardCommand,\n                    MoveFocusCommand: MoveFocusCommand,\n                    SaveChangesCommand: SaveChangesCommand,\n                    DeleteCardCommand: DeleteCardCommand,\n                    MoveCardCommand: MoveCardCommand,\n                    EditCardCommand: EditCardCommand,\n                    AddCardCommand: AddCardCommand,\n                    SearchCommand: SearchCommand\n                }\n            });\n\n        })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            extend = $.extend,\n            Observable = kendo.Observable,\n            encode = kendo.htmlEncode,\n\n            Form = kendo.ui.Form,\n\n            DOT = \".\",\n            NS = DOT + \"kendoTaskBoardPane\",\n\n            ACTION = \"action\",\n            CLICK = \"click\";\n\n        var TaskBoardPaneStyles = {\n            element: \"k-taskboard-pane\",\n            edit: \"k-taskboard-edit-pane\",\n            preview: \"k-taskboard-preview-pane\",\n            header: \"k-taskboard-pane-header\",\n            headerText: \"k-taskboard-pane-header-text\",\n            spacer: \"k-spacer\",\n            headerActions: \"k-taskboard-pane-header-actions\",\n            content: \"k-taskboard-pane-content\",\n            footerActions: \"k-taskboard-pane-actions\",\n            footerActionButtons: \"k-actions k-hstack k-justify-content-start\",\n            baseButton: \"k-button-solid-base\",\n            primaryButton: \"k-button-solid-primary\"\n        };\n\n        var TaskBoardPane = Observable.extend({\n            init: function(taskboard, options, dataItem, resources) {\n                var that = this;\n\n                that.taskboard = taskboard;\n                that._dataItem = dataItem;\n                that.resources = resources;\n                that.options = extend(true, {}, options);\n\n                that._render();\n\n                that.element.on(CLICK + NS,\n                    \"[\" + kendo.attr(\"command\") + \"]\",\n                    that._commandClick.bind(that));\n\n                Observable.fn.init.call(that);\n            },\n            headerTemplate: ({ styles, messages, fieldFormat }) => `<div class=\"${encode(styles.headerText)}\">${fieldFormat}</div>` +\n                            `<span class=\"${encode(styles.spacer)}\"></span>` +\n                            `<div class=\"${encode(styles.headerActions)}\">` +\n                                kendo.html.renderButton(`<button title=\"${encode(messages.close)}\" ${encode(kendo.attr(\"command\"))}=\"ClosePaneCommand\"></button>`, {\n                                    icon: \"x\",\n                                    iconClass: 'k-button-icon',\n                                    fillMode: \"flat\",\n                                }) +\n                            '</div>',\n            buttonTemplate: ({ styles, icon, spriteCssClass, text, fillMode, themeColor, command, options }) =>\n                kendo.html.renderButton(`<button title=\"${encode(text)}\" ${encode(kendo.attr(\"command\"))}=\"${encode(command)}\" ${encode(kendo.attr(\"options\"))}=\"${encode(options)}\">` +\n                    `${encode(text)}` +\n                '</button>', {\n                    icon: encode(icon),\n                    iconClass: `k-button-icon ${encode(spriteCssClass)}`,\n                    fillMode: fillMode,\n                    themeColor: themeColor\n                }),\n            contentTemplate: () => ``,\n            builtinButtons: {\n                \"edit\": { name: \"edit\", icon: \"pencil\", text: \"Edit\", themeColor: \"primary\", command: \"EditCardCommand\", rules: \"isEditable\" },\n                \"delete\": { name: \"delete\", icon: \"trash\", text: \"Delete\", command: \"DeleteCardCommand\", rules: \"isEditable\", fillMode: \"flat\", themeColor: \"primary\" },\n                \"cancel\": { name: \"cancel\", icon: \"cancel-outline\", text: \"Cancel\", command: \"ClosePaneCommand\" },\n                \"saveChanges\": { name: \"saveChanges\", icon: \"save\", text: \"Save\", command: \"SaveChangesCommand\", themeColor: \"primary\", rules: \"isEditable\" },\n                \"create\": { name: \"create\", icon: \"save\", text: \"Create\", command: \"SaveChangesCommand\", themeColor: \"primary\", rules: \"isEditable\" }\n            },\n            defaultButtons: [],\n            _render: function() {\n                var that = this,\n                    styles = TaskBoardPane.styles,\n                    element = $(\"<div class='\" + styles.element + \"'></div>\"),\n                    header = $(\"<div class='\" + styles.header + \"'></div>\"),\n                    content = $(\"<div class='\" + styles.content + \"'></div>\"),\n                    buttonsContainer = $(\"<div class='\" + styles.footerActions + \" \" + styles.footerActionButtons + \"'></div>\");\n\n                that.header = header.appendTo(element);\n                that._renderHeader();\n                that.content = content.appendTo(element);\n                that._renderContent();\n                that.buttonsContainer = buttonsContainer.appendTo(element);\n                that.buttonsContainer.append(that._buildButtonsHtml());\n                that.element = element;\n            },\n            _renderHeader: function() {\n                var that = this,\n                    styles = TaskBoardPane.styles,\n                    options = that.options,\n                    messages = options.messages,\n                    headerTemplate = options.headerTemplate ? options.headerTemplate : that.headerTemplate,\n                    resources = that._resources(that._dataItem);\n\n                that.header.append(kendo.template(headerTemplate)(extend(true, {}, {\n                    styles: styles,\n                    messages: messages,\n                    resources: resources,\n                    fieldFormat: that._buildHeaderTemplate(that._dataItem)\n                }, that._dataItem)));\n            },\n            _buildHeaderTemplate: function(dataItem) {\n                var that = this;\n                return encode(kendo.getter(that.options.dataTitleField)(dataItem));\n            },\n            _renderContent: function() {\n                var that = this,\n                    styles = TaskBoardPane.styles,\n                    options = that.options,\n                    messages = options.messages,\n                    contentTemplate = options.template || that.contentTemplate,\n                    resources = that._resources(that._dataItem);\n\n                that.content.append(kendo.template(contentTemplate)(extend(true, {}, {\n                    styles: styles,\n                    messages: messages,\n                    resources: resources\n                }, that._dataItem)));\n            },\n            _resources: function(card) {\n                var that = this,\n                    resources = {};\n\n                if (!that.resources) {\n                    return resources;\n                }\n\n                for (var key in that.resources) {\n                    var resource = that.resources[key];\n                    var field = resource.field;\n                    var cardResources = kendo.getter(field)(card);\n\n                    if (!cardResources) {\n                        continue;\n                    }\n\n                    if (!resource.multiple) {\n                        cardResources = [cardResources];\n                    }\n\n                    var data = resource.dataSource.view();\n\n                    for (var resourceIndex = 0; resourceIndex < cardResources.length; resourceIndex++) {\n                        var cardResource = null;\n\n                        var value = cardResources[resourceIndex];\n\n                        if (!resource.valuePrimitive) {\n                            value = kendo.getter(resource.dataValueField)(value);\n                        }\n\n                        for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n                            if (data[dataIndex].get(resource.dataValueField) == value) {\n                                cardResource = data[dataIndex];\n                                break;\n                            }\n                        }\n\n                        if (cardResource !== null) {\n                            var resourceColor = kendo.getter(resource.dataColorField)(cardResource);\n                            var result = {\n                                field: resource.field,\n                                title: resource.title,\n                                name: resource.name,\n                                text: kendo.getter(resource.dataTextField)(cardResource),\n                                value: value,\n                                color: resourceColor\n                            };\n\n                            if (resource.multiple) {\n                                if (resources[resource.field]) {\n                                    resources[resource.field].push(result);\n                                } else {\n                                    resources[resource.field] = [result];\n                                }\n                            } else {\n                                resources[resource.field] = result;\n                            }\n                        }\n                    }\n                }\n                return resources;\n            },\n            _buildButtonsHtml: function() {\n                var that = this,\n                    options = that.options,\n                    messages = options.messages,\n                    buttons = options.buttons || that.defaultButtons,\n                    styles = TaskBoardPane.styles,\n                    html = \"\";\n\n                for (var i = 0; i < buttons.length; i++) {\n                    var button = buttons[i];\n                    button = ($.isPlainObject(button) && Object.keys(button).length === 1 && button.name) ? button.name : button;\n\n                    if (typeof button === \"string\") {\n                        if (button === \"spacer\") {\n                            html += '<span class=\"k-spacer\"></span>';\n                            continue;\n                        }\n\n                        button = extend(true, {},\n                            that.builtinButtons[button] || { spriteCssClass: button, command: button + \"Command\" },\n                            { text: messages[button] || button }\n                        );\n                    } else if ($.isPlainObject(button) && button.name) {\n                        button = extend(true, button,\n                            { text: messages[button.name] }\n                        );\n                    }\n\n                    if (!that._validateRules(button)) {\n                        continue;\n                    }\n\n                    button.spriteCssClass = button.spriteCssClass || \"\";\n\n                    html += kendo.template(that.buttonTemplate)(extend(true, {}, {\n                        styles: styles,\n                        messages: messages,\n                        primary: false,\n                        options: null\n                    }, button));\n                }\n\n                return html;\n            },\n            _commandClick: function(ev) {\n                var that = this,\n                    target = $(ev.target).closest(\"[\" + kendo.attr(\"command\") + \"]\"),\n                    command = target.attr(kendo.attr(\"command\")),\n                    options = target.attr(kendo.attr(\"options\")),\n                    card = that._dataItem;\n\n                options = typeof(options) === \"string\" ? { value: options } : options;\n\n                if (!command) {\n                    return;\n                }\n\n                that.trigger(ACTION, {\n                    command: command,\n                    options: extend({ card: card }, options)\n                });\n            },\n            _validateRules: function(tool) {\n                var that = this,\n                    states = that.options.states,\n                    rules = tool.rules ? tool.rules.split(\";\") : [];\n\n                if (!rules.length) {\n                    return true;\n                }\n\n                for (var i = 0; i < rules.length; i++) {\n                    if (!states[rules[i]]) {\n                        return false;\n                    }\n                }\n\n                return true;\n            },\n            destroy: function() {\n                var that = this;\n\n                that.element.off(NS);\n                that.element.remove();\n            }\n        });\n\n        var TaskBoardPreviewPane = TaskBoardPane.extend({\n            init: function(taskboard, options, dataItem, resources) {\n                var that = this;\n\n                options = extend({}, options.previewPane, {\n                    dataTitleField: options.dataTitleField,\n                    dataDescriptionField: options.dataDescriptionField,\n                    messages: options.messages,\n                    states: options.states\n                });\n\n                that.contentTemplate = (data) => encode(kendo.getter(options.dataDescriptionField)(data));\n\n                TaskBoardPane.fn.init.call(that, taskboard, options, dataItem, resources);\n\n                that.element.addClass(TaskBoardPane.styles.preview);\n            },\n            defaultButtons: [ \"edit\", \"spacer\", \"delete\" ]\n        });\n\n        var TaskBoardEditPane = TaskBoardPane.extend({\n            init: function(taskboard, options, dataItem) {\n                var that = this;\n\n                options = extend({}, options.editable, {\n                    dataTitleField: options.dataTitleField,\n                    dataDescriptionField: options.dataDescriptionField,\n                    messages: options.messages,\n                    states: options.states\n                });\n\n                that.formSettings = extend(that.formSettings, {\n                    items: [\n                        { field: options.dataTitleField, label: options.messages[options.dataTitleField] },\n                        { field: options.dataDescriptionField, label: options.messages[options.dataDescriptionField] }\n                    ]\n                }, options.form);\n\n                TaskBoardPane.fn.init.call(that, taskboard, options, dataItem);\n\n                that.element.addClass(TaskBoardPane.styles.edit);\n            },\n            defaultButtons: [ \"saveChanges\", \"cancel\" ],\n            formSettings: {\n                buttonsTemplate: () => \"\"\n            },\n            _buildHeaderTemplate: function(dataItem) {\n                var that = this;\n                return `${that.options.messages.edit} ${encode(kendo.getter(that.options.dataTitleField)(dataItem))}`;\n            },\n            _renderContent: function() {\n                var that = this,\n                    options = that.options,\n                    styles = TaskBoardPane.styles,\n                    formSettings = options.form || that.formSettings,\n                    formLabelId = kendo.guid(),\n                    element = $(\"<div></div>\")\n                        .attr(\"role\", \"form\")\n                        .attr(\"aria-labelledby\", formLabelId),\n                    focusFirst = (options.form && options.form.focusFirst !== undefined$1) ? options.form.focusFirst : true;\n\n                that.header.find(DOT + styles.headerText).attr(\"id\", formLabelId);\n\n                that.content.append(element);\n\n                that.form = new Form(element, extend({}, formSettings, {\n                    formData: that._dataItem,\n                    focusFirst: focusFirst\n                }));\n            }\n        });\n\n        var TaskBoardCreatePane = TaskBoardEditPane.extend({\n            init: function(taskboard, options, dataItem, resources, column) {\n                var that = this,\n                    columnStatusField = options.columnSettings.dataStatusField,\n                    firstColumn = taskboard.columnsDataSource.view().at(0),\n                    status = column ? column[columnStatusField] : firstColumn[columnStatusField],\n                    clone = extend({}, dataItem);\n\n                dataItem = taskboard.dataSource.add();\n                dataItem.set(options.dataStatusField, status);\n\n                for (var key in clone) {\n                    dataItem.set(key, clone[key]);\n                }\n\n                TaskBoardEditPane.fn.init.call(that, taskboard, options, dataItem, resources);\n            },\n            _buildHeaderTemplate: function(dataItem) {\n                var that = this;\n                return that.options.messages.createNewCard;\n            },\n            defaultButtons: [ \"create\", \"cancel\"]\n        });\n\n        extend(kendo.ui.taskboard, {\n            Pane: TaskBoardPane,\n            panes: {\n                Preview: TaskBoardPreviewPane,\n                Edit: TaskBoardEditPane,\n                Create: TaskBoardCreatePane\n            }\n        });\n\n        extend(true, kendo.ui.taskboard.Pane, { styles: TaskBoardPaneStyles });\n\n    })(window.kendo.jQuery);\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            Observable = kendo.Observable,\n\n            extend = $.extend,\n\n            DOT = \".\",\n            NS = DOT + \"kendoKeyboardManager\",\n            KEYDOWN = \"keydown\",\n            ACTION = \"action\";\n\n\n        var Keyboard = Observable.extend({\n            init: function(element) {\n                var that = this;\n\n                that.register = {};\n                that.element = element;\n\n                that._attachEvents();\n\n                Observable.fn.init.call(that);\n            },\n\n            registerShortcut: function(selector, shortcut, options) {\n                var that = this;\n\n                if (!that.register[selector]) {\n                    that.register[selector] = [];\n                }\n\n                if (shortcut.keyCode && isNaN(shortcut.keyCode) && shortcut.keyCode.toUpperCase) {\n                    shortcut.keyCode = shortcut.keyCode.toUpperCase().charCodeAt(0);\n                }\n\n                that.register[selector].push({\n                    shortcut: extend({\n                        keyCode: null,\n                        ctrlKey: false,\n                        shiftKey: false,\n                        altKey: false\n                    }, shortcut),\n                    options: options\n                });\n\n            },\n\n            _attachEvents: function() {\n                var that = this,\n                    handler = that._handler.bind(that);\n\n                that.element.on(KEYDOWN + NS, handler);\n            },\n\n            _handler: function(ev) {\n                var that = this,\n                    target = $(ev.target),\n                    shortcuts, action;\n\n                for (var selector in that.register) {\n                    if (target.is(selector)) {\n                        shortcuts = that.register[selector];\n                        action = that._getAction(shortcuts, ev);\n\n                        if (action) {\n                            that._trigger(action, ev);\n                            break;\n                        }\n                    }\n                }\n            },\n\n            _trigger: function(action, ev) {\n                var that = this,\n                    target = $(ev.target);\n\n                if (action.command) {\n                    that.trigger(ACTION, extend({}, ev, {\n                        command: action.command,\n                        options: extend({}, {\n                            target: target\n                        }, action.options)\n                    }));\n                }\n\n                if (action.handler) {\n                    action.handler(ev);\n                }\n            },\n\n            _getAction: function(shortcuts, ev) {\n                var that = this;\n\n                for (var i = 0; i < shortcuts.length; i++) {\n                    if (that._compareShortcut(shortcuts[i].shortcut, ev)) {\n                        return shortcuts[i].options;\n                    }\n                }\n            },\n\n            _compareShortcut: function(shortcut, ev) {\n                var that = this;\n\n                for (var key in shortcut) {\n                    var result = false;\n\n                    switch (key) {\n                        case \"ctrlKey\":\n                            result = shortcut[key] !== that._getShortcutModifier(ev);\n                            break;\n                        default:\n                            result = shortcut[key] !== ev[key];\n                            break;\n                    }\n\n                    if (result) {\n                        return false;\n                    }\n                }\n\n                return true;\n            },\n\n            _getShortcutModifier: function(ev) {\n                var mac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n                return mac ? ev.metaKey : ev.ctrlKey;\n            },\n\n            destroy: function() {\n                var that = this;\n\n                that.element.off(NS);\n            }\n        });\n\n        extend(kendo.ui.taskboard, {\n            KeyboardManager: Keyboard\n        });\n\n    })(window.kendo.jQuery);\n\n    const __meta__ = {\n            id: \"taskboard\",\n            name: \"TaskBoard\",\n            category: \"web\",\n            description: \"The TaskBoard widget displays cards.\",\n            depends: [\"data\", \"sortable\", \"dialog\", \"form\", \"menu\", \"toolbar\", \"textbox\"]\n        };\n\n        var TaskBoardStyles = {\n            wrapper: \"k-taskboard\",\n            header: \"k-taskboard-header\",\n            content: \"k-taskboard-content\",\n            toolbar: \"k-taskboard-toolbar\",\n            columnsContainer: \"k-taskboard-columns-container\",\n            card: \"k-taskboard-card\",\n            column: \"k-taskboard-column\",\n            selected: \"k-selected\",\n            disabled: \"k-disabled\",\n            ignoreDrag: \"k-taskboard-drag-ignore\"\n        };\n\n        var preventDefault = function(ev) { ev.preventDefault(); };\n\n        (function($, undefined$1) {\n            var kendo = window.kendo,\n                Widget = kendo.ui.Widget,\n                DataSource = kendo.data.DataSource,\n                extend = $.extend,\n                ui = kendo.ui,\n                isArray = Array.isArray,\n                isPlainObject = $.isPlainObject,\n\n                GENERIC = \"_generic\",\n\n                DOT = \".\",\n\n                MOVE = \"move\",\n                MOVE_START = \"moveStart\",\n                MOVE_END = \"moveEnd\",\n                SELECT = \"select\",\n                EXECUTE = \"execute\",\n                ACTION = \"action\",\n                CHANGE = \"change\",\n                CLICK = \"click\",\n                TOGGLE = \"toggle\",\n                ERROR = \"change\",\n                DATABINDING = \"dataBinding\",\n                DATABOUND = \"dataBound\",\n                EDIT_CARD = \"editCard\",\n                SAVE_CARD = \"saveCard\",\n                DELETE_CARD = \"deleteCard\",\n                EDIT_COLUMN = \"editColumn\",\n                SAVE_COLUMN = \"saveColumn\",\n                DELETE_COLUMN = \"deleteColumn\",\n\n                COLUMNSDATABINDING = \"columnsDataBinding\",\n                COLUMNSDATABOUND = \"columnsDataBound\";\n\n            var TaskBoard = Widget.extend({\n                init: function(element, options) {\n                    var that = this;\n\n                    Widget.fn.init.call(that, element, options);\n\n                    element = that.wrapper = that.element;\n\n                    that._sortableIdentifier = that.element.attr(\"id\") || kendo.guid();\n\n                    that._wrapper();\n                    that._columnsDataSource();\n                    that._initResources();\n                    that._dataSource();\n                    that._initToolbar();\n                    that._initCardMenu();\n                    that._initKeyboard();\n\n                    if (that.options.autoBind) {\n                        that.load();\n                    }\n\n                    kendo.notify(that);\n                },\n\n                events: [\n                    MOVE,\n                    MOVE_START,\n                    MOVE_END,\n                    CHANGE,\n                    EXECUTE,\n                    SELECT,\n                    DATABINDING,\n                    DATABOUND,\n                    COLUMNSDATABINDING,\n                    COLUMNSDATABOUND,\n                    EDIT_CARD,\n                    SAVE_CARD,\n                    DELETE_CARD,\n                    EDIT_COLUMN,\n                    SAVE_COLUMN,\n                    DELETE_COLUMN\n                ],\n\n                options: {\n                    name: \"TaskBoard\",\n                    autoBind: true,\n                    height: 600,\n                    width: \"100%\",\n                    toolbar: true,\n                    dataStatusField: \"status\",\n                    dataTitleField: \"title\",\n                    dataDescriptionField: \"description\",\n                    dataCategoryField: \"category\",\n                    dataOrderField: null,\n                    cardMenu: true,\n                    editable: true,\n                    selectable: true,\n                    reorderable: true,\n                    previewPane: true,\n                    search: {\n                        operator: \"contains\"\n                    },\n                    dataSource: [],\n                    columns: [],\n                    columnSettings: {\n                        dataStatusField: \"status\",\n                        dataTextField: \"text\",\n                        dataOrderField: null\n                    },\n                    resources: [],\n                    messages: {\n                        edit: \"Edit\",\n                        createNewCard: \"Create new card\",\n                        create: \"Create\",\n                        search: \"Search\",\n                        previewCard: \"Preview card\",\n                        addCard: \"Add card\",\n                        editCard: \"Edit card\",\n                        deleteCard: \"Delete Card\",\n                        addColumn: \"Add column\",\n                        editColumn: \"Edit column\",\n                        deleteColumn: \"Delete column\",\n                        close: \"Close\",\n                        cancel: \"Cancel\",\n                        \"delete\": \"Delete\",\n                        saveChanges: \"Save changes\",\n                        title: \"Title:\",\n                        description: \"Description:\",\n                        newColumn: \"New column\",\n                        deleteColumnConfirm: \"Are you sure you want to delete this column?\",\n                        deleteCardConfirm: \"Are you sure you want to delete this card?\"\n                    }\n                },\n\n                defaultTools: {\n                    addColumn: { type: \"button\", name: \"addColumn\", command: \"AddColumnCommand\", icon: \"plus\", rules: \"isEditable\" },\n                    spacer: { type: \"spacer\" },\n                    search: {\n                        type: \"component\",\n                        name: \"search\",\n                        command: \"SearchCommand\",\n                        options: \"{ \\\"field\\\": \\\"name\\\", \\\"operator\\\": \\\"startswith\\\" }\",\n                        rules: \"isSearchable\",\n                        overflow: \"never\",\n                        component: \"TextBox\",\n                        componentOptions: {\n                            placeholder: \"search\",\n                            icon: \"search\",\n                            commandOn: \"input\"\n                        }\n                    }\n                },\n\n                items: function() {\n                    var that = this,\n                        result = $([]);\n\n                    for (var key in that._columns) {\n                        $.merge(result, that._columns[key].cards());\n                    }\n\n                    return result;\n                },\n\n                itemsByStatus: function(status) {\n                    var that = this,\n                        result = that._getColumn(status).cards();\n\n                    return result;\n                },\n\n                itemsByColumn: function(columnElm) {\n                    var that = this,\n                        column = that._getColumnByElement(columnElm);\n\n                    if (column) {\n                        return column.cards();\n                    }\n                },\n\n                load: function() {\n                    var that = this,\n                        fetchPromises = [];\n\n                    that._progress(true);\n\n                    fetchPromises.push(that.columnsDataSource.fetch());\n\n                    for (var key in that.resources) {\n                        fetchPromises.push(that.resources[key].dataSource.fetch());\n                    }\n\n                    $.when.apply(null, fetchPromises)\n                        .then(that.dataSource.read.bind(that.dataSource));\n                },\n\n                dataItem: function(cardElm) {\n                    var that = this,\n                        dataSource = that.dataSource,\n                        uid;\n\n                    cardElm = $(cardElm);\n                    uid = cardElm.attr(kendo.attr(\"uid\"));\n\n                    return dataSource.getByUid(uid);\n                },\n\n                columnDataItem: function(columnElm) {\n                    var that = this,\n                        columnsDataSource = that.columnsDataSource,\n                        uid;\n\n                    columnElm = $(columnElm);\n                    uid = columnElm.attr(kendo.attr(\"uid\"));\n\n                    return columnsDataSource.getByUid(uid);\n                },\n\n                columns: function() {\n                    var that = this,\n                        result = $([]);\n\n                    for (var key in that._columns) {\n                        $.merge(result, that._columns[key].element);\n                    }\n\n                    return result;\n                },\n\n                columnByStatus: function(status) {\n                    return this._getColumn(status).element;\n                },\n\n                select: function(card, toggle) {\n                    var that = this;\n\n                    if (!card) {\n                        return that.element\n                            .find(DOT + TaskBoard.styles.card + DOT + TaskBoard.styles.selected).eq(0);\n                    }\n\n                    card = $(card);\n                    toggle = toggle !== false;\n\n                    if (toggle) {\n                        that.element\n                            .find(DOT + TaskBoard.styles.card + DOT + TaskBoard.styles.selected)\n                            .removeClass(TaskBoard.styles.selected);\n                    }\n\n                    card.toggleClass(TaskBoard.styles.selected, toggle);\n                },\n\n                previewCard: function(cardElement) {\n                    var that = this,\n                        options = that.options,\n                        args = that._extendExecArgs({ target: cardElement });\n\n                    if (options.previewPane) {\n                        that._openPane(extend({\n                            pane: \"Preview\"\n                        }, args));\n                    }\n                },\n\n                editCard: function(cardElement) {\n                    var that = this,\n                        options = that.options,\n                        args;\n\n                    cardElement = $(cardElement);\n                    args = that._extendExecArgs({ target: cardElement });\n\n                    if (options.editable) {\n                        that._openPane(extend({\n                            pane: \"Edit\"\n                        }, args));\n                    }\n                },\n\n                saveCard: function() {\n                    var that = this;\n\n                    that.dataSource.sync();\n                },\n\n                deleteCard: function(cardElement) {\n                    var that = this,\n                        card = that.dataItem(cardElement);\n\n                    that.dataSource.remove(card);\n                    that.dataSource.sync();\n                },\n\n                addCard: function(dataItem) {\n                    var that = this,\n                        options = that.options,\n                        args = { card: dataItem };\n\n                    if (options.editable) {\n                        that._openPane(extend({\n                            pane: \"Create\"\n                        }, args));\n                    }\n                },\n\n                addColumn: function(index, data) {\n                    var that = this,\n                        columnSettings = extend(true, {}, that.options.columnSettings, {\n                            messages: that.options.messages,\n                            states: that._buildStates(),\n                            sortableIdentifier: that._sortableIdentifier\n                        }),\n                        newColumn, model, column;\n\n                    if (isNaN(index) && !data) {\n                        data = index;\n                        index = null;\n                    }\n\n                    model = that.columnsDataSource._createNewModel(data);\n                    index = isNaN(index) || index === null ? that.columnsDataSource.data().length : index;\n                    column = that.columns().eq(index);\n                    that.columnsDataSource.insert(index, model);\n\n                    newColumn = new ui.taskboard.NewColumn(columnSettings, model);\n\n                    if (isNaN(index) || !column.length) {\n                        that.columnsContainer.append(newColumn.element);\n                    } else {\n                        column.before(newColumn.element);\n                    }\n\n                    newColumn.bind(ACTION, that.executeCommand.bind(that));\n                },\n\n                editColumn: function(columnElement) {\n                    var that = this;\n\n                    columnElement = $(columnElement);\n\n                    that._getColumnByElement(columnElement).edit();\n                },\n\n                saveColumn: function() {\n                    var that = this;\n\n                    that.columnsDataSource.sync();\n                },\n\n                deleteColumn: function(columnElement) {\n                    var that = this,\n                        column = that.columnDataItem(columnElement);\n\n                    that.columnsDataSource.remove(column);\n                    that.columnsDataSource.sync();\n                },\n\n                registerShortcut: function(selector, shortcut, options) {\n                    var that = this;\n\n                    that.keyboardManager.registerShortcut(selector, shortcut, options);\n                },\n\n                enable: function(cardElement, toggle) {\n                    cardElement = $(cardElement);\n\n                    cardElement.toggleClass(TaskBoard.styles.disabled, toggle === false);\n                    cardElement.attr(\"aria-disabled\", toggle === false);\n                },\n\n                enableByColumn: function(columnElement, toggle) {\n                    var that = this;\n\n                    columnElement = $(columnElement);\n\n                    that.itemsByColumn(columnElement).each(function(index, card) {\n                        that.enable(card, toggle);\n                    });\n                },\n\n                readOnly: function(cardElement, toggle) {\n                    cardElement = $(cardElement);\n\n                    toggle = toggle !== false;\n\n                    cardElement.find(\"[\" + kendo.attr(\"command\") + \"]\").toggleClass(TaskBoard.styles.disabled, toggle);\n                    cardElement.find(\"a,button\").toggleClass(TaskBoard.styles.disabled, toggle);\n\n                    cardElement.toggleClass(TaskBoard.styles.ignoreDrag, toggle);\n                    cardElement.attr(\"aria-readonly\", toggle);\n                },\n\n                readOnlyByColumn: function(columnElement, toggle) {\n                    var that = this;\n\n                    columnElement = $(columnElement);\n\n                    that.itemsByColumn(columnElement).each(function(index, card) {\n                        that.readOnly(card, toggle);\n                    });\n                },\n\n                setDataSource: function(dataSource) {\n                    var that = this;\n\n                    that.options.dataSource = dataSource;\n                    that._dataSource();\n\n                    if (that.options.autoBind) {\n                        that.dataSource.read();\n                    }\n                },\n\n                setColumnsDataSource: function(dataSource) {\n                    var that = this;\n\n                    that.options.columns = dataSource;\n                    that._columnsDataSource();\n\n                    if (that.options.autoBind) {\n                        that.columnsDataSource.fetch(function() {\n                            that._renderCards(that.dataSource.view());\n                        });\n                    }\n                },\n\n                _getColumn: function(status) {\n                    return this._columns[status];\n                },\n\n                _getColumnByElement: function(columnElement) {\n                    var that = this;\n\n                    columnElement = $(columnElement);\n\n                    for (var key in that._columns) {\n                        if (that._columns[key].element[0] === columnElement[0]) {\n                            return that._columns[key];\n                        }\n                    }\n                },\n\n                _openPane: function(options) {\n                    var that = this,\n                        pane = new ui.taskboard.panes[options.pane](that, extend({}, that.options, {\n                            states: that._buildStates()\n                        }), options.card, that.resources, options.column),\n                        keyboardManager;\n\n                    if (that.pane) {\n                        that._closePane();\n                    }\n\n                    that.pane = pane;\n                    that.content.after(that.pane.element);\n                    that.content.css(\"margin-right\",\n                        that.pane.element.outerWidth() -\n                        parseInt(that.content.css(\"paddingRight\"), 10));\n\n                    that.pane.bind(ACTION, that.executeCommand.bind(that));\n\n                    that.pane.keyboardManager = keyboardManager = new ui.taskboard.KeyboardManager(that.pane.element);\n\n                    keyboardManager.bind(ACTION, that.executeCommand.bind(that));\n\n                    keyboardManager.registerShortcut(\"*\", {\n                        keyCode: kendo.keys.ESC\n                    }, { command: \"ClosePaneCommand\" });\n\n                    keyboardManager.registerShortcut(\"*\", {\n                        keyCode: kendo.keys.ENTER\n                    }, { command: \"SaveChangesCommand\", options: {\n                        card: that.pane._dataItem\n                    } });\n\n                    if (this.options.editable && this.options.editable.form && this.options.editable.form.focusFirst === false) {\n                        setTimeout(function() {\n                            that.pane.element.find(\"button\").eq(0).trigger(\"focus\");\n                        }, 0);\n                    }\n                },\n\n                _closePane: function() {\n                    var that = this;\n\n                    if (that.pane) {\n                        that.pane.keyboardManager.destroy();\n                        that.pane.unbind(ACTION);\n                        that.pane.destroy();\n                        delete that.pane;\n\n                        that.content.css(\"margin-right\", \"\");\n                    }\n                },\n\n                _wrapper: function() {\n                    var that = this,\n                        options = that.options,\n                        styles = TaskBoard.styles,\n                        headerElm = \"<div class='\" + styles.header + \"'></div>\",\n                        contentElm = \"<div class='\" + styles.content + \"'></div>\",\n                        colsContainer = \"<div class='\" + styles.columnsContainer + \"'></div>\";\n\n                    that.element.addClass(styles.wrapper)\n                        .width(options.width)\n                        .height(options.height)\n                        .attr(\"role\", \"application\");\n                    that.header = $(headerElm).appendTo(that.element);\n                    that.content = $(contentElm).appendTo(that.element);\n                    that.columnsContainer = $(colsContainer).appendTo(that.content);\n                },\n\n                _initToolbar: function() {\n                    var that = this,\n                        styles = TaskBoard.styles,\n                        options = that.options,\n                        toolbarElm = $(\"<div class='\" + styles.toolbar + \"'></div>\"),\n                        toolbarOptions = isArray(options.toolbar) ? { items: options.toolbar } : options.toolbar,\n                        tools;\n\n                    if (options.toolbar === false) {\n                        return;\n                    } else if (toolbarOptions === true) {\n                        toolbarOptions = {};\n                    }\n\n                    tools = toolbarOptions.items ? toolbarOptions.items : Object.keys(that.defaultTools);\n                    tools = that._processTools(tools);\n                    toolbarOptions.tools = tools;\n                    toolbarOptions.defaultTools = that.defaultTools;\n                    toolbarOptions.parentMessages = that.options.messages;\n\n                    that.header.append(toolbarElm);\n                    that.toolbar = new kendo.ui.ToolBar(toolbarElm, toolbarOptions);\n                    that.options.toolbar = that.toolbar.options;\n\n                    that.toolbar.bind(CLICK, that._toolbarClick.bind(that));\n                    that.toolbar.bind(TOGGLE, that._toolbarClick.bind(that));\n                    that.toolbar.bind(CHANGE, that._toolbarClick.bind(that));\n                },\n\n                _processTools: function(tools) {\n                    var that = this,\n                        states = that._buildStates(),\n                        isDefaultTool;\n\n                    tools.forEach(t => {\n                        var rules = t.rules || that.defaultTools[t] ? that.defaultTools[t].rules : null;\n                        isDefaultTool = isPlainObject(t) && Object.keys(t).length >= 1 && t.name && that.defaultTools[t.name];\n\n                        if (isDefaultTool) {\n                            var temp = extend({}, t);\n                            extend(t, that.defaultTools[t.name], temp);\n                        }\n\n                        if (isDefaultTool && t.name == \"search\") {\n                            extend(t.componentOptions, {\n                                icon: t.icon || that.defaultTools[t.name].componentOptions.icon,\n                                placeholder: t.text || that.options.messages.search\n                            });\n                        }\n\n                        if (!rules) {\n                            return;\n                        }\n\n                        rules = rules.split(\";\");\n\n                        if (!rules.length) {\n                            return;\n                        }\n\n                        for (var i = 0; i < rules.length; i++) {\n                            if (!states[rules[i]]) {\n                                if (t.rules) {\n                                    t.hidden = true;\n                                } else {\n                                    that.defaultTools[t].hidden = true;\n                                }\n                            }\n                        }\n                    });\n\n                    return tools;\n                },\n\n                _toolbarClick: function(ev) {\n                    var command = $(ev.target).data(\"command\"),\n                        options = $(ev.target).data(\"options\");\n\n                    options = extend({}, options, { value: $(ev.target).val() });\n\n                    if (!command) {\n                        return;\n                    }\n\n                    this.executeCommand({\n                        command: command,\n                        options: options\n                    });\n                },\n\n                _isToolEnabled: function(toolName) {\n                    var that = this,\n                        options = that.options.toolbar,\n                        items = options.items || that.defaultTools,\n                        found = false;\n\n                    for (var i = 0; i < items.length; i++) {\n                        if (items[i].name == toolName) {\n                            found = true;\n                            break;\n                        }\n                    }\n\n                    return items[toolName] || found;\n                },\n\n                _buildStates: function() {\n                    var that = this;\n\n                    return {\n                        isEditable: that._isEditable(),\n                        isReorderable: that._isReorderable(),\n                        isSelectable: that._isSelectable(),\n                        isReadOnly: !that._isReorderable() && !that._isEditable(),\n                        isDisabled: !that._isReorderable() && !that._isEditable() && !that._isSelectable(),\n                        isSearchable: that._isSearchable(),\n                        notLocalColumns: !(that.columnsDataSource.transport instanceof kendo.data.LocalTransport),\n                        isRtl: kendo.support.isRtl(that.wrapper)\n                    };\n                },\n\n                _isSearchable: function() {\n                    return !!this.options.search;\n                },\n\n                _isEditable: function() {\n                    return !!this.options.editable;\n                },\n\n                _isReorderable: function() {\n                    return !!this.options.reorderable;\n                },\n\n                _isSelectable: function() {\n                    return !!this.options.selectable;\n                },\n\n                executeCommand: function(args) {\n                    var that = this,\n                        commandName = args.command,\n                        commandOptions = extend({ taskboard: this }, isPlainObject(args.options) ? that._extendExecArgs(args.options) : { value: args.options }),\n                        command = ui.taskboard.commands[commandName] && new ui.taskboard.commands[commandName](commandOptions);\n\n\n                    if (!that.trigger(EXECUTE, args)) {\n                        if (command) {\n                            command.exec();\n                        } else {\n                            window.console.warn(kendo.format(\"Trying to use {0} command, but such is not available in the kendo.ui.taskboard.commands namespace!\", commandName));\n                        }\n                    }\n                },\n\n                _extendExecArgs: function(args) {\n                    var that = this,\n                        target = args.draggableEvent ? args.item : args.target,\n                        columnElm, cardElm, columnDataItem, cardDataItem;\n\n                    if (args.card) {\n                        target = that.items().filter(function(idx, elm) {\n                            return $(elm).attr(kendo.attr(\"uid\")) === args.card.get(\"uid\");\n                        });\n                    }\n\n                    if (!target || !(target && target.length)) {\n                        return args;\n                    }\n\n                    columnElm = args.columnElement || (target.is(DOT + TaskBoard.styles.column) ? target : target.parents(DOT + TaskBoard.styles.column));\n                    columnDataItem = that.columnsDataSource.getByUid(columnElm.data(kendo.ns + \"uid\"));\n                    cardElm = target.is(DOT + TaskBoard.styles.card) ? target : target.closest(DOT + TaskBoard.styles.card);\n                    cardDataItem = that.dataSource.getByUid(cardElm.data(kendo.ns + \"uid\"));\n\n                    return extend(args, {\n                        card: cardDataItem,\n                        cardElement: cardElm.length ? cardElm : undefined$1,\n                        column: columnDataItem,\n                        columnElement: columnElm.length ? columnElm : undefined$1\n                    });\n                },\n\n\n                _select: function(card, toggle) {\n                    var that = this;\n\n                    if (toggle === null) {\n                        toggle = true;\n                    }\n\n                    if (!that.trigger(SELECT, { card: card })) {\n                        that.select(card, toggle);\n                        that.previewCard(card);\n                    }\n                },\n\n                _columnsDataSource: function() {\n                    var that = this,\n                        options = that.options,\n                        columnSettings = options.columnSettings,\n                        columnsDataSource = options.columns;\n\n                    columnsDataSource = isArray(columnsDataSource) ? { data: columnsDataSource } : columnsDataSource;\n\n                    if (columnSettings.dataOrderField && !columnsDataSource.sort) {\n                        columnsDataSource.sort = { field: columnSettings.dataOrderField, dir: \"asc\" };\n                    }\n\n                    if (!columnsDataSource.schema) {\n                        var fields = {};\n\n                        fields[columnSettings.dataStatusField] = { type: \"string\", defaultValue: function() { return kendo.guid().split(\"-\")[0]; } };\n                        fields[columnSettings.dataTextField] = { type: \"string\" };\n\n                        if (columnSettings.dataOrderField) {\n                            fields[columnSettings.dataOrderField] = { type: \"number\" };\n                        }\n\n                        columnsDataSource.schema = {\n                            model: {\n                                fields: fields\n                            }\n                        };\n                    }\n\n                    if (that.columnsDataSource && that._columnsChangeHandler) {\n                        that.columnsDataSource.unbind(CHANGE, that._columnsChangeHandler);\n                        that.columnsDataSource.unbind(CHANGE, that._columnsErrorHandler);\n                    } else {\n                        that._columnsChangeHandler = that._columnsDataSourceChange.bind(that);\n                        that._columnsErrorHandler = that._error.bind(that);\n                    }\n\n                    that.columnsDataSource = DataSource.create(columnsDataSource)\n                                    .bind(CHANGE, that._columnsChangeHandler)\n                                    .bind(ERROR, that._columnsErrorHandler);\n                },\n\n                _columnsDataSourceChange: function(ev) {\n                    var that = this,\n                        view = that.columnsDataSource.view(),\n                        columnSettings = extend(true, {}, that.options.columnSettings, {\n                            messages: that.options.messages,\n                            states: that._buildStates(),\n                            sortableIdentifier: that._sortableIdentifier\n                         }),\n                        statusField = columnSettings.dataStatusField;\n\n                    if (ev.action && ev.action !== \"sync\") {\n                        return;\n                    }\n\n                    if (that.trigger(COLUMNSDATABINDING, ev)) {\n                        return;\n                    }\n\n                    that._progress(true);\n\n                    that._columns = {};\n                    that.columnsContainer.html(\"\");\n\n                    for (var i = 0; i < view.length; i++) {\n                        var data = view[i];\n                        var status = data[statusField] || GENERIC;\n                        var column;\n\n                        column = that._columns[status] = new ui.taskboard.Column(columnSettings, data);\n                        that.columnsContainer.append(column.element);\n                        column.bind(ACTION, that.executeCommand.bind(that));\n                        column.bind(MOVE, that._move.bind(that));\n                        column.bind(MOVE_END, that._moveEnd.bind(that));\n                        column.bind(MOVE_START, that._moveStart.bind(that));\n                        column.bind(CHANGE, that._changeOrder.bind(that));\n                        that._tabindex(column.element);\n                    }\n\n                    if (ev.action === \"sync\" || ev.action === undefined$1) {\n                        that._renderCards(that.dataSource.view());\n                    }\n\n                    that._progress(false);\n                    that.trigger(COLUMNSDATABOUND, ev);\n                },\n\n                _move: function(ev) {\n                    this.trigger(MOVE, this._extendExecArgs(ev));\n                },\n\n                _moveEnd: function(ev) {\n                    this.trigger(MOVE_END, this._extendExecArgs(ev));\n                },\n\n                _moveStart: function(ev) {\n                    this.trigger(MOVE_START, this._extendExecArgs(ev));\n                },\n\n                _changeOrder: function(ev) {\n                    this.trigger(CHANGE, this._extendExecArgs(ev));\n                },\n\n                _dataSource: function() {\n                    var that = this,\n                        options = that.options,\n                        dataSource = options.dataSource;\n\n                        dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;\n\n                    if (options.dataOrderField && !dataSource.sort) {\n                        dataSource.sort = { field: options.dataOrderField, dir: \"asc\" };\n                    }\n\n                    if (!dataSource.schema) {\n                        var fields = {};\n\n                        fields[options.dataStatusField] = { type: \"string\" };\n                        fields[options.dataTitleField] = { type: \"string\" };\n                        fields[options.dataDescriptionField] = { type: \"string\" };\n                        fields[options.dataCategoryField] = { type: \"string\" };\n\n                        if (options.dataOrderField) {\n                            fields[options.dataOrderField] = { type: \"number\" };\n                        }\n\n                        dataSource.schema = {\n                            model: {\n                                fields: fields\n                            }\n                        };\n                    }\n\n                    if (that.dataSource && that._changeHandler) {\n                        that.dataSource.unbind(CHANGE, that._changeHandler);\n                        that.dataSource.unbind(ERROR, that._errorHandler);\n                    } else {\n                        that._changeHandler = that._change.bind(that);\n                        that._errorHandler = that._error.bind(that);\n                    }\n\n                    that.dataSource = DataSource.create(dataSource)\n                                    .bind(CHANGE, that._changeHandler);\n                },\n\n                _change: function(ev) {\n                    var that = this;\n\n                    if (ev.action && ev.action !== \"sync\") {\n                        return;\n                    }\n\n                    if (that.trigger(DATABINDING, ev)) {\n                        return;\n                    }\n\n                    that._progress(true);\n\n                    that._clearColumns();\n                    that._renderCards(that.dataSource.view());\n                    that._closePane();\n\n                    that.trigger(DATABOUND, ev);\n                    that._progress(false);\n                },\n\n                _error: function() {\n                    this._progress(false);\n                },\n\n                _renderCards: function(data) {\n                    var that = this;\n\n                    for (var i = 0; i < data.length; i++) {\n                        that._renderCard(data[i]);\n                    }\n                },\n\n                _renderCard: function(card) {\n                    var that = this,\n                        options = extend({}, that.options, { states: that._buildStates() }),\n                        statusField = options.dataStatusField,\n                        status = card[statusField] || GENERIC;\n\n                    if (status && that._columns[status]) {\n                        card = new ui.taskboard.Card(options, card, that.resources);\n                        that._columns[status].addCard(card.element);\n                        that._tabindex(card.element);\n                    }\n                },\n\n                _clearColumns: function() {\n                    var that = this;\n\n                    for (var key in that._columns) {\n                        that._columns[key].empty();\n                    }\n                },\n\n                _initCardMenu: function() {\n                    var that = this,\n                        options = that.options,\n                        cardMenuOptions = isArray(options.cardMenu) ? { items: options.cardMenu } : options.cardMenu;\n\n                    cardMenuOptions = extend({}, {\n                        messages: options.messages,\n                        target: that.columnsContainer,\n                        filter: \".k-taskboard-card-menu-button\",\n                        action: that.executeCommand.bind(that),\n                        showOn: \"click\",\n                        alignToAnchor: true,\n                        states: that._buildStates()\n                    }, cardMenuOptions);\n\n                    if (options.cardMenu === false) {\n                        return;\n                    }\n\n                    that.cardMenu = new ui.taskboard.CardMenu(\"<ul></ul>\", cardMenuOptions);\n                },\n\n                _initResources: function() {\n                    var that = this,\n                        resources = that.options.resources;\n\n                    for (var i = 0; i < resources.length; i++) {\n                        that._addResource(resources[i]);\n                    }\n                },\n\n                _addResource: function(resource) {\n                    var that = this;\n\n                    if (!that.resources) {\n                        that.resources = {};\n                    }\n\n                    that.resources[resource.field] = {\n                        field: resource.field,\n                        name: resource.name,\n                        title: resource.title || resource.field,\n                        dataTextField: resource.dataTextField || \"text\",\n                        dataValueField: resource.dataValueField || \"value\",\n                        dataColorField: resource.dataColorField || \"color\",\n                        valuePrimitive: resource.valuePrimitive === false ? false : true,\n                        multiple: resource.multiple || false,\n                        dataSource: that._resourceDataSource(resource.dataSource)\n                    };\n                },\n\n                _resourceDataSource: function(resourceDS) {\n                    var dataSource = isArray(resourceDS) ? { data: resourceDS } : resourceDS,\n                        dataSourceInstance = kendo.data.DataSource.create(dataSource);\n\n                    return dataSourceInstance;\n                },\n\n                _progress: function(toggle) {\n                    var that = this;\n\n                    kendo.ui.progress(that.element, toggle);\n                },\n\n                _initKeyboard: function() {\n                    var that = this;\n\n                    that.keyboardManager = new ui.taskboard.KeyboardManager(that.element);\n\n                    that.keyboardManager.bind(ACTION, that.executeCommand.bind(that));\n                    that._registerShortcuts();\n                },\n\n                _registerShortcuts: function() {\n                    var that = this,\n                        states = that._buildStates();\n\n                    if (states.isEditable) {\n                        that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                            keyCode: kendo.keys.DELETE\n                        }, { command: \"DeleteColumnCommand\" });\n\n                        that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                            keyCode: \"e\",\n                            ctrlKey: true\n                        }, { command: \"EditColumnCommand\", handler: preventDefault });\n\n                        that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                            keyCode: \"a\",\n                            ctrlKey: true\n                        }, { command: \"AddCardCommand\", handler: preventDefault });\n\n                        that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column + \" *\", {\n                            keyCode: kendo.keys.ESC\n                        }, { command: \"CancelEditColumnCommand\" });\n\n                        that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                            keyCode: kendo.keys.DELETE\n                        }, { command: \"DeleteCardCommand\" });\n\n                        that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                            keyCode: \"e\",\n                            ctrlKey: true\n                        }, { command: \"EditCardCommand\", handler: preventDefault });\n                    }\n\n                    if (states.isSelectable) {\n                        that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                            keyCode: kendo.keys.ENTER\n                        }, { command: \"SelectCardCommand\", handler: preventDefault });\n                    }\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                        keyCode: kendo.keys.UP\n                    }, { command: \"MoveFocusCommand\", options: { value: \"up\" }, handler: preventDefault });\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                        keyCode: kendo.keys.DOWN\n                    }, { command: \"MoveFocusCommand\", options: { value: \"down\" }, handler: preventDefault });\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                        keyCode: kendo.keys.LEFT\n                    }, { command: \"MoveFocusCommand\", options: { value: \"left\" }, handler: preventDefault });\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                        keyCode: kendo.keys.RIGHT\n                    }, { command: \"MoveFocusCommand\", options: { value: \"right\" }, handler: preventDefault });\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                        keyCode: kendo.keys.LEFT\n                    }, { command: \"MoveFocusCommand\", options: { value: \"left\" }, handler: preventDefault });\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                        keyCode: kendo.keys.RIGHT\n                    }, { command: \"MoveFocusCommand\", options: { value: \"right\" }, handler: preventDefault });\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                        keyCode: kendo.keys.DOWN\n                    }, { command: \"MoveFocusCommand\", options: { value: \"down\" }, handler: preventDefault });\n                },\n\n                destroy: function() {\n                    var that = this;\n\n                    if (that._columnsChangeHandler) {\n                        that.columnsDataSource.unbind(CHANGE, that._columnsChangeHandler);\n                        that.columnsDataSource.unbind(CHANGE, that._columnsErrorHandler);\n                    }\n\n                    if (that._changeHandler) {\n                        that.dataSource.unbind(CHANGE, that._changeHandler);\n                        that.dataSource.unbind(ERROR, that._errorHandler);\n                    }\n\n                    for (var key in that._columns) {\n                        that._columns[key].destroy();\n                    }\n\n                    if (that.toolbar) {\n                        that.toolbar.destroy();\n                    }\n\n                    if (that.cardMenu) {\n                        that.cardMenu.destroy();\n                    }\n\n                    if (that.keyboardManager) {\n                        that.keyboardManager.destroy();\n                    }\n\n                    if (that.pane) {\n                        that._closePane();\n                    }\n\n                    Widget.fn.destroy.call(that);\n                }\n            });\n\n            kendo.ui.plugin(TaskBoard);\n\n            extend(true, TaskBoard, { styles: TaskBoardStyles });\n\n        })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}