{"version":3,"sources":["raw-js/kendo.pivotgrid-common.cmn.chunk.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","PivotgridCommonCmnChunk","DataQueryCmnChunk","this","kendo_dataQuery_cmn_chunk_js","filterFunctionFormats","contains","doesnotcontain","endswith","eq","neq","startswith","operators","serializeExpression","expression","command","value","String","field","operator","str","values","_i","arguments","length","forEach","index","replace","RegExp","concat","formatString","serializeMembers","members","measures","sort","memberName","parsed","found","expanded","child","root","idx","member","name_1","name","push","hierarchyName","baseHierarchyPath","j","l","indexOf","expand","parseDescriptors","rootNames","some","n","getRootNames","crossJoinCommands","names","crossJoinCommand","mapNames","expandMemberDescriptor","join","measureNames","measure","result","undefined","rootLength","slice","name_2","rootName","tmp","crossJoin","sortDescriptor","length_1","sortDescriptorForMember","dir","parts","split","pop","shift","createRequestBody","options","_a","columnAxes","_b","rowAxes","_c","measureAxes","_d","_e","filter","measuresRowAxis","measuresAxis","filters","cube","current","serializeFilters","connection","catalog","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","TypeError","__","constructor","create","__assign","assign","t","s","i","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","done","then","__generator","body","f","y","_","label","sent","trys","ops","g","Iterator","verb","Symbol","iterator","v","op","__spreadArray","to","from","pack","ar","SuppressedError","parseResponse","response","xmlDoc","DOMParser","parseFromString","axes","querySelectorAll","cells","map","cell","fmtValue","getPropertyValue","ordinal","parseInt","getAttribute","columns","tuples","rows","data","axis","tuple","lNum","hasChildren","caption","children","hierarchy","levelName","levelNum","parentName","translateAxis","indexedData","fill","c","counter","rowTuple","colTuple","columnTuple","node","querySelector","textContent","discoverCommands","schemaCatalogs","schemaCubes","schemaDimensions","schemaHierarchies","schemaKPIs","schemaLevels","schemaMeasures","schemaMembers","createDiscoverBody","properties","serializeOptions","restrictions","Catalog","parentTagName","capitalize","key","toUpperCase","discoverParser","row","description","type","defaultHierarchy","uniqueName","dimensionUniqueName","displayFolder","origin","defaultMember","goal","status","trend","statusGraphic","trendGraphic","groupName","orderingProperty","hierarchyUniqueName","aggregator","defaultFormat","levelUniqueName","childrenCardinality","isMeasure","getMaxNesting","set","Set","add","size","getMaxExpansion","generateNormalizedPath","parent","normalizedPath","Boolean","toMatrix","rowIndex","colIndex","maxDepth","maxBreadth","matrix","leafs","branchDepth","branchBreadth","depth","breadth","matrixResult","leafsResult","findIndex","level","inject","total","path","splice","collOffset","newMatrix","newLeafs","childBreadth","withTotal","alt","childIndex","childHierarchy","copy","obj","JSON","parse","stringify","kpiMeasure","kpi","buildKPIMeasures","compareAxisWithField","a","compareAxes","filterField","out","_loop_2","startsWith","duplicatedAxisIndex","ax","insertAxis","toInsert","state","dropTarget","dropDirection","offset","reverseColumnsByMeasures","firstColumn","lastMember","columnsArr","measuresCount","col","result_1","arr","reverse","HEADERS_ACTION","PIVOT_CONFIGURATOR_ACTION","findPath","matchFn","matched","match","h","headersReducer","action","toggle","existing","find","payload","collapse","existing_1","nextState","filtered_1","tree","H","AggregateType","configuratorReducer","newRows","newColumns","newMeasures","newSort","newFilter","newDragitem","newDropZone","newDropDirection","newDropTarget","toggleSelection","isArray","payload_1","removeMeasureAxis","addMeasureAxis","every","m","removeMeasureAxes","addMeasureAxes","removeColumnAxis","removeRowAxis","addColumnAxis","addRowAxis","addColumnAxes","removeColumnAxes","addRowAxes","removeRowAxes","remove","setDragItem","setDropZone","setDropTarget","setDropDirection","drop","dragItem","dropZone","currentColumn","currentRow","currentMeasure","setSort","setFilter","addFilter","changeFilter","removeFilter","count","createAggregate","Sum","init","merge","src","dest","accumulate","acc","format","toFixed","Count","_value","Min","Number","POSITIVE_INFINITY","Math","min","isFinite","NaN","Max","NEGATIVE_INFINITY","max","Average","sumProp_1","countProp_1","Error","sumAggregate","countAggregate","minAggregate","maxAggregate","averageAggregate","forEachDesc","desc","callbackfn","filterFields","callback","subNode","initialNode","childNode","get","Map","splitKeyValue","keyValue","separatorIndex","substring","calculateColumnData","dataField","k","childData_1","parentData_1","aggregate","mergeTrees","srcChild","destChild","calculateColumns","columnsData","srcColumns","destColumns","createPath","caption_1","membersNode","axisSettings","cache","cacheData","has","currentLevel","currentLevelNode","levelField_1","_loop_1","item","newDest","currentPath","readData","dataTree","rowTuples","columnTuples","fields","columnSettings","rowSettings","rowsCache","rowNode","rowColumnsNode","measuresMember_1","colNode","mergeData","exclude","rootFields","definitions","createTuples","axesSettings","sortDescriptors","excludeFields","parentFields","flatMembers","topTuple","allTuple","topField","getTopMembersTuple","currDef","axe","keysToAdd","keys","currDefMembers","element","delete","nodeData","curLevel_1","childrenByKeys","descriptor","order","sortableA","sortValue","sortableB","sortFunc","leafValue","leafTuple","axisCaption","curCaption","measureToMember","addMeasure","measureMember","tupleCopy","addMultipleMeasures","tupleWithMeasure","Navigation","tabIndex","eventHandlers","update","defineProperty","selectors","enumerable","configurable","all","elements","el","matches","start","_this","eventType","this_1","mouseEvents","ev","target","Element","closest","addEventListener","this_2","keyboardEvents","stop","removeEventListener","focusElement","previous","removeAttribute","classList","setAttribute","focus","preventScroll","scrollableValuesSel","scrollableColumnHeaderSel","scrollableRowHeaderSel","emptyCellSel","tableSel","cellSel","scrollables","selectors$1","onEnter","nav","icon","index_1","click","preventDefault","tryScrollLeft","scrollable","elToScroll","offsetLeft","scrollLeft","tryScrollRight","offsetWidth","tryScrollUp","scrollTop","offsetTop","tryScrollDown","offsetHeight","scrollTo","scrollFunc","scroll","tableMap","table","colsCount","colSpan","reduce","prev","cur","r","curColSpan","colSp","rowSp","rowSpan","ind","val","curInd","navigationMap","columnHeader","rowHeader","emptyCell","emptyCellRow","ctrlKey","metaKey","cellAt","pos","targetPos","getTargetPos","nextPos","keyboardEvents$1","keydown","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","o","_target","_ev","nextElementSibling","HTMLElement","setTimeout","parentNode","confHeader","Enter","Space","Home","ro","x","End","mouseEvents$1","hasAttribute","PivotGridNavigation","_super","navigate","onDelete","Tab","shiftKey","Escape","pivot","previousElementSibling","confButton","pivotCell","Delete","Backspace","ConfiguratorNavigation","A","expandTree","descriptors","B","C","D","E","F","G","I","__meta__","id","category","depends","hidden","chunk","args","colTuples","leafNodes","compositeFilter","logic","predicate","fieldValues","hasFilter","filteringAxes","filteringFields_1","initializeFiltering","dataItem","filteringDataItem_1","displayValue","dataKey","node_1","eachAxis","leaf","fetchOptions","stringResponse","headers","method","fetch","url","text","tupleIndex","memberIndex","parent_1","parentKey","intruderIndex","rotateMatrix","q","hash","membersNames","columnsIndexes","rowsIndexes","colMembers","rowMembers","u","w","dimensions","dim","z"],"mappings":"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","file":"kendo.pivotgrid-common.cmn.chunk.min.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.data-query.cmn.chunk.js')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'kendo.data-query.cmn.chunk'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.PivotgridCommonCmnChunk = {}), global.kendo._globals.DataQueryCmnChunk));\n})(this, (function (exports, kendo_dataQuery_cmn_chunk_js) {\n  const __meta__ = {\n      id: \"pivotgrid-common.cmn.chunk\",\n      name: \"PivotgridCommonCmnChunk\",\n      category: \"web\",\n      description: \"A reusable outputed chunk of code\",\n      depends: ['data-query.cmn.chunk'],\n      hidden: true,\n      chunk: true,\n      \n  };\n\n\n\n  var filterFunctionFormats = {\n      contains: \", InStr({0}.CurrentMember.MEMBER_CAPTION,\\\"{1}\\\") > 0\",\n      doesnotcontain: \", InStr({0}.CurrentMember.MEMBER_CAPTION,\\\"{1}\\\")\",\n      endswith: \", Right({0}.CurrentMember.MEMBER_CAPTION,Len(\\\"{1}\\\"))=\\\"{1}\\\"\",\n      eq: \", {0}.CurrentMember.MEMBER_CAPTION = \\\"{1}\\\"\",\n      neq: \", {0}.CurrentMember.MEMBER_CAPTION = \\\"{1}\\\"\",\n      startswith: \", Left({0}.CurrentMember.MEMBER_CAPTION,Len(\\\"{1}\\\"))=\\\"{1}\\\"\"\n  };\n  var operators = {\n      doesnotcontain: 'doesnotcontain',\n      in: 'in',\n      neq: \"neq\"\n  };\n  /**\n   * @hidden\n   */\n  function serializeFilters(filters, cube) {\n      var command = \"\";\n      var current = \"\";\n      for (var idx = filters.length - 1; idx >= 0; idx--) {\n          current = \"SELECT (\";\n          current += serializeExpression(filters[idx]);\n          current += \") ON 0\";\n          if (idx === filters.length - 1) {\n              current += \" FROM [\" + cube + \"]\";\n              command = current;\n          }\n          else {\n              command = current + \" FROM ( \" + command + \" )\";\n          }\n      }\n      return command;\n  }\n  function serializeExpression(expression) {\n      var command = '';\n      var value = String(expression.value);\n      var field = expression.field;\n      var operator = expression.operator;\n      if (operator === operators.in) {\n          command += \"{\";\n          command += value;\n          command += \"}\";\n      }\n      else {\n          command += operator === operators.neq || operator === operators.doesnotcontain ? '-' : '';\n          command += \"Filter(\";\n          command += field + \".MEMBERS\";\n          command += formatString(filterFunctionFormats[operator], field, value);\n          command += \")\";\n      }\n      return command;\n  }\n  function formatString(str) {\n      var values = [];\n      for (var _i = 1; _i < arguments.length; _i++) {\n          values[_i - 1] = arguments[_i];\n      }\n      values.forEach(function (value, index) {\n          str = str.replace(new RegExp(\"\\\\{\".concat(index, \"\\\\}\"), 'g'), value);\n      });\n      return str;\n  }\n\n  /**\n   * @hidden\n   */\n  function serializeMembers(members, measures, sort) {\n      var command = \"\";\n      members = members || [];\n      var parsed = parseDescriptors(members);\n      var expanded = parsed.expanded;\n      var rootNames = getRootNames(parsed.root);\n      var crossJoinCommands = [];\n      var length = expanded.length;\n      var idx = 0;\n      var memberName;\n      var names = [];\n      if (rootNames.length > 1 || measures.length > 0) {\n          crossJoinCommands.push(crossJoinCommand(rootNames, measures));\n          for (; idx < length; idx++) {\n              memberName = expandMemberDescriptor(expanded[idx].name, sort);\n              names = mapNames(memberName, rootNames);\n              crossJoinCommands.push(crossJoinCommand(names, measures));\n          }\n          command += crossJoinCommands.join(\",\");\n      }\n      else {\n          for (; idx < length; idx++) {\n              memberName = expandMemberDescriptor(expanded[idx].name, sort);\n              names.push(memberName[0]);\n          }\n          command += rootNames.concat(names).join(\",\");\n      }\n      return command;\n  }\n  /**\n   * @hidden\n   */\n  function measureNames(measures) {\n      var length = measures.length;\n      var result = [];\n      var measure;\n      for (var idx = 0; idx < length; idx++) {\n          measure = measures[idx];\n          result.push(measure.name !== undefined ? measure.name : measure);\n      }\n      return result;\n  }\n  function getRootNames(members) {\n      var root = [];\n      members.forEach(function (member) {\n          var name = member.name[0];\n          var hierarchyName = baseHierarchyPath(name);\n          if (!root.some(function (n) { return n.indexOf(hierarchyName) === 0; })) {\n              root.push(name);\n          }\n      });\n      return root;\n  }\n  function parseDescriptors(members) {\n      var expanded = [];\n      var child = [];\n      var root = [];\n      var idx = 0;\n      var found;\n      for (; idx < members.length; idx++) {\n          var member = members[idx];\n          var name_1 = member.name;\n          found = false;\n          if (name_1.length > 1) {\n              child.push(member);\n          }\n          else {\n              var hierarchyName = baseHierarchyPath(name_1[0]);\n              for (var j = 0, l = root.length; j < l; j++) {\n                  if (root[j].name[0].indexOf(hierarchyName) === 0) {\n                      found = true;\n                      break;\n                  }\n              }\n              if (!found) {\n                  root.push(member);\n              }\n              if (member.expand) {\n                  expanded.push(member);\n              }\n          }\n      }\n      expanded = expanded.concat(child);\n      return {\n          expanded: expanded,\n          root: root\n      };\n  }\n  function mapNames(names, rootNames) {\n      var rootLength = rootNames.length;\n      rootNames = rootNames.slice(0);\n      for (var idx = 0; idx < names.length; idx++) {\n          var name_2 = names[idx];\n          for (var j = 0; j < rootLength; j++) {\n              var rootName = baseHierarchyPath(rootNames[j]);\n              if (name_2.indexOf(rootName) !== -1) {\n                  rootNames[j] = name_2;\n                  break;\n              }\n          }\n      }\n      return rootNames;\n  }\n  function crossJoinCommand(members, measures) {\n      var tmp = members.slice(0);\n      if (measures.length > 0) {\n          tmp.push(\"{\" + measureNames(measures).join(\",\") + \"}\");\n      }\n      return crossJoin(tmp);\n  }\n  function expandMemberDescriptor(names, sort) {\n      var idx = names.length - 1;\n      var name = names[idx];\n      var sortDescriptor = sortDescriptorForMember(sort, name);\n      if (sortDescriptor && sortDescriptor.dir) {\n          name = \"ORDER(\" + name + \".Children,\" + sortDescriptor.field + \".CurrentMember.MEMBER_CAPTION,\" + sortDescriptor.dir + \")\";\n      }\n      else {\n          name += \".Children\";\n      }\n      names[idx] = name;\n      return names;\n  }\n  function sortDescriptorForMember(sort, member) {\n      for (var idx = 0, length_1 = sort.length; idx < length_1; idx++) {\n          if (member.indexOf(sort[idx].field) === 0) {\n              return sort[idx];\n          }\n      }\n      return null;\n  }\n  function baseHierarchyPath(memberName) {\n      var parts = memberName.split(\".\");\n      if (parts.length > 2) {\n          return parts[0] + \".\" + parts[1];\n      }\n      return memberName;\n  }\n  function crossJoin(names) {\n      var result = \"CROSSJOIN({\";\n      var name;\n      if (names.length > 2) {\n          name = names.pop();\n          result += crossJoin(names);\n      }\n      else {\n          result += names.shift();\n          name = names.pop();\n      }\n      result += \"},{\";\n      result += name;\n      result += \"})\";\n      return result;\n  }\n\n  /**\n   * @hidden\n   */\n  function createRequestBody(options) {\n      var command = '<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\"><Header/><Body><Execute xmlns=\"urn:schemas-microsoft-com:xml-analysis\"><Command><Statement>';\n      var _a = options.columnAxes, columnAxes = _a === void 0 ? [] : _a, _b = options.rowAxes, rowAxes = _b === void 0 ? [] : _b;\n      var _c = options.measureAxes, measureAxes = _c === void 0 ? [] : _c, _d = options.sort, sort = _d === void 0 ? [] : _d, _e = options.filter, filter = _e === void 0 ? [] : _e;\n      var measuresRowAxis = options.measuresAxis === \"rows\";\n      command += \"SELECT NON EMPTY {\";\n      if (!columnAxes.length && rowAxes.length && (!measureAxes.length || (measureAxes.length && measuresRowAxis))) {\n          columnAxes = rowAxes;\n          rowAxes = [];\n          measuresRowAxis = false;\n      }\n      if (!columnAxes.length && !rowAxes.length) {\n          measuresRowAxis = false;\n      }\n      if (columnAxes.length) {\n          command += serializeMembers(columnAxes, !measuresRowAxis ? measureAxes : [], sort);\n      }\n      else if (measureAxes.length && !measuresRowAxis) {\n          command += measureNames(measureAxes).join(\",\");\n      }\n      command += \"} DIMENSION PROPERTIES CHILDREN_CARDINALITY, PARENT_UNIQUE_NAME ON COLUMNS\";\n      if (rowAxes.length || (measuresRowAxis && measureAxes.length > 1)) {\n          command += \", NON EMPTY {\";\n          if (rowAxes.length) {\n              command += serializeMembers(rowAxes, measuresRowAxis ? measureAxes : [], sort);\n          }\n          else {\n              command += measureNames(measureAxes).join(\",\");\n          }\n          command += \"} DIMENSION PROPERTIES CHILDREN_CARDINALITY, PARENT_UNIQUE_NAME ON ROWS\";\n      }\n      if (filter.length) {\n          command += \" FROM \";\n          command += \"(\";\n          command += serializeFilters(filter, options.connection.cube);\n          command += \")\";\n      }\n      else {\n          command += \" FROM [\" + options.connection.cube + \"]\";\n      }\n      command += '</Statement></Command><Properties><PropertyList><Catalog>' + options.connection.catalog + '</Catalog><Format>Multidimensional</Format></PropertyList></Properties></Execute></Body></Envelope>';\n      return command.replace(/&/g, \"&amp;\");\n  }\n\n  /******************************************************************************\n  Copyright (c) Microsoft Corporation.\n\n  Permission to use, copy, modify, and/or distribute this software for any\n  purpose with or without fee is hereby granted.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n  PERFORMANCE OF THIS SOFTWARE.\n  ***************************************************************************** */\n  /* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\n  var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n    return extendStatics(d, b);\n  };\n\n  function __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null)\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  }\n\n  var __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n  };\n\n  function __rest(s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n  }\n\n  function __decorate(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  }\n\n  function __param(paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n  }\n\n  function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n    var _, done = false;\n    for (var i = decorators.length - 1; i >= 0; i--) {\n        var context = {};\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n        if (kind === \"accessor\") {\n            if (result === void 0) continue;\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n            if (_ = accept(result.get)) descriptor.get = _;\n            if (_ = accept(result.set)) descriptor.set = _;\n            if (_ = accept(result.init)) initializers.unshift(_);\n        }\n        else if (_ = accept(result)) {\n            if (kind === \"field\") initializers.unshift(_);\n            else descriptor[key] = _;\n        }\n    }\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\n    done = true;\n  };\n\n  function __runInitializers(thisArg, initializers, value) {\n    var useValue = arguments.length > 2;\n    for (var i = 0; i < initializers.length; i++) {\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n    }\n    return useValue ? value : void 0;\n  };\n\n  function __propKey(x) {\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\n  };\n\n  function __setFunctionName(f, name, prefix) {\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n  };\n\n  function __metadata(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n  }\n\n  function __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  }\n\n  function __generator(thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n  }\n\n  var __createBinding = Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n  }) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n\n  function __exportStar(m, o) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n  }\n\n  function __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n  }\n\n  function __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n  }\n\n  /** @deprecated */\n  function __spread() {\n    for (var ar = [], i = 0; i < arguments.length; i++)\n        ar = ar.concat(__read(arguments[i]));\n    return ar;\n  }\n\n  /** @deprecated */\n  function __spreadArrays() {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n  }\n\n  function __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n  }\n\n  function __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n  }\n\n  function __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n  }\n\n  function __asyncDelegator(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n  }\n\n  function __asyncValues(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n  }\n\n  function __makeTemplateObject(cooked, raw) {\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n    return cooked;\n  };\n\n  var __setModuleDefault = Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n  }) : function(o, v) {\n    o[\"default\"] = v;\n  };\n\n  var ownKeys = function(o) {\n    ownKeys = Object.getOwnPropertyNames || function (o) {\n      var ar = [];\n      for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n      return ar;\n    };\n    return ownKeys(o);\n  };\n\n  function __importStar(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n    __setModuleDefault(result, mod);\n    return result;\n  }\n\n  function __importDefault(mod) {\n    return (mod && mod.__esModule) ? mod : { default: mod };\n  }\n\n  function __classPrivateFieldGet(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n  }\n\n  function __classPrivateFieldSet(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n  }\n\n  function __classPrivateFieldIn(state, receiver) {\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\n  }\n\n  function __addDisposableResource(env, value, async) {\n    if (value !== null && value !== void 0) {\n      if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n      var dispose, inner;\n      if (async) {\n        if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n        dispose = value[Symbol.asyncDispose];\n      }\n      if (dispose === void 0) {\n        if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n        dispose = value[Symbol.dispose];\n        if (async) inner = dispose;\n      }\n      if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n      if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n      env.stack.push({ value: value, dispose: dispose, async: async });\n    }\n    else if (async) {\n      env.stack.push({ async: true });\n    }\n    return value;\n  }\n\n  var _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n  };\n\n  function __disposeResources(env) {\n    function fail(e) {\n      env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n      env.hasError = true;\n    }\n    var r, s = 0;\n    function next() {\n      while (r = env.stack.pop()) {\n        try {\n          if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n          if (r.dispose) {\n            var result = r.dispose.call(r.value);\n            if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n          }\n          else s |= 1;\n        }\n        catch (e) {\n          fail(e);\n        }\n      }\n      if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n      if (env.hasError) throw env.error;\n    }\n    return next();\n  }\n\n  function __rewriteRelativeImportExtension(path, preserveJsx) {\n    if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n        return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n            return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n        });\n    }\n    return path;\n  }\n\n  var tslib_es6 = {\n    __extends,\n    __assign,\n    __rest,\n    __decorate,\n    __param,\n    __esDecorate,\n    __runInitializers,\n    __propKey,\n    __setFunctionName,\n    __metadata,\n    __awaiter,\n    __generator,\n    __createBinding,\n    __exportStar,\n    __values,\n    __read,\n    __spread,\n    __spreadArrays,\n    __spreadArray,\n    __await,\n    __asyncGenerator,\n    __asyncDelegator,\n    __asyncValues,\n    __makeTemplateObject,\n    __importStar,\n    __importDefault,\n    __classPrivateFieldGet,\n    __classPrivateFieldSet,\n    __classPrivateFieldIn,\n    __addDisposableResource,\n    __disposeResources,\n    __rewriteRelativeImportExtension,\n  };\n\n  /**\n   * @hidden\n   */\n  function parseResponse(response) {\n      var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n      var axes = Array.from(xmlDoc.querySelectorAll(\"Axis\"));\n      var cells = Array.from(xmlDoc.querySelectorAll(\"CellData > Cell\"))\n          .map(function (cell) { return ({\n          fmtValue: getPropertyValue(cell, \"FmtValue\"),\n          ordinal: parseInt(cell.getAttribute(\"CellOrdinal\"), 10),\n          value: getPropertyValue(cell, \"Value\")\n      }); });\n      var columns = { tuples: [] };\n      var rows = { tuples: [] };\n      var data = [];\n      axes.forEach(function (axis) {\n          if (axis.getAttribute('name') !== \"SlicerAxis\") {\n              var tuples = columns.tuples.length === 0 ? columns.tuples : rows.tuples;\n              Array.prototype.push.apply(tuples, translateAxis(axis));\n          }\n      });\n      var indexedData = new Array(rows.tuples.length * columns.tuples.length).fill(null);\n      cells.forEach(function (c) { indexedData[c.ordinal] = c; });\n      var counter = 0;\n      rows.tuples.forEach(function (rowTuple) {\n          columns.tuples.forEach(function (colTuple) {\n              data.push({\n                  columnTuple: colTuple,\n                  data: indexedData[counter],\n                  rowTuple: rowTuple\n              });\n              counter++;\n          });\n      });\n      return { columns: columns, data: data, rows: rows };\n  }\n  /**\n   * @hidden\n   */\n  function getPropertyValue(member, name) {\n      var node = member.querySelector(name);\n      return node ? node.textContent : \"\";\n  }\n  function translateAxis(axis) {\n      var tuples = Array.from(axis.querySelectorAll(\"Tuple\"));\n      return tuples.map(function (tuple) {\n          var memberElements = Array.from(tuple.querySelectorAll(\"Member\"));\n          var members = memberElements.map(function (member) {\n              var lNum = parseInt(getPropertyValue(member, \"LNum\") || \"0\", 10);\n              var hasChildren = parseInt(getPropertyValue(member, \"CHILDREN_CARDINALITY\") || \"0\", 10) > 0;\n              return {\n                  caption: getPropertyValue(member, \"Caption\"),\n                  children: [],\n                  hasChildren: hasChildren,\n                  hierarchy: member.getAttribute('Hierarchy'),\n                  levelName: getPropertyValue(member, \"LName\"),\n                  levelNum: lNum,\n                  name: getPropertyValue(member, \"UName\"),\n                  parentName: getPropertyValue(member, \"PARENT_UNIQUE_NAME\")\n              };\n          });\n          return { members: members };\n      });\n  }\n\n  /**\n   * @hidden\n   */\n  var discoverCommands = {\n      schemaCatalogs: \"DBSCHEMA_CATALOGS\",\n      schemaCubes: \"MDSCHEMA_CUBES\",\n      schemaDimensions: \"MDSCHEMA_DIMENSIONS\",\n      schemaHierarchies: \"MDSCHEMA_HIERARCHIES\",\n      schemaKPIs: \"MDSCHEMA_KPIS\",\n      schemaLevels: \"MDSCHEMA_LEVELS\",\n      schemaMeasures: \"MDSCHEMA_MEASURES\",\n      schemaMembers: \"MDSCHEMA_MEMBERS\"\n  };\n  /**\n   * @hidden\n   */\n  function createDiscoverBody(options) {\n      var properties = {};\n      var command = '<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\"><Header/><Body><Discover xmlns=\"urn:schemas-microsoft-com:xml-analysis\">';\n      command += \"<RequestType>\" + (discoverCommands[options.command] || options.command) + \"</RequestType>\";\n      command += \"<Restrictions>\" + serializeOptions(\"RestrictionList\", options.restrictions, true) + \"</Restrictions>\";\n      if (options.connection && options.connection.catalog) {\n          properties.Catalog = options.connection.catalog;\n      }\n      command += \"<Properties>\" + serializeOptions(\"PropertyList\", properties, false) + \"</Properties>\";\n      command += '</Discover></Body></Envelope>';\n      return command;\n  }\n  function serializeOptions(parentTagName, options, capitalize) {\n      var result = \"\";\n      if (options) {\n          result += \"<\" + parentTagName + \">\";\n          var value = void 0;\n          for (var key in options) {\n              if (options[key]) {\n                  value = options[key];\n                  if (capitalize) {\n                      key = key.replace(/([A-Z]+(?=$|[A-Z][a-z])|[A-Z]?[a-z]+)/g, \"$1_\").toUpperCase().replace(/_$/, \"\");\n                  }\n                  result += \"<\" + key + \">\" + value + \"</\" + key + \">\";\n              }\n          }\n          result += \"</\" + parentTagName + \">\";\n      }\n      else {\n          result += \"<\" + parentTagName + \"/>\";\n      }\n      return result;\n  }\n\n  /**\n   * @hidden\n   */\n  function parseCubes(response) {\n      var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n      var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n          .map(function (row) { return ({\n          name: getPropertyValue(row, \"CUBE_NAME\"),\n          caption: getPropertyValue(row, \"CUBE_CAPTION\"),\n          description: getPropertyValue(row, \"DESCRIPTION\"),\n          type: getPropertyValue(row, \"CUBE_TYPE\")\n      }); });\n      return rows;\n  }\n  /**\n   * @hidden\n   */\n  function parseCatalogs(response) {\n      var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n      var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n          .map(function (row) { return ({\n          name: getPropertyValue(row, \"CATALOG_NAME\"),\n          description: getPropertyValue(row, \"DESCRIPTION\")\n      }); });\n      return rows;\n  }\n  /**\n   * @hidden\n   */\n  function parseMeasures(response) {\n      var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n      var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n          .map(function (row) { return ({\n          name: getPropertyValue(row, \"MEASURE_NAME\"),\n          caption: getPropertyValue(row, \"MEASURE_CAPTION\"),\n          uniqueName: getPropertyValue(row, \"MEASURE_UNIQUE_NAME\"),\n          description: getPropertyValue(row, \"DESCRIPTION\"),\n          aggregator: getPropertyValue(row, \"MEASURE_AGGREGATOR\"),\n          groupName: getPropertyValue(row, \"MEASUREGROUP_NAME\"),\n          displayFolder: getPropertyValue(row, \"MEASURE_DISPLAY_FOLDER\"),\n          defaultFormat: getPropertyValue(row, \"DEFAULT_FORMAT_STRING\")\n      }); });\n      return rows;\n  }\n  /**\n   * @hidden\n   */\n  function parseKPIs(response) {\n      var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n      var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n          .map(function (row) { return ({\n          name: getPropertyValue(row, \"KPI_NAME\"),\n          uniqueName: getPropertyValue(row, \"KPI_NAME\"),\n          caption: getPropertyValue(row, \"KPI_CAPTION\"),\n          value: getPropertyValue(row, \"KPI_VALUE\"),\n          goal: getPropertyValue(row, \"KPI_GOAL\"),\n          status: getPropertyValue(row, \"KPI_STATUS\"),\n          trend: getPropertyValue(row, \"KPI_TREND\"),\n          statusGraphic: getPropertyValue(row, \"KPI_STATUS_GRAPHIC\"),\n          trendGraphic: getPropertyValue(row, \"KPI_TREND_GRAPHIC\"),\n          description: getPropertyValue(row, \"KPI_DESCRIPTION\"),\n          groupName: getPropertyValue(row, \"MEASUREGROUP_NAME\"),\n          type: \"kpi\"\n      }); });\n      return rows;\n  }\n  /**\n   * @hidden\n   */\n  function parseDimensions(response) {\n      var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n      var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n          .map(function (row) { return ({\n          caption: getPropertyValue(row, \"DIMENSION_CAPTION\"),\n          defaultHierarchy: getPropertyValue(row, \"DEFAULT_HIERARCHY\"),\n          description: getPropertyValue(row, \"DESCRIPTION\"),\n          name: getPropertyValue(row, \"DIMENSION_NAME\"),\n          type: parseInt(getPropertyValue(row, \"DIMENSION_TYPE\"), 10),\n          uniqueName: getPropertyValue(row, \"DIMENSION_UNIQUE_NAME\")\n      }); });\n      return rows;\n  }\n  /**\n   * @hidden\n   */\n  function parseHierarchies(response) {\n      var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n      var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n          .map(function (row) { return ({\n          name: getPropertyValue(row, \"HIERARCHY_NAME\"),\n          caption: getPropertyValue(row, \"HIERARCHY_CAPTION\"),\n          description: getPropertyValue(row, \"DESCRIPTION\"),\n          uniqueName: getPropertyValue(row, \"HIERARCHY_UNIQUE_NAME\"),\n          dimensionUniqueName: getPropertyValue(row, \"DIMENSION_UNIQUE_NAME\"),\n          displayFolder: getPropertyValue(row, \"HIERARCHY_DISPLAY_FOLDER\"),\n          origin: getPropertyValue(row, \"HIERARCHY_ORIGIN\"),\n          defaultMember: getPropertyValue(row, \"DEFAULT_MEMBER\")\n      }); });\n      return rows;\n  }\n  /**\n   * @hidden\n   */\n  function parseLevels(response) {\n      var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n      var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n          .map(function (row) { return ({\n          name: getPropertyValue(row, \"LEVEL_NAME\"),\n          caption: getPropertyValue(row, \"LEVEL_CAPTION\"),\n          description: getPropertyValue(row, \"DESCRIPTION\"),\n          uniqueName: getPropertyValue(row, \"LEVEL_UNIQUE_NAME\"),\n          dimensionUniqueName: getPropertyValue(row, \"DIMENSION_UNIQUE_NAME\"),\n          displayFolder: getPropertyValue(row, \"LEVEL_DISPLAY_FOLDER\"),\n          orderingProperty: getPropertyValue(row, \"LEVEL_ORDERING_PROPERTY\"),\n          origin: getPropertyValue(row, \"LEVEL_ORIGIN\"),\n          hierarchyUniqueName: getPropertyValue(row, \"HIERARCHY_UNIQUE_NAME\")\n      }); });\n      return rows;\n  }\n  /**\n   * @hidden\n   */\n  function parseMembers(response) {\n      var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n      var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n          .map(function (row) { return ({\n          name: getPropertyValue(row, \"MEMBER_NAME\"),\n          caption: getPropertyValue(row, \"MEMBER_CAPTION\"),\n          uniqueName: getPropertyValue(row, \"MEMBER_UNIQUE_NAME\"),\n          dimensionUniqueName: getPropertyValue(row, \"DIMENSION_UNIQUE_NAME\"),\n          hierarchyUniqueName: getPropertyValue(row, \"HIERARCHY_UNIQUE_NAME\"),\n          levelUniqueName: getPropertyValue(row, \"LEVEL_UNIQUE_NAME\"),\n          childrenCardinality: getPropertyValue(row, \"CHILDREN_CARDINALITY\")\n      }); });\n      return rows;\n  }\n\n  var discoverParser = {\n      schemaCatalogs: parseCatalogs,\n      schemaCubes: parseCubes,\n      schemaDimensions: parseDimensions,\n      schemaHierarchies: parseHierarchies,\n      schemaKPIs: parseKPIs,\n      schemaLevels: parseLevels,\n      schemaMeasures: parseMeasures,\n      schemaMembers: parseMembers\n  };\n  /**\n   * Fetches the data.\n   *\n   * @param options RequestOptions\n   * @returns Promise<ResponseData>\n   *\n   * @example\n   * const options: RequestOptions = { ... };\n   *\n   * fetchData(options).then(createDataState).then((dataState: DataState) => {\n   *  // Update the UI\n   * });\n   */\n  /**\n   * @hidden\n   */\n  var fetchData = function (fetchOptions, options) { return __awaiter(void 0, void 0, void 0, function () {\n      var init, response, stringResponse;\n      return __generator(this, function (_a) {\n          switch (_a.label) {\n              case 0:\n                  init = __assign({ body: createRequestBody(options), headers: { 'Content-Type': 'text/xml' }, method: 'POST' }, fetchOptions.init);\n                  return [4 /*yield*/, fetch(fetchOptions.url, init)];\n              case 1:\n                  response = _a.sent();\n                  return [4 /*yield*/, response.text()];\n              case 2:\n                  stringResponse = _a.sent();\n                  return [2 /*return*/, parseResponse(stringResponse)];\n          }\n      });\n  }); };\n  /**\n   * @hidden\n   */\n  var fetchDiscover = function (fetchOptions, options) { return __awaiter(void 0, void 0, void 0, function () {\n      var init, response, stringResponse;\n      return __generator(this, function (_a) {\n          switch (_a.label) {\n              case 0:\n                  init = __assign({ body: createDiscoverBody(options), headers: { 'Content-Type': 'text/xml' }, method: 'POST' }, fetchOptions.init);\n                  return [4 /*yield*/, fetch(fetchOptions.url, init)];\n              case 1:\n                  response = _a.sent();\n                  return [4 /*yield*/, response.text()];\n              case 2:\n                  stringResponse = _a.sent();\n                  return [2 /*return*/, discoverParser[options.command](stringResponse)];\n          }\n      });\n  }); };\n\n  var isMeasure = function (member) { return member.hierarchy === '[Measures]'; };\n  // A typical tree depth count won't work for the Pivot,\n  // as each branch can have lower number of nodes than the total number of levels\n  /**\n   * @hidden\n   */\n  var getMaxNesting = function (node, set) {\n      if (set === void 0) { set = new Set(); }\n      (node.children || []).forEach(function (child) {\n          set.add(child.levelName);\n          getMaxNesting(child, set);\n      });\n      return set.size;\n  };\n  /**\n   * @hidden\n   */\n  var getMaxExpansion = function (node) {\n      var expanded = 0;\n      (node.children || []).forEach(function (child) {\n          expanded += (getMaxExpansion(child) || 1);\n      });\n      return expanded;\n  };\n  /**\n   * @hidden\n   */\n  var generateNormalizedPath = function (node, parent) {\n      return (parent && (parent.hierarchy === node.hierarchy)\n          ? __spreadArray(__spreadArray([], (parent.normalizedPath || []).slice(0, -1), true), [node.name || null], false) : __spreadArray(__spreadArray([], ((parent && parent.normalizedPath) ? parent.normalizedPath : []), true), [node.name], false)).filter(Boolean);\n  };\n  /**\n   * @hidden\n   */\n  var generatePath = function (node, parent) {\n      return (parent && (parent.hierarchy === node.hierarchy)\n          ? __spreadArray(__spreadArray([], (parent.path || []).slice(0, -1), true), [((node.levelNum === 0 ? node.hierarchy : node.name) || null)], false) : __spreadArray(__spreadArray([], ((parent && parent.path) ? parent.path : []), true), [node.levelNum === 0 ? node.hierarchy : node.name], false)).filter(Boolean);\n  };\n  /**\n   * @hidden\n   */\n  var toMatrix = function (node, rowIndex, colIndex, maxDepth, maxBreadth, matrix, leafs, parent) {\n      if (rowIndex === void 0) { rowIndex = -1; }\n      if (colIndex === void 0) { colIndex = 0; }\n      if (maxDepth === void 0) { maxDepth = undefined; }\n      if (maxBreadth === void 0) { maxBreadth = undefined; }\n      if (matrix === void 0) { matrix = undefined; }\n      if (leafs === void 0) { leafs = undefined; }\n      if (parent === void 0) { parent = undefined; }\n      var branchDepth = getMaxNesting(node);\n      var branchBreadth = getMaxExpansion(node);\n      var depth = maxDepth || branchDepth;\n      var breadth = maxBreadth || branchBreadth;\n      var matrixResult = matrix ? matrix.slice() : [];\n      var leafsResult = leafs ? leafs.slice() : new Array(breadth);\n      var index = matrixResult.findIndex(function (l) { return l && l.name === node.levelName && l.level === node.levelNum; });\n      var level = matrixResult[index];\n      var row = {\n          name: node.levelName,\n          level: node.levelNum,\n          index: rowIndex,\n          cells: new Array(breadth).fill(null)\n      };\n      var inject = rowIndex !== -1 && colIndex !== -1;\n      var cell = {\n          caption: node.caption,\n          name: node.name,\n          levelName: node.levelName,\n          levelNum: node.levelNum,\n          hasChildren: node.hasChildren,\n          parentName: node.parentName,\n          hierarchy: node.hierarchy,\n          total: (node.total !== undefined ? node.total : false) || (parent && parent.children.length <= 1 && parent.total),\n          parent: parent,\n          rowIndex: rowIndex,\n          colIndex: colIndex,\n          depth: 1,\n          breadth: 1,\n          path: node.path || [],\n          normalizedPath: node.normalizedPath || [],\n          children: node.children.filter(function (c) { return c.hierarchy === node.hierarchy; })\n      };\n      if (inject) {\n          if (level) {\n              level.cells[colIndex] = cell;\n              if (level.index >= rowIndex) {\n                  rowIndex = level.index;\n              }\n          }\n          else {\n              if (matrixResult[rowIndex] && matrixResult[rowIndex].cells.length) {\n                  for (var idx = rowIndex; idx < matrixResult.length; idx++) {\n                      var shiftedRow = matrixResult[idx];\n                      shiftedRow.index++;\n                  }\n                  matrixResult.splice(rowIndex, 0, row);\n                  matrixResult[rowIndex].cells[colIndex] = cell;\n              }\n              else {\n                  matrixResult[rowIndex] = row;\n                  matrixResult[rowIndex].cells[colIndex] = cell;\n              }\n          }\n      }\n      var collOffset = 0;\n      if (node.children && node.children.length) {\n          node.children.forEach(function (child) {\n              var _a = toMatrix(child, rowIndex + 1, colIndex + collOffset, depth, breadth, matrixResult, leafsResult, cell), newMatrix = _a[0], newLeafs = _a[1], childBreadth = _a[3];\n              collOffset += (childBreadth || 1);\n              matrixResult = newMatrix.slice();\n              leafsResult = newLeafs.slice();\n          });\n      }\n      else if (node.normalizedPath) {\n          leafsResult[colIndex] = { total: cell.total, path: node.normalizedPath };\n      }\n      cell.depth = branchDepth;\n      cell.breadth = branchBreadth;\n      return [\n          matrixResult,\n          leafsResult,\n          branchDepth,\n          branchBreadth\n      ];\n  };\n  var withTotal = function (root, parent, index) {\n      if (parent === void 0) { parent = null; }\n      if (index === void 0) { index = 0; }\n      var hierarchy;\n      var alt = __assign(__assign({}, root), { total: true, hasChildren: false, children: [] });\n      for (var childIndex = 0; childIndex < root.children.length; childIndex++) {\n          var child = withTotal(root.children[childIndex], root, childIndex);\n          hierarchy = hierarchy || child.hierarchy;\n          if (child.hierarchy !== hierarchy\n              && parent\n              && !parent.children.some(function (c) { return c.total && c.name === alt.name; })\n              && !root.total) {\n              alt.children.push(child);\n              root.children.splice(childIndex, 1);\n              childIndex--;\n          }\n      }\n      if (root.children.filter(function (c) { return !c.total; }).length >= 1\n          && parent\n          && !parent.children.some(function (c) { return c.total && c.name === alt.name; })\n          && !root.total) {\n          var childHierarchy = root.children[0].hierarchy;\n          if (root.hierarchy === childHierarchy) {\n              parent.children.splice(index + 1, 0, alt);\n          }\n      }\n      return root;\n  };\n  /**\n   * @hidden\n   */\n  var toTree = function (tuples) {\n      var root = { children: [] };\n      var map = {};\n      if (tuples.every(function (t) { return t.members.length === 1 && isMeasure(t.members[0]); })) {\n          // toTree(columnsTuples) - The case where there are only measure(s) and no columns.\n          return {\n              children: tuples.map(function (t) {\n                  var member = t.members[0];\n                  return __assign(__assign({}, member), { normalizedPath: [member.name], parentName: member.name, path: [member.hierarchy] });\n              })\n          };\n      }\n      for (var tupleIndex = 0; tupleIndex < tuples.length; tupleIndex++) {\n          var tuple = copy(tuples[tupleIndex]);\n          var key = \"\";\n          var _loop_1 = function (memberIndex) {\n              var member = tuple.members[memberIndex];\n              var parent_1;\n              if (root.children && root.children.length === 0) {\n                  parent_1 = root;\n              }\n              else if (map[key] && !map[key + member.name] && member.levelNum === 0) {\n                  parent_1 = map[key];\n              }\n              else if (map[key + member.parentName] && member.levelNum > 0 && !map[key + member.parentName + member.name]) {\n                  parent_1 = map[key + member.parentName];\n              }\n              else if (!map[key + member.parentName] && member.levelNum > 0 && !map[key + member.parentName + member.name]) {\n                  var parentKey = Object.keys(map).find(function (e) { return member.parentName === map[e].name; });\n                  if (parentKey) {\n                      parent_1 = map[parentKey];\n                  }\n              }\n              if (parent_1) {\n                  member.path = generatePath(member, parent_1);\n                  member.normalizedPath = generateNormalizedPath(member, parent_1);\n                  var intruderIndex = parent_1.children.findIndex(function (c) { return c.hierarchy !== parent_1.hierarchy; });\n                  if (intruderIndex !== -1) {\n                      parent_1.children.splice(intruderIndex, 0, member);\n                  }\n                  else {\n                      parent_1.children.push(member);\n                  }\n              }\n              member.parentName += member.name;\n              key += member.parentName;\n              if (!map[key]) {\n                  map[key] = member;\n              }\n          };\n          for (var memberIndex = 0; memberIndex < tuple.members.length; memberIndex++) {\n              _loop_1(memberIndex);\n          }\n      }\n      return copy(withTotal(root));\n  };\n  /**\n   * @hidden\n   */\n  var toData = function (data, columns, rows, breadth, depth) {\n      var result = Array.from(new Array(depth), function () { return ({ cells: Array.from(new Array(breadth), function () { return null; }) }); });\n      var hash = function (names) { return names.join('|'); };\n      var membersNames = function (tuple) { return tuple.members.map(function (m) { return m.name; }); };\n      var columnsIndexes = new Map();\n      var rowsIndexes = new Map();\n      columns.forEach(function (colMembers, idx) { columnsIndexes.set(hash(colMembers.path), idx); });\n      rows.forEach(function (rowMembers, idx) { rowsIndexes.set(hash(rowMembers.path), idx); });\n      data.forEach(function (item) {\n          var colIndex = columnsIndexes.get(hash(membersNames(item.columnTuple)));\n          var rowIndex = rowsIndexes.get(hash(membersNames(item.rowTuple)));\n          if (colIndex !== undefined && rowIndex !== undefined) {\n              if (!result[rowIndex].cells[colIndex]) {\n                  result[rowIndex].row = rows[rowIndex].path;\n                  result[rowIndex].cells[colIndex] = item;\n              }\n          }\n      });\n      return result;\n  };\n  var rotateMatrix = function (matrix, leafs, depth, breadth) {\n      var result = new Array(breadth);\n      for (var colIndex = 0; colIndex < breadth; colIndex++) {\n          for (var rowIndex = 0; rowIndex < depth; rowIndex++) {\n              if (matrix[rowIndex] && matrix[rowIndex].cells[colIndex]) {\n                  var cell = matrix[rowIndex].cells[colIndex];\n                  if (!result[colIndex]) {\n                      result[colIndex] = {\n                          cells: new Array(depth).fill(null)\n                      };\n                  }\n                  result[colIndex].cells[rowIndex] = __assign(__assign({}, cell), { rowSpan: cell.colSpan, colSpan: cell.rowSpan });\n              }\n          }\n      }\n      return [result, leafs, breadth, depth];\n  };\n  /**\n   * @hidden\n   */\n  var toColumns = function (root) {\n      var _a = toMatrix(root), matrix = _a[0], leafs = _a[1], depth = _a[2], breadth = _a[3];\n      for (var colIndex = 0; colIndex < breadth; colIndex++) {\n          var cell = null;\n          for (var rowIndex = 0; rowIndex < depth; rowIndex++) {\n              if (matrix[rowIndex]) {\n                  var next = matrix[rowIndex].cells[colIndex];\n                  if (!next && cell) {\n                      cell.rowSpan = (cell.rowSpan || 1) + 1;\n                  }\n                  if (cell) {\n                      cell.colSpan = cell.breadth || 1;\n                  }\n                  if (next) {\n                      cell = next;\n                  }\n              }\n          }\n      }\n      return [matrix, leafs, depth, breadth];\n  };\n  /**\n   * @hidden\n   */\n  var toRows = function (root) {\n      var _a = toMatrix(root), matrix = _a[0], leafs = _a[1], depth = _a[2], breadth = _a[3];\n      for (var colIndex = 0; colIndex < breadth; colIndex++) {\n          var cell = null;\n          for (var rowIndex = 0; rowIndex < depth; rowIndex++) {\n              if (matrix[rowIndex]) {\n                  var next = matrix[rowIndex].cells[colIndex];\n                  if (!next && cell) {\n                      cell.rowSpan = (cell.rowSpan || 1) + 1;\n                  }\n                  if (cell) {\n                      cell.colSpan = cell.breadth;\n                  }\n                  if (next) {\n                      cell = next;\n                  }\n              }\n          }\n      }\n      return rotateMatrix(matrix, leafs, depth, breadth);\n  };\n  /**\n   * @hidden\n   */\n  var cloneDate = function (date) { return date ? new Date(date.getTime()) : null; };\n  /**\n   * @hidden\n   */\n  function clone(obj) {\n      var result = {};\n      cloneObject(obj, result);\n      return result;\n  }\n  /**\n   * @hidden\n   */\n  function cloneObject(obj, result) {\n      for (var field in obj) {\n          if (obj.hasOwnProperty(field)) {\n              var value = obj[field];\n              result[field] = cloneValue(value, result[field]);\n          }\n      }\n  }\n  /**\n   * @hidden\n   */\n  function cloneValue(value, nextValue) {\n      if (Array.isArray(value)) {\n          return cloneArray(value);\n      }\n      else if (value instanceof Date) {\n          return cloneDate(value);\n      }\n      else if (value && typeof value === 'object') {\n          var newNextValue = nextValue || {};\n          cloneObject(value, newNextValue);\n          return newNextValue;\n      }\n      else {\n          return value;\n      }\n  }\n  /**\n   * @hidden\n   */\n  function copy(obj) {\n      return JSON.parse(JSON.stringify(obj));\n  }\n  /**\n   * @hidden\n   */\n  function cloneArray(array) {\n      return array.map(function (value) { return cloneValue(value, undefined); });\n  }\n  var kpiMeasure = function (name, measure, type) {\n      return {\n          hierarchyUniqueName: name,\n          uniqueName: measure,\n          caption: measure,\n          measure: measure,\n          name: measure,\n          type: type,\n          kpi: true\n      };\n  };\n  /**\n   * @hidden\n   */\n  function buildKPIMeasures(node) {\n      var name = node.name;\n      return [\n          kpiMeasure(name, node.value, \"value\"),\n          kpiMeasure(name, node.goal, \"goal\"),\n          kpiMeasure(name, node.status, \"status\"),\n          kpiMeasure(name, node.trend, \"trend\")\n      ];\n  }\n  /**\n   * @hidden\n   */\n  var addKPI = function (data) {\n      var found;\n      var idx = 0;\n      for (; idx < data.length; idx++) {\n          if (data[idx].type === 2) {\n              found = true;\n              break;\n          }\n      }\n      if (found) {\n          data.splice(idx + 1, 0, {\n              caption: \"KPIs\",\n              defaultHierarchy: \"[KPIs]\",\n              name: \"KPIs\",\n              uniqueName: \"[KPIs]\"\n          });\n      }\n  };\n  /**\n   * @hidden\n   */\n  var compareAxisWithField = function (a, b) { return String(a.name) === String([(b.defaultHierarchy\n          ? b.defaultHierarchy\n          : b.uniqueName)]); };\n  /**\n   * @hidden\n   */\n  var compareAxes = function (a, b) { return String(a.name) === String(b.name); };\n  /**\n   * @hidden\n   */\n  var filterField = function (axes, out) {\n      var _loop_2 = function (i) {\n          var axis = axes[i];\n          var index = axis.name.findIndex(function (name) { return compareAxisWithField({ name: [name] }, out) || String(name).startsWith(out.uniqueName); });\n          if (index !== -1) {\n              if (index === axis.name.length - 1 || axis.name.length === 1) {\n                  axes.splice(i, 1);\n              }\n              else {\n                  axis.name.splice(index, 1);\n                  var duplicatedAxisIndex = axes.findIndex(function (ax) { return ax !== axis && String(ax.name) === String(axis.name); });\n                  if (duplicatedAxisIndex !== -1) {\n                      axes[duplicatedAxisIndex] = __assign(__assign(__assign({}, axes[duplicatedAxisIndex]), axis), ((axes[duplicatedAxisIndex].expand || axis.expand) ? { expand: true } : {}));\n                      axes.splice(i, 1);\n                  }\n              }\n          }\n      };\n      for (var i = axes.length - 1; i >= 0; i--) {\n          _loop_2(i);\n      }\n  };\n  /**\n   * @hidden\n   */\n  var insertAxis = function (axes, toInsert, state) {\n      var index = -1;\n      if (state.dropTarget && state.dropDirection) {\n          var offset = state.dropDirection\n              ? (state.dropDirection === 'before'\n                  ? 0\n                  : 1)\n              : 0;\n          index = axes.findIndex(function (c) { return compareAxes(c, state.dropTarget); }) + offset;\n      }\n      if (index !== -1) {\n          axes.forEach(function (axis) {\n              var _a;\n              if (axis.expand && axis.name.length > 1 && axis.name.length > index) {\n                  (_a = axis.name).splice.apply(_a, __spreadArray([index, 0], toInsert.name, false));\n              }\n          });\n          axes.splice(index, 0, toInsert);\n      }\n      else {\n          axes.push(toInsert);\n      }\n  };\n  /**\n   * @hidden\n   */\n  var reverseColumnsByMeasures = function (columns) {\n      var firstColumn = columns.length && columns[0];\n      var lastMember = firstColumn && firstColumn.members[firstColumn.members.length - 1];\n      if (lastMember && isMeasure(lastMember)) {\n          var columnsArr = [];\n          var measuresCount = new Set(columns.map(function (col) { return col.members[col.members.length - 1].caption; })).size;\n          for (var i = 0; i < columns.length; i += measuresCount) {\n              columnsArr.push(columns.slice(i, i + measuresCount));\n          }\n          var result_1 = [];\n          columnsArr.forEach(function (arr) {\n              result_1.push.apply(result_1, arr.reverse());\n          });\n          return result_1;\n      }\n      return columns;\n  };\n\n  /**\n   * Creates the state object. See `fetchData`.\n   *\n   * @param response - ResponseData\n   * @returns DataState\n   */\n  /**\n   * @hidden\n   */\n  var createDataState = function (response) {\n      var state = {\n          columns: reverseColumnsByMeasures(response.columns.tuples),\n          data: response.data,\n          rows: response.rows.tuples\n      };\n      return state;\n  };\n\n  /**\n   * Creates a collection of AxisDescriptor base on the expandTree.\n   * @param expandTree - { [key: string]: boolean }\n   * @returns AxisDescriptor[]\n   *\n   * @example\n   * See `setRowExpand` or `setColumnExpand` functions.\n   */\n  /**\n   * @hidden\n   */\n  function createAxisDescriptors(expandTree) {\n      var descriptors = [];\n      for (var _i = 0, _a = Object.keys(expandTree); _i < _a.length; _i++) {\n          var key = _a[_i];\n          descriptors.push({ name: JSON.parse(key), expand: expandTree[key] });\n      }\n      return descriptors;\n  }\n\n  /**\n   * Sets sort descriptors to request options.\n   *\n   * @param options - RequestOptions\n   * @param sort - SortDescriptor[]\n   *\n   * @example\n   * const options: RequestOptions = { ... };\n   * const sort: SortDescriptor[] = [{ ... }, { ... }];\n   * setSort(options, sort);\n   * // skip the sort parameter to clear current filter - setSort(options);\n   *\n   * fetchData(options).then(createDataState).then((dataState: DataState) => {\n   *  // Update the UI\n   * });\n   */\n  /**\n   * @hidden\n   */\n  var setSort = function (options, sort) {\n      if (sort === void 0) { sort = []; }\n      options.sort = sort;\n  };\n\n  /**\n   * Sets filter descriptors to request options.\n   *\n   * @param options - RequestOptions\n   * @param filter - FilterDescriptor[]\n   *\n   * @example\n   * const options: RequestOptions = { ... };\n   * const filter: FilterDescriptor[] = [{ ... }, { ... }];\n   * setFilter(options, filter);\n   * // skip the filter parameter to clear current filter - setFilter(options);\n   *\n   * fetchData(options).then(createDataState).then((dataState: DataState) => {\n   *  // Update the UI\n   * });\n   */\n  /**\n   * @hidden\n   */\n  var setFilter = function (options, filter) {\n      if (filter === void 0) { filter = []; }\n      options.filter = filter;\n  };\n\n  /**\n   * @hidden\n   */\n  var HEADERS_ACTION;\n  (function (HEADERS_ACTION) {\n      HEADERS_ACTION[\"toggle\"] = \"HEADERS_ACTION_TOGGLE\";\n      HEADERS_ACTION[\"expand\"] = \"HEADERS_ACTION_EXPAND\";\n      HEADERS_ACTION[\"collapse\"] = \"HEADERS_ACTION_COLLAPSE\";\n  })(HEADERS_ACTION || (HEADERS_ACTION = {}));\n  var findPath = function (node, matchFn, matched) {\n      var result = new Set();\n      node.children.forEach(function (child) {\n          var match = matchFn(child);\n          if (matched) {\n              result.add(String(child.path));\n          }\n          findPath(child, matchFn, (matched || match)).map(function (h) {\n              result.add(h);\n          });\n      });\n      return Array.from(result.values());\n  };\n  /**\n   * @hidden\n   */\n  var headersReducer = function (state, action) {\n      switch (action.type) {\n          case HEADERS_ACTION.toggle: {\n              var existing = state.find((function (s) { return String(s.name) === String(action.payload); }));\n              return headersReducer(state, __assign(__assign({}, action), { type: existing && (existing.expand)\n                      ? HEADERS_ACTION.collapse\n                      : HEADERS_ACTION.expand }));\n          }\n          case HEADERS_ACTION.expand: {\n              var existing_1 = state.find((function (s) { return String(s.name) === String(action.payload); }));\n              if (existing_1 && existing_1.expand === true) {\n                  return state;\n              }\n              else if (existing_1 && (existing_1.expand === false || existing_1.expand === undefined)) {\n                  return state.map(function (s) { return s === existing_1 ? (__assign(__assign({}, existing_1), { expand: true })) : s; });\n              }\n              else {\n                  var nextState = state.slice();\n                  nextState.push({ name: action.payload, expand: true });\n                  return nextState;\n              }\n          }\n          case HEADERS_ACTION.collapse: {\n              var filtered_1 = findPath(action.tree, function (node) { return !node.total && String(node.path) === String(action.payload); });\n              var newState = state.slice()\n                  .filter(function (h) { return !filtered_1.some(function (f) { return f === String(h.name); }); })\n                  .map(function (h) { return (__assign(__assign({}, h), { expand: Boolean(h.expand) })); })\n                  .map(function (h) { return (String(h.name) === String(action.payload))\n                  ? action.payload.length > 1 ? undefined : { name: action.payload, expand: false }\n                  : h; })\n                  .filter(Boolean);\n              return newState;\n          }\n          default: {\n              return state;\n          }\n      }\n  };\n\n  /**\n   * @hidden\n   */\n  exports.H = void 0;\n  (function (PIVOT_CONFIGURATOR_ACTION) {\n      // Selection\n      PIVOT_CONFIGURATOR_ACTION[\"toggleSelection\"] = \"PIVOT_CONFIGURATOR_ACTION_TOGGLE_SELECTION\";\n      PIVOT_CONFIGURATOR_ACTION[\"addColumnAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_COLUMN_AXIS\";\n      PIVOT_CONFIGURATOR_ACTION[\"addColumnAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_COLUMN_AXES\";\n      PIVOT_CONFIGURATOR_ACTION[\"removeColumnAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_COLUMN_AXIS\";\n      PIVOT_CONFIGURATOR_ACTION[\"removeColumnAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_COLUMN_AXES\";\n      PIVOT_CONFIGURATOR_ACTION[\"addRowAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_ROW_AXIS\";\n      PIVOT_CONFIGURATOR_ACTION[\"addRowAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_ROW_AXES\";\n      PIVOT_CONFIGURATOR_ACTION[\"removeRowAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_ROW_AXIS\";\n      PIVOT_CONFIGURATOR_ACTION[\"removeRowAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_ROW_AXES\";\n      PIVOT_CONFIGURATOR_ACTION[\"addMeasureAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_MEASURE_AXIS\";\n      PIVOT_CONFIGURATOR_ACTION[\"addMeasureAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_MEASURE_AXES\";\n      PIVOT_CONFIGURATOR_ACTION[\"removeMeasureAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_MEASURE_AXIS\";\n      PIVOT_CONFIGURATOR_ACTION[\"removeMeasureAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_MEASURE_AXES\";\n      // Removal\n      PIVOT_CONFIGURATOR_ACTION[\"remove\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE\";\n      // Sort\n      PIVOT_CONFIGURATOR_ACTION[\"setSort\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_SORT\";\n      // Filter\n      PIVOT_CONFIGURATOR_ACTION[\"setFilter\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_FILTER\";\n      PIVOT_CONFIGURATOR_ACTION[\"addFilter\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_FILTER\";\n      PIVOT_CONFIGURATOR_ACTION[\"changeFilter\"] = \"PIVOT_CONFIGURATOR_ACTION_CHANGE_FILTER\";\n      PIVOT_CONFIGURATOR_ACTION[\"removeFilter\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_FILTER\";\n      // Drag\n      PIVOT_CONFIGURATOR_ACTION[\"setDragItem\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_DRAGITEM\";\n      PIVOT_CONFIGURATOR_ACTION[\"drop\"] = \"PIVOT_CONFIGURATOR_ACTION_DROP\";\n      PIVOT_CONFIGURATOR_ACTION[\"setDropZone\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_DROP_ZONE\";\n      PIVOT_CONFIGURATOR_ACTION[\"setDropTarget\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_DROP_TARGET\";\n      PIVOT_CONFIGURATOR_ACTION[\"setDropDirection\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_DROP_DIRECTION\";\n  })(exports.H || (exports.H = {}));\n  /**\n   * @hidden\n   */\n  var configuratorReducer = function (state, action) {\n      var newRows;\n      var newColumns;\n      var newMeasures;\n      var newSort;\n      var newFilter;\n      var newDragitem;\n      var newDropZone;\n      var newDropDirection;\n      var newDropTarget;\n      switch (action.type) {\n          case exports.H.toggleSelection: {\n              if (Array.isArray(action.payload)) {\n                  // TODO;\n              }\n              else {\n                  var payload_1 = action.payload;\n                  if (payload_1.type === 2 || 'aggregator' in payload_1) {\n                      if (state.measureAxes.some(function (s) { return compareAxisWithField(s, payload_1); })) {\n                          return configuratorReducer(state, __assign(__assign({}, action), { type: exports.H.removeMeasureAxis }));\n                      }\n                      else {\n                          return configuratorReducer(state, __assign(__assign({}, action), { type: exports.H.addMeasureAxis }));\n                      }\n                  }\n                  else if (payload_1.type === 'kpi') {\n                      var measures = buildKPIMeasures(payload_1);\n                      if (measures.every(function (m) { return state.measureAxes.some(function (s) { return compareAxisWithField(s, m); }); })) {\n                          return configuratorReducer(state, __assign(__assign({}, action), { type: exports.H.removeMeasureAxes, payload: measures }));\n                      }\n                      else {\n                          return configuratorReducer(state, __assign(__assign({}, action), { type: exports.H.addMeasureAxes, payload: measures.filter(function (m) { return !state.measureAxes.some(function (s) { return compareAxisWithField(s, m); }); }) }));\n                      }\n                  }\n                  else if (action.payload.kpi) {\n                      if (state.measureAxes.some(function (s) { return compareAxisWithField(s, payload_1); })) {\n                          return configuratorReducer(state, __assign(__assign({}, action), { type: exports.H.removeMeasureAxis }));\n                      }\n                      else {\n                          return configuratorReducer(state, __assign(__assign({}, action), { type: exports.H.addMeasureAxis }));\n                      }\n                  }\n                  else {\n                      if (state.columnAxes.some(function (s) { return compareAxisWithField(s, payload_1); })) {\n                          return configuratorReducer(state, __assign(__assign({}, action), { type: exports.H.removeColumnAxis }));\n                      }\n                      else if (state.rowAxes.some(function (s) { return compareAxisWithField(s, payload_1); })) {\n                          return configuratorReducer(state, __assign(__assign({}, action), { type: exports.H.removeRowAxis }));\n                      }\n                      else if ((state.columnAxes && state.columnAxes.length) && (!state.rowAxes || !state.rowAxes.length)) {\n                          return configuratorReducer(state, __assign(__assign({}, action), { type: exports.H.addRowAxis }));\n                      }\n                      else {\n                          return configuratorReducer(state, __assign(__assign({}, action), { type: exports.H.addColumnAxis }));\n                      }\n                  }\n              }\n              break;\n          }\n          case exports.H.addColumnAxis: {\n              newColumns = __spreadArray(__spreadArray([], (state.columnAxes || []), true), [\n                  { name: [action.payload.defaultHierarchy || action.payload.uniqueName] }\n              ], false);\n              break;\n          }\n          case exports.H.addColumnAxes: {\n              // TODO;\n              break;\n          }\n          case exports.H.removeColumnAxis: {\n              newColumns = __spreadArray([], (state.columnAxes || []).filter(function (s) { return !compareAxisWithField(s, action.payload); }), true);\n              filterField(newColumns, action.payload);\n              break;\n          }\n          case exports.H.removeColumnAxes: {\n              // TODO;\n              break;\n          }\n          case exports.H.addRowAxis: {\n              newRows = __spreadArray(__spreadArray([], (state.rowAxes || []), true), [\n                  { name: [action.payload.defaultHierarchy || action.payload.uniqueName] }\n              ], false);\n              break;\n          }\n          case exports.H.addRowAxes: {\n              // TODO;\n              break;\n          }\n          case exports.H.removeRowAxis: {\n              newRows = __spreadArray([], (state.rowAxes || []).filter(function (s) { return !compareAxisWithField(s, action.payload); }), true);\n              filterField(newRows, action.payload);\n              break;\n          }\n          case exports.H.removeRowAxes: {\n              // TODO;\n              break;\n          }\n          case exports.H.addMeasureAxis: {\n              newMeasures = __spreadArray(__spreadArray([], (state.measureAxes || []), true), [\n                  { name: [action.payload.defaultHierarchy || action.payload.uniqueName] }\n              ], false);\n              break;\n          }\n          case exports.H.removeMeasureAxis: {\n              newMeasures = __spreadArray([], (state.measureAxes || []).filter(function (s) { return !compareAxisWithField(s, action.payload); }), true);\n              break;\n          }\n          case exports.H.addMeasureAxes: {\n              newMeasures = __spreadArray(__spreadArray([], (state.measureAxes || []), true), (action.payload || []).map(function (p) { return ({ name: [p.defaultHierarchy || p.uniqueName] }); }), true);\n              break;\n          }\n          case exports.H.removeMeasureAxes: {\n              newMeasures = __spreadArray([], (state.measureAxes || []).filter(function (s) { return !action.payload.some(function (p) { return compareAxisWithField(s, p); }); }), true);\n              break;\n          }\n          case exports.H.remove: {\n              if (state.columnAxes.some(function (s) { return compareAxes(s, action.payload); })) {\n                  newColumns = __spreadArray([], state.columnAxes.filter(function (s) { return !compareAxes(s, action.payload); }), true);\n                  filterField(newColumns, { uniqueName: action.payload.name });\n              }\n              if (state.rowAxes.some(function (s) { return compareAxes(s, action.payload); })) {\n                  newRows = __spreadArray([], state.rowAxes.filter(function (s) { return !compareAxes(s, action.payload); }), true);\n                  filterField(newRows, { uniqueName: action.payload.name });\n              }\n              if (state.measureAxes.some(function (s) { return compareAxes(s, action.payload); })) {\n                  newMeasures = __spreadArray([], state.measureAxes.filter(function (s) { return !compareAxes(s, action.payload); }), true);\n              }\n              break;\n          }\n          case exports.H.setDragItem:\n              newDragitem = action.payload;\n              break;\n          case exports.H.setDropZone:\n              newDropZone = action.payload;\n              break;\n          case exports.H.setDropTarget:\n              newDropTarget = action.payload;\n              break;\n          case exports.H.setDropDirection:\n              newDropDirection = action.payload;\n              break;\n          case exports.H.drop:\n              if (state.dragItem && state.dropZone) {\n                  var currentColumn = state.columnAxes.find(function (s) { return compareAxes(s, action.payload); });\n                  var currentRow = state.rowAxes.find(function (s) { return compareAxes(s, action.payload); });\n                  var currentMeasure = state.measureAxes.find(function (s) { return compareAxes(s, action.payload); });\n                  var current = void 0;\n                  if (currentColumn) {\n                      current = currentColumn;\n                      newColumns = __spreadArray([], state.columnAxes.filter(function (s) { return !compareAxes(s, action.payload); }), true);\n                      filterField(newColumns, { uniqueName: action.payload.name });\n                  }\n                  if (currentRow) {\n                      current = currentRow;\n                      newRows = __spreadArray([], state.rowAxes.filter(function (s) { return !compareAxes(s, action.payload); }), true);\n                      filterField(newRows, { uniqueName: action.payload.name });\n                  }\n                  if (currentMeasure) {\n                      current = currentMeasure;\n                      newMeasures = __spreadArray([], state.measureAxes.filter(function (s) { return !compareAxes(s, action.payload); }), true);\n                  }\n                  switch (state.dropZone) {\n                      case 'columnAxes': {\n                          newColumns = newColumns || state.columnAxes.slice();\n                          insertAxis(newColumns, current, state);\n                          break;\n                      }\n                      case 'rowAxes': {\n                          newRows = newRows || state.rowAxes.slice();\n                          insertAxis(newRows, current, state);\n                          break;\n                      }\n                      case 'measureAxes': {\n                          newMeasures = newMeasures || state.measureAxes.slice();\n                          insertAxis(newMeasures, current, state);\n                          break;\n                      }\n                      default:\n                          break;\n                  }\n              }\n              newDragitem = null;\n              newDropZone = null;\n              newDropTarget = null;\n              break;\n          case exports.H.setSort:\n              newSort = action.payload;\n              break;\n          case exports.H.setFilter:\n              if (Array.isArray(action.payload)) {\n                  newFilter = action.payload;\n              }\n              else {\n                  newFilter = [action.payload];\n              }\n              break;\n          case exports.H.addFilter:\n              newFilter = (state.filter || []).slice();\n              if (Array.isArray(action.payload)) {\n                  newFilter.push.apply(newFilter, action.payload);\n              }\n              else {\n                  newFilter.push(action.payload);\n              }\n              break;\n          case exports.H.changeFilter:\n              newFilter = (Array.isArray(action.payload)\n                  ? (state.filter || []).map(function (f) { return action.payload.some(function (a) { return a.field === f.field; })\n                      ? action.payload.find(function (a) { return a.field === f.field; })\n                      : f; })\n                  : (state.filter || []).map(function (f) { return f.field === action.payload.field\n                      ? action.payload\n                      : f; }));\n              break;\n          case exports.H.removeFilter:\n              newFilter = (state.filter || []).slice();\n              if (Array.isArray(action.payload)) {\n                  newFilter = newFilter.filter(function (f) { return !action.payload.some(function (p) { return p.field === f.field &&\n                      p.operator === f.operator; }); });\n              }\n              else {\n                  newFilter = newFilter.filter(function (f) { return !(f.field === action.payload.field\n                      && f.operator === action.payload.operator); });\n              }\n              break;\n          default:\n              break;\n      }\n      return {\n          dragItem: newDragitem,\n          dropTarget: newDropTarget,\n          dropDirection: newDropDirection,\n          dropZone: newDropZone,\n          columnAxes: newColumns,\n          rowAxes: newRows,\n          measureAxes: newMeasures,\n          filter: newFilter,\n          sort: newSort\n      };\n  };\n\n  // tslint:disable:object-literal-sort-keys\n  /**\n   * The available built-in types of local-data aggregates.\n   */\n  var AggregateType;\n  (function (AggregateType) {\n      AggregateType[AggregateType[\"Sum\"] = 0] = \"Sum\";\n      AggregateType[AggregateType[\"Count\"] = 1] = \"Count\";\n      AggregateType[AggregateType[\"Min\"] = 2] = \"Min\";\n      AggregateType[AggregateType[\"Max\"] = 3] = \"Max\";\n      AggregateType[AggregateType[\"Average\"] = 4] = \"Average\";\n  })(AggregateType || (AggregateType = {}));\n  var count = 0;\n  /**\n   * Creates a new `Aggregate` object of the specified type.\n   * This is typically used for generating aggregate objects required for each measure column in the pivot grid.\n   *\n   * @param type - The type of aggregate to create (e.g., Sum, Count, Min, Max, Average).\n   * @returns The generated aggregate object.\n   */\n  var createAggregate = function (type) {\n      var key = \"\".concat(AggregateType[type], \"_\").concat(count++);\n      switch (type) {\n          case AggregateType.Sum:\n              return {\n                  init: function (data) {\n                      if ((key in data) === false) {\n                          data[key] = 0;\n                      }\n                  },\n                  merge: function (src, dest) {\n                      dest[key] += src[key];\n                  },\n                  accumulate: function (acc, value) {\n                      acc[key] += value;\n                  },\n                  result: function (data) { return data[key]; },\n                  format: function (value) { return value.toFixed(2); }\n              };\n          case AggregateType.Count:\n              return {\n                  init: function (data) {\n                      if ((key in data) === false) {\n                          data[key] = 0;\n                      }\n                  },\n                  merge: function (src, dest) {\n                      dest[key] += src[key];\n                  },\n                  accumulate: function (acc, _value) {\n                      acc[key] += 1;\n                  },\n                  result: function (data) { return data[key]; },\n                  format: function (value) { return value.toFixed(); }\n              };\n          case AggregateType.Min:\n              return {\n                  init: function (data) {\n                      if (key in data === false) {\n                          data[key] = Number.POSITIVE_INFINITY;\n                      }\n                  },\n                  merge: function (src, dest) {\n                      dest[key] = Math.min(src[key], dest[key]);\n                  },\n                  accumulate: function (acc, value) {\n                      acc[key] = Math.min(value, acc[key]);\n                  },\n                  result: function (data) { return (Number.isFinite(data[key]) ? data[key] : NaN); },\n                  format: function (value) { return value.toFixed(2); }\n              };\n          case AggregateType.Max:\n              return {\n                  init: function (data) {\n                      if ((key in data) === false) {\n                          data[key] = Number.NEGATIVE_INFINITY;\n                      }\n                  },\n                  merge: function (src, dest) {\n                      dest[key] = Math.max(src[key], dest[key]);\n                  },\n                  accumulate: function (acc, value) {\n                      acc[key] = Math.max(value, acc[key]);\n                  },\n                  result: function (data) { return Number.isFinite(data[key]) ? data[key] : NaN; },\n                  format: function (value) { return value.toFixed(2); }\n              };\n          case AggregateType.Average:\n              var sumProp_1 = \"\".concat(key, \"_sum\");\n              var countProp_1 = \"\".concat(key, \"_count\");\n              return {\n                  init: function (data) {\n                      if ((countProp_1 in data) === false) {\n                          data[sumProp_1] = 0;\n                          data[countProp_1] = 0;\n                      }\n                  },\n                  merge: function (src, dest) {\n                      dest[sumProp_1] += src[sumProp_1];\n                      dest[countProp_1] += src[countProp_1];\n                  },\n                  accumulate: function (acc, value) {\n                      acc[sumProp_1] += value;\n                      acc[countProp_1] += 1;\n                  },\n                  result: function (data) { return data[sumProp_1] / data[countProp_1]; },\n                  format: function (value) { return value.toFixed(2); }\n              };\n          default:\n              throw new Error('Invalid aggregate type provided');\n      }\n  };\n  /**\n   * Represents the aggregate object which calculates the total value. Applicable for local data binding.\n   */\n  var sumAggregate = createAggregate(AggregateType.Sum);\n  /**\n   * Represents the aggregate object which calculates the count value. Applicable for local data binding.\n   */\n  var countAggregate = createAggregate(AggregateType.Count);\n  /**\n   * Represents the aggregate object which calculates the minimum value. Applicable for local data binding.\n   */\n  var minAggregate = createAggregate(AggregateType.Min);\n  /**\n   * Represents the aggregate object which calculates the maximum value. Applicable for local data binding.\n   */\n  var maxAggregate = createAggregate(AggregateType.Max);\n  /**\n   * Represents the aggregate object which calculates the average value. Applicable for local data binding.\n   */\n  var averageAggregate = createAggregate(AggregateType.Average);\n\n  function forEachDesc(desc, callbackfn) {\n      if ('filters' in desc) {\n          desc.filters.map(function (child) { return forEachDesc(child, callbackfn); });\n      }\n      else {\n          callbackfn(desc);\n      }\n  }\n  var filterFields = function (filter, callback) {\n      var descriptors = Array.isArray(filter) ? filter : filter.filters;\n      descriptors.forEach(function (desc) { return forEachDesc(desc, callback); });\n  };\n  /** @hidden */\n  var initializeFiltering = function (rows, columns, filter) {\n      var compositeFilter = filter ?\n          (Array.isArray(filter) ? { logic: 'and', filters: filter } : filter) : undefined;\n      var predicate = compositeFilter ? kendo_dataQuery_cmn_chunk_js.c(compositeFilter) : function () { return true; };\n      var axes = rows.concat(columns);\n      var fieldValues = [];\n      filterFields(filter || [], function (desc) {\n          if ('field' in desc && desc.field) {\n              fieldValues.push(desc.field);\n          }\n      });\n      var result = { hasFilter: false, predicate: predicate, filteringAxes: [] };\n      if (fieldValues.some(function (f) { return typeof f === 'function'; })) {\n          result.filteringAxes = axes.slice();\n      }\n      else if (fieldValues.length > 0) {\n          var filteringFields_1 = Array.from(new Set(fieldValues).values());\n          var filteringAxes = axes.filter(function (a) { return filteringFields_1.indexOf(a.key) >= 0; });\n          result.filteringAxes = filteringAxes;\n      }\n      result.hasFilter = result.filteringAxes.length > 0;\n      return result;\n  };\n\n  /** @hidden */\n  var subNode = function (node, field, initialNode) {\n      var childNode = node.get(field);\n      if (!childNode) {\n          childNode = initialNode || new Map();\n          node.set(field, childNode);\n      }\n      return childNode;\n  };\n  var separator = '&';\n  /** @hidden */\n  var createKey = function (key, value) { return key + separator + value; };\n  /** @hidden */\n  var splitKeyValue = function (keyValue) {\n      var separatorIndex = keyValue.indexOf(separator);\n      if (separatorIndex !== -1) {\n          var key = keyValue.substring(0, separatorIndex);\n          var value = keyValue.substring(separatorIndex + 1);\n          return [key, value];\n      }\n      else {\n          return [keyValue, undefined];\n      }\n  };\n\n  var calculateColumnData = function (node, measures, dataField) {\n      node.forEach(function (childNode, k) {\n          if (k !== dataField) {\n              if (childNode.size > 0) {\n                  calculateColumnData(childNode, measures, dataField);\n              }\n              var childData_1 = childNode.get(dataField);\n              var parentData_1 = subNode(node, dataField, {});\n              measures.forEach(function (m) {\n                  m.aggregate.init(parentData_1);\n                  m.aggregate.merge(childData_1, parentData_1);\n              });\n          }\n      });\n  };\n  /** @hidden */\n  var mergeTrees = function (src, dest, measures, dataField) {\n      src.forEach(function (srcChild, k) {\n          var destChild;\n          if (k !== dataField) {\n              destChild = subNode(dest, k);\n              mergeTrees(srcChild, destChild, measures, dataField);\n          }\n          else {\n              destChild = subNode(dest, k, {});\n              measures.forEach(function (m) {\n                  m.aggregate.init(destChild);\n                  m.aggregate.merge(srcChild, destChild);\n              });\n          }\n      });\n  };\n  var calculateColumns = function (node, measures, columnsData, dataField) {\n      node.forEach(function (childNode, k) {\n          if (k !== columnsData) {\n              if (childNode.size > 0) {\n                  calculateColumns(childNode, measures, columnsData, dataField);\n              }\n              var srcColumns = subNode(childNode, columnsData);\n              var destColumns = subNode(node, columnsData);\n              mergeTrees(srcColumns, destColumns, measures, dataField);\n          }\n      });\n  };\n  /** @hidden */\n  var createDataTree = function (data, rows, columns, measures, fields, filter) {\n      var result = new Map();\n      var cache = new Map();\n      var axes = rows.concat(columns);\n      var leafNodes = new Set();\n      var dataField = fields.dataField, columnsData = fields.columnsData;\n      var _a = initializeFiltering(rows, columns, filter), hasFilter = _a.hasFilter, predicate = _a.predicate, filteringAxes = _a.filteringAxes;\n      var empty = '';\n      data.forEach(function (dataItem) {\n          if (hasFilter) {\n              var filteringDataItem_1 = {};\n              filteringAxes.forEach(function (axis) { filteringDataItem_1[axis.key] = axis.displayValue(dataItem); });\n              if (!predicate(filteringDataItem_1)) {\n                  return;\n              }\n          }\n          var values = axes.map(function (a) { return a.displayValue(dataItem); });\n          var dataKey = empty.concat.apply(empty, values);\n          var nodeData = cache.get(dataKey);\n          if (!nodeData) {\n              var node_1 = result;\n              var eachAxis = function (axis) {\n                  node_1 = subNode(node_1, createKey(axis.key, axis.displayValue(dataItem)));\n              };\n              rows.forEach(eachAxis);\n              node_1 = subNode(node_1, columnsData);\n              leafNodes.add(node_1);\n              columns.forEach(eachAxis);\n              nodeData = {};\n              node_1.set(dataField, nodeData);\n              cache.set(dataKey, nodeData);\n              measures.forEach(function (m) {\n                  m.aggregate.init(nodeData);\n              });\n          }\n          measures.forEach(function (m) {\n              m.aggregate.accumulate(nodeData, m.value(dataItem));\n          });\n      });\n      leafNodes.forEach(function (leaf) { return calculateColumnData(leaf, measures, dataField); });\n      calculateColumns(result, measures, columnsData, dataField);\n      return result;\n  };\n  /** @hidden */\n  var cloneDataTree = function (dataTree, dataField, measures) {\n      var result = new Map();\n      mergeTrees(dataTree, result, measures, dataField);\n      return result;\n  };\n\n  var createPath = function (name, axes, path) {\n      var _a = splitKeyValue(name), key = _a[0], value = _a[1];\n      var result = path.slice();\n      if (key && value) {\n          var axis = axes.find(function (a) { return a.key === key; });\n          var caption_1 = axis ? axis.caption : '';\n          return result.map(function (p) { return p === caption_1 ? name : p; });\n      }\n      return result;\n  };\n  var membersNode = function (tree, members, field, axisSettings, measures, dataField, cache) {\n      var cacheData = cache || new Map();\n      var path = axisSettings.map(function (a) { return a.caption; });\n      while (members.length > 1 && axisSettings.some(function (a) { return a.caption === members[members.length - 1].caption; })) {\n          members.pop();\n          path.pop();\n      }\n      var node = tree;\n      members.forEach(function (m, i) {\n          path = createPath(m.name, axisSettings, path);\n          if (node && !axisSettings.some(function (a) { return a.caption === m.name; })) {\n              if (!node.has(m.name) && !cacheData.has(path.slice(0, path.indexOf(m.name) + 1).join('-'))) {\n                  var currentLevel = Array.from(node).find(function (n) { return n[0] !== field; });\n                  var currentLevelNode = currentLevel && currentLevel[0];\n                  var levelField_1 = currentLevelNode && splitKeyValue(currentLevelNode)[0];\n                  var depth = levelField_1 ? i - axisSettings.findIndex(function (a) { return a.key === levelField_1; }) : 0;\n                  var _loop_1 = function (t) {\n                      var data = [];\n                      node.forEach(function (value, key) {\n                          if (key !== field) {\n                              data.push.apply(data, Array.from(value).filter(function (d) { return d[0] !== field; }));\n                          }\n                      });\n                      var next = new Map();\n                      data.forEach(function (item) {\n                          if (next.has(item[0])) {\n                              var dest = next.get(item[0]);\n                              var src = item[1];\n                              var newDest = new Map();\n                              mergeTrees(dest, newDest, measures, dataField);\n                              mergeTrees(src, newDest, measures, dataField);\n                              next.set(item[0], newDest);\n                          }\n                          else {\n                              next.set(item[0], new Map(item[1]));\n                          }\n                      });\n                      var currentPath = path.slice(0, path.indexOf(m.name));\n                      next.forEach(function (value, key) {\n                          cacheData.set(createPath(key, axisSettings, currentPath.concat([key])).join('-'), value);\n                      });\n                      next.set(field, node.get(field));\n                      node = next;\n                  };\n                  for (var t = 0; t < depth; t++) {\n                      _loop_1(t);\n                  }\n              }\n              node = node.get(m.name) || cacheData.get(path.slice(0, path.indexOf(m.name) + 1).join('-'));\n          }\n      });\n      return node;\n  };\n  /** @hidden */\n  var readData = function (dataTree, rowTuples, columnTuples, fields, columnSettings, rowSettings, measures) {\n      var data = [];\n      var dataField = fields.dataField, columnsData = fields.columnsData;\n      var rowsCache = new Map();\n      rowTuples.forEach(function (row) {\n          var rowNode = membersNode(dataTree, row.members.slice(), columnsData, rowSettings, measures, dataField, rowsCache);\n          var rowColumnsNode = rowNode && rowNode.get(columnsData);\n          columnTuples.forEach(function (col) {\n              var members = col.members.slice();\n              var measure = measures[0];\n              if (members[members.length - 1].levelName === \"[Measures].[MeasuresLevel]\") {\n                  var measuresMember_1 = members.pop();\n                  measure = measures.find(function (m) { return String(m.name) === measuresMember_1.caption; }) || measure;\n              }\n              var colNode = rowColumnsNode && membersNode(rowColumnsNode, members, dataField, columnSettings, measures, dataField);\n              var value = '', fmtValue = '';\n              var ordinal = 0;\n              if (colNode && measure) {\n                  var result = measure.aggregate.result(colNode.get(dataField));\n                  value = String(result);\n                  fmtValue = measure.aggregate.format(result);\n              }\n              data.push({\n                  columnTuple: col,\n                  data: { fmtValue: fmtValue, ordinal: ordinal, value: value },\n                  rowTuple: row\n              });\n          });\n      });\n      return data;\n  };\n\n  var getTopMembersTuple = function (parentFields, axesSettings) {\n      var allTuple = { members: [] };\n      parentFields.forEach(function (topField) {\n          var axis = axesSettings.find(function (a) { return a.key === topField; });\n          var caption = axis ? axis.caption : \"\";\n          var member = {\n              caption: caption,\n              children: [],\n              hasChildren: true,\n              parentName: \"\",\n              levelNum: 0,\n              levelName: caption,\n              hierarchy: topField,\n              name: caption\n          };\n          allTuple.members.push(member);\n      });\n      return allTuple;\n  };\n  var sortFunc = function (descriptor, axe) {\n      return function (a, b) {\n          var order = descriptor.dir;\n          var sortableA = axe.sortValue(splitKeyValue(a[0])[1]);\n          var sortableB = axe.sortValue(splitKeyValue(b[0])[1]);\n          if (sortableA < sortableB) {\n              return order === \"asc\" ? -1 : 1;\n          }\n          if (sortableA > sortableB) {\n              return order === \"asc\" ? 1 : -1;\n          }\n          return 0;\n      };\n  };\n  var mergeData = function (src, dest, exclude) {\n      src.forEach(function (srcChild, k) {\n          if (!exclude[k]) {\n              var destChild = subNode(dest, k);\n              mergeData(srcChild, destChild, exclude);\n          }\n      });\n  };\n  var childrenByKeys = function (dataTree, keys, exclude) {\n      var result = [];\n      var nodeData = function (node) { return Array.from(node).filter(function (n) { return !exclude[n[0]]; }); };\n      var element = new Map(dataTree);\n      var next;\n      var _loop_1 = function (i) {\n          next = element.get(keys[i]);\n          if (next) {\n              element = new Map(next);\n          }\n          else if (i < keys.length - 1 && Array.from(element).some(function (e) { return splitKeyValue(e[0])[0] === keys[i]; })) {\n              var curLevel_1 = [];\n              element.forEach(function (child, key) {\n                  if (!exclude[key]) {\n                      curLevel_1.push.apply(curLevel_1, nodeData(new Map(child)));\n                  }\n              });\n              element = new Map();\n              curLevel_1.forEach(function (item) {\n                  if (element.has(item[0])) {\n                      var dest = element.get(item[0]);\n                      var src = item[1];\n                      var newDest = new Map();\n                      mergeData(dest, newDest, exclude);\n                      mergeData(src, newDest, exclude);\n                      element.set(item[0], newDest);\n                  }\n                  else {\n                      element.set(item[0], new Map(item[1]));\n                  }\n              });\n          }\n          else if (i === 0 || i === keys.length - 1) {\n              if (Array.from(element).some(function (e) { return splitKeyValue(e[0])[0] === keys[i]; })) {\n                  result.push.apply(result, nodeData(element));\n              }\n          }\n      };\n      for (var i = 0; i < keys.length; i++) {\n          _loop_1(i);\n      }\n      return result;\n  };\n  /** @hidden */\n  var rootFields = function (definitions) {\n      var fields = new Set();\n      definitions.forEach(function (item) {\n          if (item.name.length === 1 && !splitKeyValue(item.name[0])[1]) {\n              fields.add(item.name[0]);\n          }\n      });\n      return fields;\n  };\n  /** @hidden */\n  var createTuples = function (axesSettings, definitions, dataTree, sortDescriptors, excludeFields) {\n      var parentFields = rootFields(definitions);\n      var flatMembers = [];\n      var topTuple = getTopMembersTuple(parentFields, axesSettings);\n      flatMembers.push(topTuple);\n      var _loop_2 = function (i) {\n          var currDef = definitions[i];\n          if (currDef.name.length === 1 && !currDef.expand && parentFields.has(currDef.name[0])) {\n              return \"continue\";\n          }\n          var keysToAdd = new Set(parentFields.keys());\n          var currDefMembers = [];\n          var keys = [];\n          var tuples = [];\n          var axe;\n          currDef.name.forEach(function (element, index) {\n              var _a;\n              var _b = splitKeyValue(element), field = _b[0], value = _b[1];\n              axe = axesSettings.find(function (a) { return a.key === field; });\n              if (value) {\n                  keysToAdd.delete(field);\n                  keys.push(element);\n                  var member = {\n                      children: [],\n                      caption: value,\n                      hierarchy: field,\n                      levelNum: 1,\n                      levelName: field + \" \" + field,\n                      name: element,\n                      parentName: axe ? axe.caption : \"\"\n                  };\n                  currDefMembers.push(member);\n              }\n              else if (currDef.expand && currDef.name.length - 1 === index) {\n                  keysToAdd.delete(element);\n                  keys.push(element);\n                  var children = childrenByKeys(dataTree, keys, excludeFields);\n                  var descriptor = sortDescriptors.find(function (desc) { return desc.field === field; });\n                  if (descriptor && descriptor.dir) {\n                      children.sort(sortFunc(descriptor, axe));\n                  }\n                  for (var c = 0; c < children.length; c++) {\n                      var leafValue = children[c][0];\n                      var leafTuple = { members: [] };\n                      tuples.push(leafTuple);\n                      var caption = splitKeyValue(leafValue)[1];\n                      axe = axesSettings.find(function (a) { return a.key === element; });\n                      var member = {\n                          caption: caption,\n                          children: [],\n                          levelName: element + \" \" + element,\n                          levelNum: 1,\n                          parentName: axe ? axe.caption : \"\",\n                          hierarchy: element,\n                          name: leafValue\n                      };\n                      (_a = leafTuple.members).push.apply(_a, currDefMembers);\n                      leafTuple.members.push(member);\n                  }\n              }\n              else if (currDef.expand) {\n                  axe = axesSettings.find(function (a) { return a.key === element; });\n                  var axisCaption = axe ? axe.caption : \"\";\n                  keysToAdd.delete(element);\n                  keys.push(element);\n                  var member = {\n                      children: [],\n                      caption: axisCaption,\n                      hierarchy: element,\n                      levelName: axisCaption,\n                      levelNum: 0,\n                      name: axisCaption,\n                      parentName: \"\"\n                  };\n                  currDefMembers.push(member);\n              }\n              keysToAdd.forEach(function (key) {\n                  tuples.forEach(function (tuple) {\n                      axe = axesSettings.find(function (a) { return a.key === key; });\n                      var curCaption = axe ? axe.caption : \"\";\n                      var member = {\n                          children: [],\n                          hasChildren: true,\n                          caption: curCaption,\n                          hierarchy: key,\n                          levelName: curCaption,\n                          levelNum: 0,\n                          name: curCaption,\n                          parentName: \"\"\n                      };\n                      tuple.members.push(member);\n                  });\n              });\n              flatMembers.push.apply(flatMembers, tuples);\n          });\n      };\n      for (var i = 0; i < definitions.length; i++) {\n          _loop_2(i);\n      }\n      return flatMembers;\n  };\n  var measureToMember = function (measure) {\n      return {\n          caption: String(measure.name),\n          children: [],\n          hasChildren: false,\n          hierarchy: \"[Measures]\",\n          levelName: \"[Measures].[MeasuresLevel]\",\n          levelNum: 0,\n          name: \"[Measures].[\" + measure.name + \"]\",\n          parentName: \"\"\n      };\n  };\n  var addMeasure = function (tuple, measure) {\n      var measureMember = measureToMember(measure);\n      var tupleCopy = copy(tuple);\n      tupleCopy.members.push(measureMember);\n      return tupleCopy;\n  };\n  /** @hidden */\n  var addMultipleMeasures = function (tuples, measures) {\n      if (measures.length < 2) {\n          return tuples;\n      }\n      var result = tuples.slice();\n      for (var i = result.length - 1; i >= 0; i--) {\n          var tuple = result[i];\n          result[i] = addMeasure(result[i], measures[0]);\n          for (var m = 1; m < measures.length; m++) {\n              var tupleWithMeasure = addMeasure(tuple, measures[m]);\n              result.splice(i + m, 0, tupleWithMeasure);\n          }\n      }\n      return reverseColumnsByMeasures(result);\n  };\n  /** @hidden */\n  var createLocalDataState = function (args) {\n      var _a;\n      var dataTree = args.dataTree, rowSettings = args.rowSettings, columnSettings = args.columnSettings, rowAxes = args.rowAxes, columnAxes = args.columnAxes, measures = args.measures, sort = args.sort, fields = args.fields;\n      var exclude = (_a = {}, _a[fields.columnsData] = fields.columnsData, _a[fields.dataField] = fields.dataField, _a);\n      var colTuples = columnAxes.length ?\n          createTuples(columnSettings, columnAxes, dataTree.get(fields.columnsData), sort, exclude) :\n          measures.map(function (m) { return ({ members: [measureToMember(m)] }); });\n      var columnTuples = columnAxes.length > 0 ? addMultipleMeasures(colTuples, measures) : colTuples;\n      var rowTuples = rowAxes.length ? createTuples(rowSettings, rowAxes, dataTree, sort, exclude) : [{ members: [] }];\n      var resultData = readData(dataTree, rowTuples, columnTuples, fields, columnSettings, rowSettings, measures);\n      return {\n          columns: columnTuples,\n          data: resultData,\n          rows: rowTuples\n      };\n  };\n\n  /** @hidden */\n  var createFlatSchemaDimensions = function (dimensions, measures) {\n      var result = Object.keys(dimensions).map(function (dim) { return ({\n          caption: dim,\n          defaultHierarchy: dim,\n          description: '',\n          name: dim,\n          uniqueName: dim,\n          hierarchyUniqueName: dim,\n          measure: true,\n          type: 1 // https://github.com/telerik/kendo-pivotgrid-common/blob/develop/src/models/responseDiscover.ts#L12-L14\n      }); });\n      if (measures.length) {\n          result.push({\n              caption: 'Measures',\n              children: measures.map(function (m) { return ({\n                  aggregator: '1',\n                  caption: String(m.name),\n                  defaultFormat: '',\n                  description: '',\n                  displayFolder: '',\n                  groupName: String(m.name),\n                  name: String(m.name),\n                  uniqueName: String(m.name)\n              }); }),\n              type: 2,\n              description: '',\n              name: 'Measures',\n              uniqueName: '[Measures]'\n          });\n      }\n      return result;\n  };\n\n  // tslint:disable:object-literal-sort-keys\n\n  var Navigation = /** @class */ (function () {\n      function Navigation(options) {\n          this.tabIndex = 0;\n          this.root = null;\n          this.eventHandlers = {};\n          this.update = function () { };\n          this.tabIndex = options.tabIndex;\n      }\n      Object.defineProperty(Navigation.prototype, \"elements\", {\n          get: function () {\n              return this.root ? Array.from(this.root.querySelectorAll(this.selectors.join(','))) : [];\n          },\n          enumerable: false,\n          configurable: true\n      });\n      Object.defineProperty(Navigation.prototype, \"first\", {\n          get: function () {\n              return (this.root && this.root.querySelector(this.selectors.join(','))) || null;\n          },\n          enumerable: false,\n          configurable: true\n      });\n      Object.defineProperty(Navigation.prototype, \"last\", {\n          get: function () {\n              var all = this.elements;\n              return all[all.length - 1] || null;\n          },\n          enumerable: false,\n          configurable: true\n      });\n      Object.defineProperty(Navigation.prototype, \"current\", {\n          get: function () {\n              return this.elements.find(function (el) { return el.matches(':focus'); });\n          },\n          enumerable: false,\n          configurable: true\n      });\n      Navigation.prototype.start = function (root) {\n          var _this = this;\n          this.root = root;\n          var _loop_1 = function (eventType) {\n              if (this_1.mouseEvents[eventType]) {\n                  this_1.eventHandlers[eventType] = (function (ev) {\n                      var target = ev.target instanceof Element && ev.target.closest(_this.selectors.join(','));\n                      if (target) {\n                          _this.mouseEvents[eventType].call(undefined, target, _this, ev);\n                      }\n                  });\n                  root.addEventListener(eventType, this_1.eventHandlers[eventType]);\n              }\n          };\n          var this_1 = this;\n          for (var eventType in this.mouseEvents) {\n              _loop_1(eventType);\n          }\n          var _loop_2 = function (eventType) {\n              if (this_2.keyboardEvents[eventType]) {\n                  this_2.eventHandlers[eventType] = (function (ev) {\n                      var target = ev.target instanceof Element && ev.target.closest(_this.selectors.join(','));\n                      var key = ev.key === ' ' ? 'Space' : ev.key;\n                      if (target && _this.keyboardEvents[eventType][key]) {\n                          _this.keyboardEvents[eventType][key].call(undefined, target, _this, ev);\n                      }\n                  });\n                  root.addEventListener(eventType, this_2.eventHandlers[eventType]);\n              }\n          };\n          var this_2 = this;\n          for (var eventType in this.keyboardEvents) {\n              _loop_2(eventType);\n          }\n      };\n      Navigation.prototype.stop = function () {\n          if (this.root) {\n              for (var eventType in this.eventHandlers) {\n                  if (this.eventHandlers[eventType]) {\n                      this.root.removeEventListener(eventType, this.eventHandlers[eventType]);\n                  }\n              }\n          }\n          this.root = null;\n      };\n      Navigation.prototype.focusElement = function (element, previous) {\n          if (element) {\n              if (previous) {\n                  previous.removeAttribute('tabindex');\n                  previous.classList.remove('k-focus');\n              }\n              element.setAttribute('tabindex', String(this.tabIndex));\n              element.focus({ preventScroll: true });\n          }\n      };\n      return Navigation;\n  }());\n\n  var scrollableValuesSel = '.k-pivotgrid .k-pivotgrid-values';\n  var scrollableColumnHeaderSel = '.k-pivotgrid .k-pivotgrid-column-headers';\n  var scrollableRowHeaderSel = '.k-pivotgrid .k-pivotgrid-row-headers';\n  var emptyCellSel = '.k-pivotgrid > .k-pivotgrid-empty-cell';\n  var tableSel = 'table.k-pivotgrid-table';\n  var cellSel = '.k-pivotgrid-cell';\n  var scrollables = [scrollableValuesSel, scrollableColumnHeaderSel, scrollableRowHeaderSel].join(',');\n  var selectors$1 = [\n      emptyCellSel,\n      [scrollableColumnHeaderSel, tableSel, cellSel].join(' '),\n      [scrollableRowHeaderSel, tableSel, cellSel].join(' '),\n      [scrollableValuesSel, tableSel, cellSel].join(' ')\n  ];\n  var onEnter = function (target, nav, ev) {\n      var icon = target.querySelector('.k-icon, .k-svg-icon');\n      if (icon) {\n          var index_1 = nav.elements.indexOf(target);\n          nav.update = function () {\n              nav.focusElement(nav.elements[index_1], null);\n              nav.update = function () { };\n          };\n          icon.click();\n          ev.preventDefault();\n      }\n  };\n  var tryScrollLeft = function (target, scrollable, elToScroll) {\n      if (target.offsetLeft < scrollable.scrollLeft) {\n          elToScroll.scrollLeft = target.offsetLeft;\n      }\n  };\n  var tryScrollRight = function (target, scrollable, elToScroll) {\n      if (target.offsetLeft + target.offsetWidth > scrollable.scrollLeft + scrollable.offsetWidth &&\n          target.offsetWidth < scrollable.offsetWidth) {\n          elToScroll.scrollLeft = target.offsetLeft + target.offsetWidth - scrollable.offsetWidth;\n      }\n  };\n  var tryScrollUp = function (target, scrollable, elToScroll) {\n      if (scrollable.scrollTop && target.offsetTop < scrollable.scrollTop) {\n          elToScroll.scrollTop = target.offsetTop;\n      }\n  };\n  var tryScrollDown = function (target, scrollable, elToScroll) {\n      if (target.offsetTop + target.offsetHeight > scrollable.scrollTop + scrollable.offsetHeight &&\n          target.offsetHeight < scrollable.offsetHeight) {\n          elToScroll.scrollTop = target.offsetTop + target.offsetHeight - scrollable.offsetHeight;\n      }\n  };\n  var scrollTo = function (target, root, scrollFunc) {\n      var elToScroll = root.querySelector(scrollableValuesSel);\n      var scrollable = target && target.closest(scrollables);\n      if (!elToScroll || !scrollable || !target) {\n          return;\n      }\n      scrollFunc.forEach(function (scroll) { return scroll(target, scrollable, elToScroll); });\n  };\n  var tableMap = function (table) {\n      var rows = Array.from(table.rows);\n      var colsCount = Array.from((rows && rows[0] && rows[0].cells) || [])\n          .map(function (c) { return c.colSpan; })\n          .reduce(function (prev, cur) { return prev + cur; }, 0);\n      var map = rows.map(function () { return new Array(colsCount); });\n      rows.forEach(function (row, r) {\n          var curColSpan = 0;\n          Array.from(row.cells).forEach(function (c) {\n              for (var colSp = 0; colSp < c.colSpan; colSp++) {\n                  for (var rowSp = 0; rowSp < c.rowSpan; rowSp++) {\n                      var ind = map[r + rowSp].findIndex(function (val, curInd) { return curInd >= curColSpan && !val; });\n                      map[r + rowSp][ind] = c;\n                  }\n                  curColSpan++;\n              }\n          });\n      });\n      return map;\n  };\n  var navigationMap = function (root) {\n      var columnHeader = tableMap(root.querySelector([scrollableColumnHeaderSel, tableSel].join(' ')));\n      var rowHeader = tableMap(root.querySelector([scrollableRowHeaderSel, tableSel].join(' ')));\n      var values = tableMap(root.querySelector([scrollableValuesSel, tableSel].join(' ')));\n      var emptyCell = root.querySelector(emptyCellSel);\n      var emptyCellRow = new Array(rowHeader[0].length).fill(emptyCell);\n      var map = [];\n      for (var i = 0; i < columnHeader.length; i++) {\n          map.push(emptyCellRow.concat(columnHeader[i]));\n      }\n      for (var i = 0; i < rowHeader.length; i++) {\n          map.push(rowHeader[i].concat(values[i]));\n      }\n      return map;\n  };\n  var getTargetPos = function (map, target) {\n      for (var r = 0; r < map.length; r++) {\n          for (var c = 0; c < map[r].length; c++) {\n              if (map[r][c] === target) {\n                  return [r, c];\n              }\n          }\n      }\n      return [-1, -1];\n  };\n  var ctrlKey = function (ev) { return ev.ctrlKey || ev.metaKey; };\n  var cellAt = function (root, target, pos) {\n      var map = navigationMap(root);\n      var targetPos = getTargetPos(map, target);\n      var nextPos = [targetPos[0] + pos[0], targetPos[1] + pos[1]];\n      var next = map[nextPos[0]] && map[nextPos[0]][nextPos[1]];\n      while (next && next === target) {\n          nextPos = [nextPos[0] + pos[0], nextPos[1] + pos[1]];\n          next = map[nextPos[0]] && map[nextPos[0]][nextPos[1]];\n      }\n      return next;\n  };\n  var keyboardEvents$1 = {\n      keydown: {\n          ArrowLeft: function (target, nav, ev) {\n              ev.preventDefault();\n              var next = cellAt(nav.root, target, [0, -1]);\n              nav.focusElement(next, target);\n              scrollTo(next, nav.root, [tryScrollRight, tryScrollLeft, tryScrollDown, tryScrollUp]);\n          },\n          ArrowRight: function (target, nav, ev) {\n              ev.preventDefault();\n              var next = cellAt(nav.root, target, [0, 1]);\n              nav.focusElement(next, target);\n              scrollTo(next, nav.root, [tryScrollLeft, tryScrollRight, tryScrollDown, tryScrollUp]);\n          },\n          ArrowUp: function (target, nav, ev) {\n              ev.preventDefault();\n              var next = cellAt(nav.root, target, [-1, 0]);\n              nav.focusElement(next, target);\n              scrollTo(next, nav.root, [tryScrollRight, tryScrollLeft, tryScrollDown, tryScrollUp]);\n          },\n          ArrowDown: function (target, nav, ev) {\n              ev.preventDefault();\n              var next = cellAt(nav.root, target, [1, 0]);\n              nav.focusElement(next, target);\n              scrollTo(next, nav.root, [tryScrollRight, tryScrollLeft, tryScrollUp, tryScrollDown]);\n          },\n          o: function (_target, nav, _ev) {\n              if (!nav.root) {\n                  return;\n              }\n              var next = nav.root.nextElementSibling;\n              if (next && next instanceof HTMLElement && next.matches('div.k-pivotgrid-configurator-button')) {\n                  next.click();\n                  setTimeout(function () {\n                      if (nav.root.parentNode) {\n                          var confHeader = nav.root.parentNode.querySelector('.k-pivotgrid-configurator-content .k-form-field .k-fields-list-wrapper .k-treeview');\n                          if (confHeader instanceof HTMLElement) {\n                              confHeader.setAttribute('tabindex', String(nav.tabIndex));\n                              confHeader.focus();\n                          }\n                      }\n                  }, 0);\n              }\n          },\n          Enter: onEnter,\n          Space: onEnter,\n          Home: function (target, nav, ev) {\n              var map = navigationMap(nav.root);\n              var ctrl = ctrlKey(ev);\n              var row = ctrl ? map[0] : (map.find(function (ro) { return Boolean(ro.find(function (x) { return x === target; })); }) || []);\n              var next = row[0];\n              if (next) {\n                  nav.focusElement(next, target);\n                  scrollTo(next, nav.root, [tryScrollRight, tryScrollLeft, tryScrollDown, tryScrollUp]);\n                  ev.preventDefault();\n              }\n          },\n          End: function (target, nav, ev) {\n              var map = navigationMap(nav.root);\n              var ctrl = ctrlKey(ev);\n              var row = ctrl ? map[map.length - 1] : (map.find(function (ro) { return Boolean(ro.find(function (x) { return x === target; })); }) || []);\n              var next = row && row[row.length - 1] || null;\n              if (next) {\n                  nav.focusElement(next, target);\n                  scrollTo(next, nav.root, [tryScrollLeft, tryScrollRight, tryScrollUp, tryScrollDown]);\n                  ev.preventDefault();\n              }\n          }\n      }\n  };\n  var mouseEvents$1 = {\n      click: function (target, nav) {\n          if (target && target instanceof HTMLElement) {\n              var prev = nav.elements.find(function (c) { return c.hasAttribute('tabindex'); }) || null;\n              nav.focusElement(target, prev);\n          }\n      }\n  };\n  /**\n   * The PivotGrid keyboard navigation functionality.\n   *\n   * Usage:\n   *\n   * On Initialize\n   * const navigation = new PivotGridNavigation({ tabindex: 0 });\n   *\n   * Turn on\n   * navigation.start(rootDomElement);\n   *\n   * On After Update\n   * navigation.update();\n   *\n   * On Destroy / Turn off\n   * navigation.stop();\n   */\n  var PivotGridNavigation = /** @class */ (function (_super) {\n      __extends(PivotGridNavigation, _super);\n      function PivotGridNavigation() {\n          var _this = _super !== null && _super.apply(this, arguments) || this;\n          _this.selectors = selectors$1;\n          _this.mouseEvents = mouseEvents$1;\n          _this.keyboardEvents = keyboardEvents$1;\n          return _this;\n      }\n      return PivotGridNavigation;\n  }(Navigation));\n\n  var selectors = [\n      '.k-pivotgrid-configurator-content .k-form-field .k-fields-list-wrapper .k-treeview',\n      '.k-pivotgrid-configurator-content .k-chip',\n      '.k-pivotgrid-configurator-actions button'\n  ];\n  var onEscape = function (_target, nav, ev) {\n      if (ev.target instanceof HTMLElement) {\n          if (nav.root) {\n              var pivot = nav.root.previousElementSibling;\n              var confButton = nav.root.nextElementSibling;\n              var pivotCell = Array.from(pivot instanceof HTMLElement ? pivot.querySelectorAll('[tabindex]') : []).find(function (c) { return c.tabIndex >= 0; });\n              if (pivotCell instanceof HTMLElement) {\n                  pivotCell.focus();\n                  if (confButton instanceof HTMLElement) {\n                      confButton.click();\n                  }\n              }\n          }\n      }\n  };\n  var navigate = function (target, nav, ev, dir) {\n      ev.preventDefault();\n      var all = nav.elements;\n      var index = all.indexOf(target) + dir;\n      if (index < 0) {\n          index = all.length - 1;\n      }\n      nav.focusElement(all[index % all.length], target);\n  };\n  var onDelete = function (target, nav, ev) {\n      if (ev.target instanceof HTMLElement) {\n          var deleteButton = ev.target.querySelector('.k-icon.k-i-x-circle, .k-svg-icon.k-svg-i-x-circle');\n          if (deleteButton instanceof HTMLElement) {\n              ev.preventDefault();\n              navigate(target, nav, ev, -1);\n          }\n      }\n  };\n  var keyboardEvents = {\n      keydown: {\n          Tab: function (target, nav, ev) {\n              navigate(target, nav, ev, ev.shiftKey ? -1 : 1);\n          },\n          Escape: onEscape,\n          Delete: onDelete,\n          Backspace: onDelete\n      }\n  };\n  var mouseEvents = {\n      click: function (target, nav) {\n          if (target && target instanceof HTMLElement) {\n              var prev = nav.elements.find(function (c) { return c.hasAttribute('tabindex'); }) || null;\n              nav.focusElement(target, prev);\n          }\n      }\n  };\n  /**\n   * The PivotGrid Configurator keyboard navigation functionality.\n   *\n   * Usage:\n   *\n   * On Initialize\n   * const navigation = new ConfiguratorNavigation({ tabindex: 0 });\n   *\n   * Turn on\n   * navigation.start(rootDomElement);\n   *\n   * On After Update\n   * navigation.update();\n   *\n   * On Destroy / Turn off\n   * navigation.stop();\n   */\n  var ConfiguratorNavigation = /** @class */ (function (_super) {\n      __extends(ConfiguratorNavigation, _super);\n      function ConfiguratorNavigation() {\n          var _this = _super !== null && _super.apply(this, arguments) || this;\n          _this.selectors = selectors;\n          _this.mouseEvents = mouseEvents;\n          _this.keyboardEvents = keyboardEvents;\n          return _this;\n      }\n      return ConfiguratorNavigation;\n  }(Navigation));\n\n  exports.A = createAxisDescriptors;\n  exports.B = configuratorReducer;\n  exports.C = compareAxes;\n  exports.D = cloneDataTree;\n  exports.E = buildKPIMeasures;\n  exports.F = addMultipleMeasures;\n  exports.G = addKPI;\n  exports.I = ConfiguratorNavigation;\n  exports.P = PivotGridNavigation;\n  exports.__meta__ = __meta__;\n  exports.a = createLocalDataState;\n  exports.b = countAggregate;\n  exports.c = createDataTree;\n  exports.d = minAggregate;\n  exports.e = averageAggregate;\n  exports.f = fetchDiscover;\n  exports.g = fetchData;\n  exports.h = createDataState;\n  exports.i = headersReducer;\n  exports.j = toTree;\n  exports.k = toColumns;\n  exports.l = toRows;\n  exports.m = maxAggregate;\n  exports.n = setSort;\n  exports.o = setFilter;\n  exports.p = readData;\n  exports.q = parseResponse;\n  exports.r = rootFields;\n  exports.s = sumAggregate;\n  exports.t = toData;\n  exports.u = mergeTrees;\n  exports.v = discoverCommands;\n  exports.w = createTuples;\n  exports.x = createRequestBody;\n  exports.y = createFlatSchemaDimensions;\n  exports.z = createDiscoverBody;\n\n}));\n"]}