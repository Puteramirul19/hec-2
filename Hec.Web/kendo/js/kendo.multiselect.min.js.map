{"version":3,"sources":["raw-js/kendo.multiselect.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Multiselect","List","MobileScroller","Virtuallist","HtmlChip","HtmlChiplist","HtmlButton","PrefixSuffixContainersChunk","this","kendo_list_js","kendo_mobile_scroller_js","kendo_virtuallist_js","kendo_html_chip_js","kendo_html_chiplist_js","kendo_html_button_js","kendo_prefixSuffixContainers_chunk_js","$","undefined$1","window","ui","encode","htmlEncode","html","keys","extend","A","activeElement","_activeElement","ObservableArray","data","ID","CHIP","ACCEPT","FILTER","REBIND","OPEN","CLOSE","CHANGE","SELECT","DESELECT","ARIA_DISABLED","ARIA_READONLY","ARIA_EXPANDED","ARIA_HIDDEN","ARIA_ACTIVEDESCENDANT","FOCUSEDCLASS","SELECTEDCLASS","HOVERCLASS","STATEDISABLED","NOCLICKCLASS","DISABLED","READONLY","ns","CLICK","KEYDOWN","MOUSEENTER","MOUSELEAVE","HOVEREVENTS","quotRegExp","isArray","Array","styles","MultiSelect","init","element","options","id","that","fn","call","_optionsMap","_customOptions","inputMode","attr","_wrapper","_inputValuesContainer","_tagList","_input","_textContainer","_clearButton","_arrowButton","_tabindex","input","hide","placeholder","guid","_tagID","tagList","_initialOpen","label","_label","_aria","_dataSource","_ignoreCase","_popup","_tagTemplate","requireValueMapper","_initList","_reset","_enable","_placeholder","autoBind","dataSource","fetch","value","_preselect","parents","is","enable","_toggleCloseVisibility","_applyCssClasses","a","widget","wrapper","prefixInsertBefore","suffixInsertAfter","clearButton","_clear","find","floatingLabel","refresh","notify","name","tagMode","enabled","autoClose","highlightFirst","dataTextField","dataValueField","filter","ignoreCase","minLength","messages","singleTag","clear","deleteTag","noData","downArrow","enforceMinLength","delay","maxSelectedItems","height","animation","virtual","itemTemplate","tagTemplate","groupTemplate","fixedGroupTemplate","prefixOptions","separator","suffixOptions","autoWidth","popup","size","fillMode","rounded","adaptiveTitle","adaptiveSubtitle","events","setDataSource","_state","persistTagList","listView","setOptions","listOptions","_listOptions","_accessors","currentTag","candidate","_currentTag","removeClass","removeAttr","addClass","dataItems","selectedDataItems","destroy","clearTimeout","_busy","_typingTimeout","filterInput","off","_onActionSheetCreate","on","_keydown","bind","_search","role","val","trigger","ul","autocomplete","tagListId","_ariaLabel","_focused","_activateItem","visible","selectedItemChange","_selectedItemChange","selectable","template","getter","_setListValue","_initialValues","slice","_listChange","e","flatView","optionsMap","valueGetter","_value","i","added","length","dataItem","_render","_selectValue","removed","context","idx","items","children","eq","index","first","tagTextTemplate","item","_wrapperMousedown","notInput","target","nodeName","toLowerCase","closeButton","closest","removeButton","support","mobileOS","cancelable","preventDefault","toggle","open","_inputFocus","_hasActionSheet","readonly","_inputFocusout","relatedTarget","close","skipUpdate","bound","isFiltered","_clearFilter","_removeTag","tag","shouldTrigger","option","state","position","customIndex","listViewChildren","_close","done","_change","_refreshTagListAria","select","selected","removeAt","_removedAddedIndexes","splice","classList","remove","_updateTagListHTML","_tagListClick","stopPropagation","currentTarget","_clearValue","_clearSingleTagValue","each","focus","_hideClear","tags","_focusHandler","active","_editable","disable","toggleClass","prop","_toggleHover","_filterSource","force","_retrieveData","_activeItem","filterValue","listViewFilter","listViewFilterValue","filters","toString","_request","_open","_focusItem","_allowOpening","isPlainObject","_hovered","altTarget","add","_floatCheck","_listBound","_renderFooter","_renderNoData","_toggleNoData","_resizePopup","_updateItemFocus","_touchScroller","reset","_hideBusy","skip","isFirstPage","focusFirst","_inputValue","inputValue","oldValue","clearFilters","_normalizeValues","_old","_valueBeforeCascade","_fetchData","ObservableObject","_setOption","hasItems","view","_fetch","read","_isBound","fields","field","_refreshHandler","_unbindDataSource","_progressHandler","_showBusy","_endRequestHandler","_errorHandler","DataSource","create","formId","form","_resetHandler","setTimeout","_form","_initValue","map","b","compare","_click","_select","_getActiveItem","_getSelectedIndices","_selectedIndices","_selectedIndexes","activeItemIdx","key","keyCode","hasValue","isRtl","dir","handled","ENTER","_multipleSelection","DOWN","shiftKey","getElementIndex","focusNext","_selectRange","focusLast","UP","focusPrev","LEFT","RIGHT","prev","last","next","ctrlKey","altKey","hasClass","SPACEBAR","activeIndex","currentIndex","ESC","HOME","END","DELETE","BACKSPACE","PAGEDOWN","PAGEUP","direction","scrollWith","screenHeight","show","skipCaret","isActive","caretPos","_prev","caret","_option","dataValue","dataText","indexOf","replace","selectedIndex","selectedItems","values","_buildSelectedItems","custom","_selectedItemIndex","_text","valueField","textField","result","push","noDelay","_performSearch","search","_showClear","_allowSelection","max","updatePersistTagList","removedItem","addedItem","total","removeChild","append","applyStylesFromKendoAttributes","_maxTotal","_refreshFloatingLabel","renderChipList","maxTotal","currentTotal","resolved","Deferred","resolve","dataItemByIndex","isSelected","_selectIndices","indices","forEach","startIndex","endIndex","indicesToSelect","accessKey","appendTo","title","inputValuesContainer","defaultTemplate","hasDataSource","isMultiple","renderChip","themeColor","text","unselectable","removable","removableAttr","icon","iconAttr","insertAfter","arrowTitle","arrow","renderButton","_arrow","tabIndex","computedStyles","getComputedStyles","visibility","top","left","_span","css","parent","wrap","style","cssText","className","_closeHandler","_openHandler","_adjustListWidth","plugin","cssProperties","registerPrefix","registerValues","roundedValues","concat","jQuery","kendo$1","__meta__","category","description","depends","features","default","Object","defineProperty"],"mappings":"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","file":"kendo.multiselect.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.list.js'), require('kendo.mobile.scroller.js'), require('kendo.virtuallist.js'), require('kendo.html.chip.js'), require('kendo.html.chiplist.js'), require('kendo.html.button.js'), require('kendo.prefix-suffix-containers.chunk.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.list', 'kendo.mobile.scroller', 'kendo.virtuallist', 'kendo.html.chip', 'kendo.html.chiplist', 'kendo.html.button', 'kendo.prefix-suffix-containers.chunk'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Multiselect = {}), global.kendo._globals.List, global.kendo._globals.MobileScroller, global.kendo._globals.Virtuallist, global.kendo._globals.HtmlChip, global.kendo._globals.HtmlChiplist, global.kendo._globals.HtmlButton, global.kendo._globals.PrefixSuffixContainersChunk));\n})(this, (function (exports, kendo_list_js, kendo_mobile_scroller_js, kendo_virtuallist_js, kendo_html_chip_js, kendo_html_chiplist_js, kendo_html_button_js, kendo_prefixSuffixContainers_chunk_js) {\n    const __meta__ = {\n        id: \"multiselect\",\n        name: \"MultiSelect\",\n        category: \"web\",\n        description: \"The MultiSelect widget allows the selection from pre-defined values.\",\n        depends: [\"list\", \"html.chip\", \"html.chiplist\", \"html.button\", \"prefix-suffix-containers.chunk\"],\n        features: [ {\n            id: \"mobile-scroller\",\n            name: \"Mobile scroller\",\n            description: \"Support for kinetic scrolling in mobile device\",\n            depends: [ \"mobile.scroller\" ]\n        }, {\n            id: \"virtualization\",\n            name: \"VirtualList\",\n            description: \"Support for virtualization\",\n            depends: [ \"virtuallist\" ]\n        } ]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            List = ui.List,\n            encode = kendo.htmlEncode,\n            html = kendo.html,\n            keys = $.extend({ A: 65 }, kendo.keys),\n            activeElement = kendo._activeElement,\n            ObservableArray = kendo.data.ObservableArray,\n            ID = \"id\",\n            CHIP = \".k-chip\",\n            ACCEPT = \"accept\",\n            FILTER = \"filter\",\n            REBIND = \"rebind\",\n            OPEN = \"open\",\n            CLOSE = \"close\",\n            CHANGE = \"change\",\n            PROGRESS = \"progress\",\n            SELECT = \"select\",\n            DESELECT = \"deselect\",\n            ARIA_DISABLED = \"aria-disabled\",\n            ARIA_READONLY = \"aria-readonly\",\n            ARIA_EXPANDED = \"aria-expanded\",\n            ARIA_HIDDEN = \"aria-hidden\",\n            ARIA_ACTIVEDESCENDANT = \"aria-activedescendant\",\n            ARIA_BUSY = \"aria-busy\",\n            FOCUSEDCLASS = \"k-focus\",\n            SELECTEDCLASS = \"k-selected\",\n            HIDDENCLASS = \"k-hidden\",\n            HOVERCLASS = \"k-hover\",\n            STATEDISABLED = \"k-disabled\",\n            NOCLICKCLASS = \"k-no-click\",\n            DISABLED = \"disabled\",\n            READONLY = \"readonly\",\n            AUTOCOMPLETEVALUE = \"off\",\n            ns = \".kendoMultiSelect\",\n            CLICK = \"click\" + ns,\n            KEYDOWN = \"keydown\" + ns,\n            MOUSEENTER = \"mouseenter\" + ns,\n            MOUSELEAVE = \"mouseleave\" + ns,\n            HOVEREVENTS = MOUSEENTER + \" \" + MOUSELEAVE,\n            quotRegExp = /\"/g,\n            isArray = Array.isArray,\n            styles = [\"font-family\",\n                      \"font-size\",\n                      \"font-stretch\",\n                      \"font-style\",\n                      \"font-weight\",\n                      \"letter-spacing\",\n                      \"text-transform\",\n                      \"line-height\"];\n\n        var MultiSelect = List.extend({\n            init: function(element, options) {\n                var that = this, id, disabled;\n\n                that.ns = ns;\n                List.fn.init.call(that, element, options);\n\n                that._optionsMap = {};\n                that._customOptions = {};\n                that.options.inputMode = that.options.inputMode || that.element.attr(\"inputmode\") || \"text\";\n\n                that._wrapper();\n                that._inputValuesContainer();\n                that._tagList();\n                that._input();\n                that._textContainer();\n                that._clearButton();\n                that._arrowButton();\n\n                that._tabindex(that.input);\n\n                element = that.element.attr(\"multiple\", \"multiple\").hide();\n                options = that.options;\n\n                if (!options.placeholder) {\n                    options.placeholder = element.data(\"placeholder\");\n                }\n\n                id = element.attr(ID);\n\n                if (!id) {\n                    id = kendo.guid();\n                }\n\n                if (id) {\n                    that._tagID = id + \"_tag_active\";\n                    id = id + \"_taglist\";\n                    that.tagList.attr(ID, id);\n                }\n\n                that._initialOpen = true;\n\n                if (options.label) {\n                    this._label();\n                }\n\n                that._aria();\n\n                that._dataSource();\n                that._ignoreCase();\n                that._popup();\n\n                that._tagTemplate();\n                that.requireValueMapper(that.options);\n                that._initList();\n\n                that._reset();\n                that._enable();\n                that._placeholder();\n\n                if (options.autoBind) {\n                    that.dataSource.fetch();\n                } else if (options.value) {\n                    that._preselect(options.value);\n                }\n\n                disabled = $(that.element).parents(\"fieldset\").is(':disabled');\n\n                if (disabled) {\n                    that.enable(false);\n                }\n\n                that._toggleCloseVisibility();\n                that._applyCssClasses();\n\n                kendo_prefixSuffixContainers_chunk_js.a({ widget: that, wrapper: that.wrapper, options: that.options, prefixInsertBefore: that._inputValuesContainer, suffixInsertAfter: options.clearButton ? that._clear : that.element.find(\"k-input-values\") });\n                if (that.floatingLabel) {\n                    that.floatingLabel.refresh();\n                }\n\n                kendo.notify(that);\n            },\n\n            options: {\n                name: \"MultiSelect\",\n                tagMode: \"multiple\",\n                enabled: true,\n                autoBind: true,\n                autoClose: true,\n                highlightFirst: true,\n                dataTextField: \"\",\n                dataValueField: \"\",\n                filter: \"startswith\",\n                ignoreCase: true,\n                minLength: 1,\n                messages: {\n                    \"singleTag\": \"item(s) selected\",\n                    \"clear\": \"clear\",\n                    \"deleteTag\": \"delete\",\n                    \"noData\": \"No data found.\",\n                    \"downArrow\": \"select\"\n                },\n                enforceMinLength: false,\n                delay: 100,\n                downArrow: false,\n                value: null,\n                maxSelectedItems: null,\n                placeholder: \"\",\n                height: 200,\n                animation: {},\n                virtual: false,\n                itemTemplate: \"\",\n                tagTemplate: \"\",\n                groupTemplate: (data) => encode(data),\n                fixedGroupTemplate: (data) => encode(data),\n                prefixOptions: {\n                    separator: true\n                },\n                suffixOptions: {\n                    separator: true\n                },\n                clearButton: true,\n                autoWidth: false,\n                popup: null,\n                size: \"medium\",\n                fillMode: \"solid\",\n                rounded: \"medium\",\n                label: null,\n                adaptiveTitle: null,\n                adaptiveSubtitle: null,\n            },\n\n            events: [\n                OPEN,\n                CLOSE,\n                CHANGE,\n                SELECT,\n                DESELECT,\n                \"filtering\",\n                \"dataBinding\",\n                \"dataBound\"\n            ],\n\n            setDataSource: function(dataSource) {\n                this.options.dataSource = dataSource;\n\n                this._state = \"\";\n                this._dataSource();\n\n                this.persistTagList = false;\n                this.listView.setDataSource(this.dataSource);\n\n                if (this.options.autoBind) {\n                    this.dataSource.fetch();\n                }\n            },\n\n            setOptions: function(options) {\n                var listOptions = this._listOptions(options);\n\n                List.fn.setOptions.call(this, options);\n\n                this.listView.setOptions(listOptions);\n\n\n                this._accessors();\n                this._aria();\n                this._tagTemplate();\n                this._placeholder();\n                this._clearButton();\n                this._arrowButton();\n            },\n\n            currentTag: function(candidate) {\n                var that = this;\n\n                if (candidate !== undefined$1) {\n                    if (that._currentTag) {\n                        that._currentTag\n                            .removeClass(FOCUSEDCLASS)\n                            .removeAttr(ID);\n\n                        that._currentTag.find(\".k-chip-action\").attr(ARIA_HIDDEN, true);\n\n                        that.input.removeAttr(ARIA_ACTIVEDESCENDANT);\n                    }\n\n                    if (candidate) {\n                        candidate.addClass(FOCUSEDCLASS).attr(ID, that._tagID);\n\n                        candidate.find(\".k-chip-action\").removeAttr(ARIA_HIDDEN);\n\n                        that.input.attr(ARIA_ACTIVEDESCENDANT, that._tagID);\n                    }\n\n                    that._currentTag = candidate;\n                } else {\n                    return that._currentTag;\n                }\n            },\n\n            dataItems: function() {\n                return this.listView.selectedDataItems();\n            },\n\n            destroy: function() {\n                var that = this,\n                    ns = that.ns;\n\n                clearTimeout(that._busy);\n                clearTimeout(that._typingTimeout);\n\n                if (that.filterInput) {\n                    that.filterInput.off(ns);\n                }\n\n                that.wrapper.off(ns);\n                that.tagList.off(ns);\n                that.input.off(ns);\n                that._clear.off(ns);\n\n                List.fn.destroy.call(that);\n            },\n\n            _onActionSheetCreate: function() {\n                var that = this;\n\n                that.filterInput\n                    .on(\"keydown\" + ns, that._keydown.bind(that))\n                    .on(\"input\" + ns, that._search.bind(that))\n                    .on(\"paste\" + ns, that._search.bind(that))\n                    .attr({\n                        \"role\": \"combobox\",\n                        \"aria-expanded\": false,\n                        \"aria-controls\": that.input.attr(\"aria-controls\"),\n                        \"aria-autocomplete\": that.input.attr(\"aria-autocomplete\"),\n                        \"aria-describedby\": that.input.attr(\"aria-describedby\"),\n                        \"placeholder\": that.options.placeholder,\n                    });\n\n                that.popup.bind(\"activate\", () => {\n                    that.filterInput.val(that.input.val());\n                    that.filterInput.trigger(\"focus\");\n                });\n\n                that.popup.bind(\"deactivate\", () => {\n                    that.input.trigger(\"focus\");\n                });\n            },\n\n            _aria: function() {\n                var that = this,\n                    id = that.ul[0].id,\n                    autocomplete = this.options.filter === \"none\" ? \"none\" : \"list\",\n                    tagListId = that.tagList.attr(ID);\n\n                that.input.attr({\n                    \"role\": \"combobox\",\n                    \"aria-expanded\": false,\n                    \"aria-controls\": id,\n                    \"aria-autocomplete\": autocomplete,\n                    \"aria-describedby\": tagListId\n                });\n\n                that._ariaLabel(that._focused);\n            },\n\n            _activateItem: function() {\n                if (this.popup.visible()) {\n                    List.fn._activateItem.call(this);\n                }\n                this.currentTag(null);\n            },\n\n            _listOptions: function(options) {\n                var that = this;\n                var listOptions = List.fn._listOptions.call(that, $.extend(options, {\n                    selectedItemChange: that._selectedItemChange.bind(that),\n                    selectable: \"multiple\"\n                }));\n\n                var itemTemplate = this.options.itemTemplate || this.options.template;\n                var template = listOptions.itemTemplate || itemTemplate || listOptions.template;\n\n                if (!template) {\n                    template = data => encode(kendo.getter(listOptions.dataTextField)(data));\n                }\n\n                listOptions.template = template;\n\n                return listOptions;\n            },\n\n            _setListValue: function() {\n                List.fn._setListValue.call(this, this._initialValues.slice(0));\n            },\n\n            _listChange: function(e) {\n                var data = this.dataSource.flatView();\n                var optionsMap = this._optionsMap;\n                var valueGetter = this._value;\n\n                if (this._state === REBIND) {\n                    this._state = \"\";\n                }\n\n                for (var i = 0; i < e.added.length; i++) {\n                    if (optionsMap[valueGetter(e.added[i].dataItem)] === undefined$1) {\n                        this._render(data); //render select element <option> tags if the item does not persist in the current data view\n                        break;\n                    }\n                }\n\n                this._selectValue(e.added, e.removed);\n            },\n\n            _selectedItemChange: function(e) {\n                var items = e.items;\n                var context;\n                var idx;\n\n                for (idx = 0; idx < items.length; idx++) {\n                    context = items[idx];\n                    this.tagList.children(CHIP).eq(context.index).children(\"span\").first().html(this.tagTextTemplate(context.item));\n                }\n            },\n\n            _wrapperMousedown: function(e) {\n                var that = this;\n                var notInput = e.target.nodeName.toLowerCase() !== \"input\";\n                var target = $(e.target);\n                var closeButton = target.closest(\".k-input-button, .k-chip\").children(\"[class*='-i-caret-alt-down']\")[0];\n                var removeButton = target.closest(\"[class*='-i-x']\")[0];\n\n                if (notInput && !(removeButton && kendo.support.mobileOS) && e.cancelable) {\n                    e.preventDefault();\n                }\n\n                if (!removeButton) {\n                    if (closeButton && that.popup.visible()) {\n                        that.toggle(false);\n                    } else {\n                        if (that.input[0] !== activeElement() && notInput) {\n                            that.input.trigger(\"focus\");\n                        }\n\n                        if (that.options.minLength === 1 && !that.popup.visible()) {\n                            that.open();\n                        }\n                    }\n                }\n\n            },\n\n            _inputFocus: function() {\n                const that = this;\n                if (that._hasActionSheet()) {\n                    that.input.attr(\"readonly\", true);\n                } else if (!that.options.readonly) {\n                    that.input.removeAttr(\"readonly\");\n                }\n                that._placeholder(false, true);\n                that.wrapper.addClass(FOCUSEDCLASS);\n            },\n\n            _inputFocusout: function(e) {\n                var that = this;\n\n                if (that.filterInput && e.relatedTarget === that.filterInput[0]) {\n                    return;\n                }\n\n                clearTimeout(that._typingTimeout);\n\n                that.wrapper.removeClass(FOCUSEDCLASS);\n\n                that._placeholder(!that.listView.selectedDataItems()[0], true);\n                that.close();\n\n                if (that._state === FILTER) {\n                    that._state = ACCEPT;\n                    that.listView.skipUpdate(true);\n                }\n\n                if (that.listView.bound() && that.listView.isFiltered()) {\n                    that.persistTagList = true;\n                    that._clearFilter();\n                }\n\n                that.element.trigger(\"blur\");\n            },\n\n            _removeTag: function(tag, shouldTrigger) {\n                var that = this;\n                var state = that._state;\n                var position = tag.index();\n                var listView = that.listView;\n                var value = listView.value()[position];\n                var dataItem = that.listView.selectedDataItems()[position];\n                var customIndex = that._customOptions[value];\n                var listViewChildren = listView.element[0].children;\n                var option;\n                var listViewChild;\n\n                if (that.trigger(DESELECT, { dataItem: dataItem, item: tag })) {\n                    that._close();\n                    return;\n                }\n\n                if (customIndex === undefined$1 && (state === ACCEPT || state === FILTER)) {\n                    customIndex = that._optionsMap[value];\n                }\n\n                var done = function() {\n                    that.currentTag(null);\n                    if (shouldTrigger) {\n                        that._change();\n                    }\n\n                    that._refreshTagListAria();\n                    that._close();\n                };\n\n                if (customIndex === undefined$1 && listView.select().length) {\n                    that.persistTagList = false;\n                    listView.select(listView.select()[position]).done(done);\n                } else {\n                    option = that.element[0].children[customIndex];\n                    if (option) {\n                        option.selected = false;\n                    }\n\n                    listView.removeAt(position);\n\n                    if (listView._removedAddedIndexes) {\n                        listView._removedAddedIndexes.splice(position, 1);\n                    }\n\n                    listViewChild = listViewChildren[customIndex];\n                    if (listViewChild) {\n                        listViewChildren[customIndex].classList.remove(\"k-selected\");\n                    }\n                    if (that.options.tagMode !== \"single\") {\n                        tag.remove();\n                    } else {\n                        that._updateTagListHTML();\n                    }\n                    done();\n                }\n            },\n\n            _tagListClick: function(e) {\n                e.preventDefault();\n                e.stopPropagation();\n                var target = $(e.currentTarget);\n\n                if (target.is(\"[class*='-i-x-circle']\")) {\n                    this._removeTag(target.closest(CHIP), true);\n                }\n            },\n\n            _clearValue: function() {\n                var that = this;\n\n                if (that.options.tagMode === \"single\") {\n                    that._clearSingleTagValue();\n                } else {\n                    that.tagList.children(CHIP).each(function(index, tag) {\n                        that._removeTag($(tag), false);\n                    });\n                }\n\n                that.input.val(\"\");\n                that._search(true);\n                that._change();\n                that.focus();\n                that._hideClear();\n\n                if (that._state === FILTER) {\n                    that._state = ACCEPT;\n                }\n            },\n\n            _clearSingleTagValue: function() {\n                var that = this;\n                var items = that.dataItems();\n                var tags = that.tagList.children(CHIP);\n                var persistTagList = that.persistTagList;\n\n                for (var i = 0; i < items.length; i += 1) {\n                    if (that.trigger(DESELECT, { dataItem: items[i], item: tags.first() })) {\n                        that._close();\n                        return;\n                    }\n                }\n\n                if (persistTagList) {\n                    that.persistTagList = false;\n                }\n\n                that.listView.value([]);\n                that.persistTagList = persistTagList;\n            },\n\n            _focusHandler: function() {\n                var input = this.input;\n                var active = activeElement();\n                var isActive = input[0] === active;\n\n                if (!isActive) {\n                    this.input.trigger(\"focus\");\n                }\n            },\n\n            _editable: function(options) {\n                var that = this,\n                    disable = options.disable,\n                    readonly = options.readonly,\n                    wrapper = that.wrapper.off(ns),\n                    tagList = that.tagList.off(ns),\n                    input = that.input.off(ns);\n\n                if (!readonly && !disable) {\n                    wrapper\n                        .removeClass(STATEDISABLED)\n                        .removeClass(NOCLICKCLASS)\n                        .on(HOVEREVENTS, that._toggleHover)\n                        .on(\"mousedown\" + ns + \" touchend\" + ns, that._wrapperMousedown.bind(that))\n                        .on(CLICK, that._focusHandler.bind(that));\n\n                    that.input.on(KEYDOWN, that._keydown.bind(that))\n                        .on(\"paste\" + ns, that._search.bind(that))\n                        .on(\"input\" + ns, that._search.bind(that))\n                        .on(\"focus\" + ns, that._inputFocus.bind(that))\n                        .on(\"focusout\" + ns, that._inputFocusout.bind(that));\n\n                    that._clear.on(CLICK + \" touchend\" + ns, that._clearValue.bind(that));\n\n                    input.prop(DISABLED, false)\n                         .prop(READONLY, false)\n                         .attr(ARIA_DISABLED, false)\n                         .attr(ARIA_READONLY, false);\n\n                    that.element.prop(DISABLED, false);\n\n                    tagList\n                        .on(MOUSEENTER, CHIP, function() { $(this).addClass(HOVERCLASS); })\n                        .on(MOUSELEAVE, CHIP, function() { $(this).removeClass(HOVERCLASS); })\n                        .on(CLICK + \" touchend\" + ns, \".k-chip .k-icon,.k-chip .k-svg-icon\", that._tagListClick.bind(that));\n                } else {\n\n                    wrapper.toggleClass(STATEDISABLED, disable)\n                           .toggleClass(NOCLICKCLASS, readonly);\n\n                    input.attr(DISABLED, disable)\n                         .attr(READONLY, readonly)\n                         .attr(ARIA_DISABLED, disable)\n                         .attr(ARIA_READONLY, readonly);\n\n                    that.element.prop(DISABLED, disable);\n                }\n            },\n\n            _close: function() {\n                var that = this;\n                if (that.options.autoClose) {\n                    that.close();\n                } else {\n                    that.popup.position();\n                }\n            },\n\n            _filterSource: function(filter, force) {\n                if (!force) {\n                    force = this._retrieveData;\n                }\n                this._retrieveData = false;\n                List.fn._filterSource.call(this, filter, force);\n            },\n\n            close: function() {\n                this._activeItem = null;\n                this.input.removeAttr(ARIA_ACTIVEDESCENDANT);\n\n                this.popup.close();\n            },\n\n            open: function() {\n                var that = this,\n                    filterValue = that.input.val().toLowerCase(),\n                    listViewFilter = that.listView.dataSource.filter(),\n                    listViewFilterValue = \"\";\n\n                if (listViewFilter && listViewFilter.filters.length > 0) {\n                    listViewFilterValue = (listViewFilter.filters[0].value || \"\").toString().toLowerCase();\n                }\n\n                if (that._request) {\n                    that._retrieveData = false;\n                }\n\n                if (that._retrieveData || !that.listView.bound() || (that._state === ACCEPT && filterValue !== listViewFilterValue)) {\n                    that._open = true;\n                    that._state = REBIND;\n\n                    that.listView.skipUpdate(true);\n\n                    that.persistTagList = that._initialOpen && !that.listView.bound() ? false : true;\n                    that._filterSource();\n                    that._focusItem();\n                } else if (that._allowOpening()) {\n\n                    //selects values in autoBind false and non virtual scenario on initial load\n                    if (that._initialOpen && !that.options.autoBind && !that.options.virtual && that.options.value && !$.isPlainObject(that.options.value[0])) {\n                        that.value(that.value() || that._initialValues);\n                    }\n\n                    // In some cases when the popup is opened resize is triggered which will cause it to close\n                    // Setting the below flag will prevent this from happening\n                    that.popup._hovered = true;\n                    that._initialOpen = false;\n                    that.popup.open({ altTarget: that.wrapper.add(that.element).add(that.input) });\n                    that._focusItem();\n                }\n            },\n\n            toggle: function(toggle) {\n                toggle = toggle !== undefined$1 ? toggle : !this.popup.visible();\n\n                this[toggle ? OPEN : CLOSE]();\n            },\n\n            refresh: function() {\n                this.listView.refresh();\n            },\n\n            _floatCheck: function() {\n                if (this.listView) {\n                    var hasValue = (this.value() && this.value().length);\n                    return !hasValue && !this.popup.visible();\n                }\n\n                return true;\n            },\n\n            _listBound: function() {\n                var that = this;\n                var data = that.dataSource.flatView();\n\n                that._render(data);\n                that._renderFooter();\n                that._renderNoData();\n                that._toggleNoData(!data.length);\n                that._resizePopup();\n\n                if (that._open) {\n                    that._open = false;\n                    that.toggle(that._allowOpening());\n                }\n\n                that.popup.position();\n                that._updateItemFocus();\n\n                if (that._touchScroller) {\n                    that._touchScroller.reset();\n                }\n\n                that._hideBusy();\n\n                that.trigger(\"dataBound\");\n            },\n\n            _updateItemFocus: function() {\n                var that = this,\n                    data = that.dataSource.flatView(),\n                    skip = that.listView.skip(),\n                    isFirstPage = skip === undefined$1 || skip === 0;\n\n                if (data.length && isFirstPage) {\n                    if (!that.options.highlightFirst) {\n                        that.listView.focus(-1);\n                    } else {\n                        that.listView.focusFirst();\n                    }\n                }\n            },\n\n            _inputValue: function() {\n                var that = this;\n                var inputValue = that.filterInput && activeElement() === that.filterInput[0] ? that.filterInput.val() : that.input.val();\n\n                if (that.options.placeholder === inputValue) {\n                    inputValue = \"\";\n                }\n                return inputValue;\n            },\n\n            value: function(value) {\n                var that = this;\n                var listView = that.listView;\n                var oldValue = listView.value().slice();\n                var maxSelectedItems = that.options.maxSelectedItems;\n                var clearFilters = listView.bound() && listView.isFiltered();\n\n                if (value === undefined$1) {\n                    return oldValue;\n                }\n\n                that.persistTagList = false;\n                that.requireValueMapper(that.options, value);\n\n                value = that._normalizeValues(value);\n\n                if (maxSelectedItems !== null && value.length > maxSelectedItems) {\n                    value = value.slice(0, maxSelectedItems);\n                }\n\n                if (clearFilters) {\n                    that._clearFilter();\n                }\n\n                listView.value(value);\n                that._old = that._valueBeforeCascade = value.slice(); //get a new array reference\n\n                if (!clearFilters) {\n                    that._fetchData();\n                }\n\n                that._toggleCloseVisibility();\n            },\n\n            _preselect: function(data, value) {\n                var that = this;\n\n                if (!isArray(data) && !(data instanceof kendo.data.ObservableArray)) {\n                    data = [data];\n                }\n\n                if ($.isPlainObject(data[0]) || data[0] instanceof kendo.data.ObservableObject || !that.options.dataValueField) {\n                    that.dataSource.data(data);\n                    that.value(value || that._initialValues);\n                    that._retrieveData = true;\n                }\n            },\n\n            _setOption: function(value, selected) {\n                var option = this.element[0].children[this._optionsMap[value]];\n\n                if (option) {\n                    option.selected = selected;\n                }\n            },\n\n            _fetchData: function() {\n                var that = this;\n                var hasItems = !!that.dataSource.view().length;\n                var isEmptyArray = that.listView.value().length === 0;\n\n                if (isEmptyArray || that._request) {\n                    return;\n                }\n\n                if (that._retrieveData || (!that._fetch && !hasItems)) {\n                    that._fetch = true;\n                    that._retrieveData = false;\n                    that.dataSource.read().done(function() {\n                        that._fetch = false;\n                    });\n                }\n            },\n\n            _isBound: function() {\n                return this.listView.bound() && !this._retrieveData;\n            },\n\n            _dataSource: function() {\n                var that = this,\n                    element = that.element,\n                    options = that.options,\n                    dataSource = options.dataSource || {};\n\n                dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;\n\n                dataSource.select = element;\n                dataSource.fields = [{ field: options.dataTextField },\n                                     { field: options.dataValueField }];\n\n                if (that.dataSource && that._refreshHandler) {\n                    that._unbindDataSource();\n                } else {\n                    that._progressHandler = that._showBusy;\n                    that._endRequestHandler = that._hideBusy;\n                    that._errorHandler = function() {\n                        that._hideBusy();\n                    };\n                }\n\n                that.dataSource = kendo.data.DataSource.create(dataSource)\n                                       .bind(PROGRESS, that._progressHandler)\n                                       .bind(\"requestEnd\", that._endRequestHandler)\n                                       .bind(\"error\", that._errorHandler);\n            },\n\n            _reset: function() {\n                var that = this,\n                    element = that.element,\n                    formId = element.attr(\"form\"),\n                    form = formId ? $(\"#\" + formId) : element.closest(\"form\");\n\n                if (form[0]) {\n                    that._resetHandler = function() {\n                        setTimeout(function() {\n                            that.value(that._initialValues);\n                            that._placeholder();\n                        });\n                    };\n\n                    that._form = form.on(\"reset\", that._resetHandler);\n                }\n            },\n\n            _initValue: function() {\n                var value = this.options.value || this.element.val();\n\n                this._old = this._initialValues = this._normalizeValues(value);\n            },\n\n            _normalizeValues: function(value) {\n                var that = this;\n\n                if (value === null) {\n                    value = [];\n                } else if (value && $.isPlainObject(value)) {\n                    value = [that._value(value)];\n                } else if (value && $.isPlainObject(value[0])) {\n                    value = $.map(value, function(dataItem) { return that._value(dataItem); });\n                } else if (!isArray(value) && !(value instanceof ObservableArray)) {\n                    value = [value];\n                } else if (isArray(value)) {\n                    value = value.slice();\n                }\n\n                return value;\n            },\n\n            _change: function() {\n                var that = this,\n                    value = that.value();\n\n                if (!compare(value, that._old)) {\n                    that._old = value.slice();\n\n                    that.trigger(CHANGE);\n\n                    // trigger the DOM change event so any subscriber gets notified\n                    that.element.trigger(CHANGE);\n                }\n                that.popup.position();\n\n                that._toggleCloseVisibility();\n            },\n\n            _click: function(e) {\n                var that = this;\n                var item = e.item;\n\n                e.preventDefault();\n\n                that._select(item).done(function() {\n                    that._activeItem = item;\n                    that._change();\n                    that._close();\n                });\n            },\n\n            _getActiveItem: function() {\n                return this._activeItem || $(this.listView.items()[this._getSelectedIndices().length - 1]) || this.listView.focus();\n            },\n\n            _getSelectedIndices: function() {\n                return this.listView._selectedIndices || this.listView._selectedIndexes;\n            },\n\n            _keydown: function(e) {\n                var that = this;\n                var key = e.keyCode;\n                var tag = that._currentTag;\n                var listView = that.listView;\n                var hasValue = that.input.val();\n                var isRtl = kendo.support.isRtl(that.wrapper);\n                var visible = that.popup.visible();\n                var dir = 0;\n                var activeItemIdx;\n                var handled = false;\n\n                if (key !== keys.ENTER) {\n                    this._multipleSelection = false;\n                }\n\n                if (key === keys.DOWN) {\n                    e.preventDefault();\n\n                    if (!visible) {\n                        that.open();\n\n                        if (!listView.focus()) {\n                            listView.focusFirst();\n                        }\n                        e.stopPropagation();\n                        return;\n                    }\n\n                    if (listView.focus()) {\n                        if (!that._activeItem && e.shiftKey) {\n                            that._activeItem = listView.focus();\n                            dir = -1;\n                        }\n                        activeItemIdx = listView.getElementIndex(that._getActiveItem().first());\n\n                        listView.focusNext();\n                        if (!listView.focus()) {\n                            listView.focusLast();\n                        } else {\n                            if (e.shiftKey && !that.options.virtual) {\n                                this._multipleSelection = true;\n                                that._selectRange(activeItemIdx, listView.getElementIndex(listView.focus().first()) + dir);\n                            }\n                        }\n                    } else {\n                        listView.focusFirst();\n                    }\n                    handled = true;\n\n                } else if (key === keys.UP) {\n                    if (visible) {\n                        if (!that._activeItem && e.shiftKey) {\n                            that._activeItem = listView.focus();\n                            dir = 1;\n                        }\n                        activeItemIdx = listView.getElementIndex(that._getActiveItem().first());\n                        listView.focusPrev();\n                        if (!listView.focus()) {\n                            that.close();\n                        } else {\n                            if (e.shiftKey && !that.options.virtual) {\n                                this._multipleSelection = true;\n                                that._selectRange(activeItemIdx, listView.getElementIndex(listView.focus().first()) + dir);\n                            }\n                        }\n                    }\n                    handled = true;\n                    e.preventDefault();\n                } else if ((key === keys.LEFT && !isRtl) || (key === keys.RIGHT && isRtl)) {\n                    if (!hasValue) {\n                        tag = tag ? tag.prev(CHIP) : that.tagList.children(CHIP).last();\n                        if (tag[0]) {\n                            that.currentTag(tag);\n                        }\n                    }\n                    handled = true;\n                } else if ((key === keys.RIGHT && !isRtl) || (key === keys.LEFT && isRtl)) {\n                    if (!hasValue && tag) {\n                        tag = tag.next(CHIP);\n                        that.currentTag(tag[0] ? tag : null);\n                    }\n                    handled = true;\n                } else if (e.ctrlKey && !e.altKey && key === keys.A && visible && !that.options.virtual) {\n                    this._multipleSelection = true;\n                    if (this._getSelectedIndices().length === listView.items().length) {\n                        that._activeItem = null;\n                    }\n\n                    if (listView.items().length) {\n                        that._selectRange(0, listView.items().length - 1);\n                    }\n                    handled = true;\n                } else if (key === keys.ENTER && visible) {\n                    if (!listView.focus()) {\n                        e.stopPropagation();\n                        return;\n                    }\n\n                    e.preventDefault();\n\n                    if (this._multipleSelection) {\n                        this._multipleSelection = false;\n                         if (listView.focus().hasClass(SELECTEDCLASS)) {\n                            that._close();\n                            e.stopPropagation();\n                            return;\n                        }\n                    }\n\n                    that._select(listView.focus()).done(function() {\n                        that._change();\n                        that._close();\n                    });\n                    handled = true;\n                } else if (key === keys.SPACEBAR && e.ctrlKey && visible) {\n                    if (that._activeItem && listView.focus() && listView.focus()[0] === that._activeItem[0]) {\n                        that._activeItem = null;\n                    }\n                    if (!$(listView.focus()).hasClass(SELECTEDCLASS)) {\n                        that._activeItem = listView.focus();\n                    }\n                    that._select(listView.focus()).done(function() {\n                        that._change();\n                    });\n                    handled = true;\n                    e.preventDefault();\n                } else if (key === keys.SPACEBAR && e.shiftKey && visible && !that.options.virtual) {\n                    var activeIndex = listView.getElementIndex(that._getActiveItem());\n                    var currentIndex = listView.getElementIndex(listView.focus());\n\n                    if (activeIndex !== undefined$1 && currentIndex !== undefined$1) {\n                        that._selectRange(activeIndex, currentIndex);\n                    }\n                    handled = true;\n                    e.preventDefault();\n                } else if (key === keys.ESC) {\n                    if (visible) {\n                        e.preventDefault();\n                    } else {\n                        that.tagList.children(CHIP).each(function(index, tag) {\n                            that._removeTag($(tag), false);\n                        });\n                        that._change();\n                    }\n\n                    that.close();\n                    handled = true;\n                } else if (key === keys.HOME) {\n                    if (visible) {\n                        if (!listView.focus()) {\n                            that.close();\n                        } else {\n                            if (e.ctrlKey && e.shiftKey && !that.options.virtual) {\n                                that._selectRange(listView.getElementIndex(listView.focus()[0]), 0);\n                            }\n                            listView.focusFirst();\n                        }\n                    } else if (!hasValue) {\n                        tag = that.tagList.children(CHIP).first()[0];\n\n                        if (tag) {\n                            that.currentTag($(tag));\n                        }\n                    }\n                    handled = true;\n                } else if (key === keys.END) {\n                    if (visible) {\n                        if (!listView.focus()) {\n                            that.close();\n                        } else {\n                            if (e.ctrlKey && e.shiftKey && !that.options.virtual) {\n                                that._selectRange(\n                                    listView.getElementIndex(listView.focus()[0]),\n                                    listView.element.children().length - 1\n                                );\n                            }\n                            listView.focusLast();\n                        }\n                    } else if (!hasValue) {\n                        tag = that.tagList.children(CHIP).last()[0];\n\n                        if (tag) {\n                            that.currentTag($(tag));\n                        }\n                    }\n                    handled = true;\n                } else if ((key === keys.DELETE || key === keys.BACKSPACE) && !hasValue) {\n                    that._state = ACCEPT;\n\n                    if (that.options.tagMode === \"single\") {\n                        that._clearSingleTagValue();\n\n                        that._change();\n                        that._close();\n                        e.stopPropagation();\n                        return;\n                    }\n\n                    if (key === keys.BACKSPACE && !tag) {\n                        tag = that.tagList.children(CHIP).last();\n                    }\n\n                    if (tag && tag[0]) {\n                        that._removeTag(tag, true);\n                    }\n                    handled = true;\n                } else if (that.popup.visible() && (key === keys.PAGEDOWN || key === keys.PAGEUP)) {\n                    e.preventDefault();\n\n                    var direction = key === keys.PAGEDOWN ? 1 : -1;\n                    listView.scrollWith(direction * listView.screenHeight());\n                    handled = true;\n                } else {\n                    clearTimeout(that._typingTimeout);\n                    that._search();\n                    handled = true;\n                }\n\n                if (handled) {\n                    e.stopPropagation();\n                }\n            },\n\n            _placeholder: function(show, skipCaret) {\n                var that = this;\n                var input = that.input;\n                var active = activeElement();\n                var placeholder = that.options.placeholder;\n                var inputValue = input.val();\n                var isActive = input[0] === active;\n                var caretPos = inputValue.length;\n\n                if (!isActive || that.options.autoClose || inputValue === placeholder) {\n                    caretPos = 0;\n                    inputValue = \"\";\n                }\n\n                if (show === undefined$1) {\n                    show = false;\n                    if (input[0] !== active) {\n                        show = !that.listView.selectedDataItems()[0];\n                    }\n                }\n\n                that._prev = inputValue;\n                input.toggleClass(\"k-readonly\", show).val(show ? placeholder : inputValue);\n\n                if (isActive && !skipCaret) {\n                    kendo.caret(input[0], caretPos, caretPos);\n                }\n            },\n\n            _option: function(dataValue, dataText, selected) {\n                var option = \"<option\";\n\n                if (dataValue !== undefined$1) {\n                    dataValue += \"\";\n\n                    if (dataValue.indexOf('\"') !== -1) {\n                        dataValue = dataValue.replace(quotRegExp, \"&quot;\");\n                    }\n\n                    option += ' value=\"' + dataValue + '\"';\n                }\n\n                if (selected) {\n                    option += ' selected';\n                }\n\n                option += \">\";\n\n                if (dataText !== undefined$1) {\n                    option += kendo.htmlEncode(dataText);\n                }\n\n                return option += \"</option>\";\n            },\n\n            _render: function(data) {\n                var selectedItems = this.listView.selectedDataItems();\n                var values = this.listView.value();\n                var length = data.length;\n                var selectedIndex;\n                var options = \"\";\n                var dataItem;\n                var value;\n                var idx;\n\n                if (values.length !== selectedItems.length) {\n                    selectedItems = this._buildSelectedItems(values);\n                }\n\n                var custom = {};\n                var optionsMap = {};\n\n                for (idx = 0; idx < length; idx++) {\n                    dataItem = data[idx];\n                    value = this._value(dataItem);\n\n                    selectedIndex = this._selectedItemIndex(value, selectedItems);\n                    if (selectedIndex !== -1) {\n                        selectedItems.splice(selectedIndex, 1);\n                    }\n\n                    optionsMap[value] = idx;\n                    options += this._option(value, this._text(dataItem), selectedIndex !== -1);\n                }\n\n                if (selectedItems.length) {\n                    for (idx = 0; idx < selectedItems.length; idx++) {\n                        dataItem = selectedItems[idx];\n\n                        value = this._value(dataItem);\n                        custom[value] = length;\n                        optionsMap[value] = length;\n\n                        length += 1;\n                        options += this._option(value, this._text(dataItem), true);\n                    }\n                }\n\n                this._customOptions = custom;\n                this._optionsMap = optionsMap;\n\n                this.element.html(options);\n            },\n\n            _buildSelectedItems: function(values) {\n                var valueField = this.options.dataValueField;\n                var textField = this.options.dataTextField;\n                var result = [];\n                var item;\n\n                for (var idx = 0; idx < values.length; idx++) {\n                    item = {};\n                    item[valueField] = values[idx];\n                    item[textField] = values[idx];\n\n                    result.push(item);\n                }\n\n                return result;\n            },\n\n            _selectedItemIndex: function(value, selectedItems) {\n                var valueGetter = this._value;\n                var idx = 0;\n\n                for (; idx < selectedItems.length; idx++) {\n                    if (value === valueGetter(selectedItems[idx])) {\n                        return idx;\n                    }\n                }\n\n                return -1;\n            },\n\n            _search: function(noDelay) {\n                let that = this;\n\n                // noDelay may come as an even object, that is why an explicit === true check is needed.\n                if (noDelay === true) {\n                    that._performSearch();\n                    return;\n                }\n\n                clearTimeout(that._typingTimeout);\n\n                that._typingTimeout = setTimeout(function() {\n                    that._performSearch();\n                }, that.options.delay);\n            },\n\n            _performSearch: function() {\n                var that = this,\n                    value = that._inputValue();\n\n                if (that._prev !== value) {\n                    that._prev = value;\n                    that.search(value);\n                    that._toggleCloseVisibility();\n                }\n            },\n\n            _toggleCloseVisibility: function() {\n                if (this.value().length || (this.input.val() && this.input.val() !== this.options.placeholder)) {\n                    this._showClear();\n                } else {\n                    this._hideClear();\n                }\n            },\n\n            _allowOpening: function() {\n                return this._allowSelection() && List.fn._allowOpening.call(this);\n            },\n\n            _allowSelection: function() {\n                var max = this.options.maxSelectedItems;\n                return max === null || max > this.listView.value().length;\n            },\n\n            updatePersistTagList: function(added, removed) {\n                if (this.persistTagList.added &&\n                    this.persistTagList.added.length === removed.length &&\n                    this.persistTagList.removed &&\n                    this.persistTagList.removed.length === added.length) {\n                        this.persistTagList = false;\n                 } else {\n                     this.listView._removedAddedIndexes = this._old.slice();\n                     this.persistTagList = {\n                         added: added,\n                         removed: removed\n                     };\n                 }\n            },\n\n            _selectValue: function(added, removed) {\n                var that = this;\n                var total = that.dataSource.total();\n                var tagList = that.tagList;\n                var getter = that._value;\n                var removedItem;\n                var addedItem;\n                var idx;\n\n                if (this.persistTagList) {\n                    this.updatePersistTagList(added, removed);\n                    that._refreshTagListAria();\n\n                    return;\n                }\n\n                if (that.options.tagMode === \"multiple\") {\n                    for (idx = removed.length - 1; idx > -1; idx--) {\n                        removedItem = removed[idx];\n\n                        if (tagList.children(CHIP).length) {\n                            tagList[0].removeChild(tagList[0].children[removedItem.position]);\n                            that._setOption(getter(removedItem.dataItem), false);\n                        }\n                    }\n\n                    for (idx = 0; idx < added.length; idx++) {\n                        addedItem = added[idx];\n\n                        that.tagList.append(that.tagTemplate(addedItem.dataItem));\n\n                        that._setOption(getter(addedItem.dataItem), true);\n                    }\n\n                    kendo.applyStylesFromKendoAttributes(that.tagList, [\"background-color\"]);\n                } else {\n                    if (!that._maxTotal || that._maxTotal < total) {\n                        that._maxTotal = total;\n                    }\n\n                    this._updateTagListHTML();\n\n                    for (idx = removed.length - 1; idx > -1; idx--) {\n                        that._setOption(getter(removed[idx].dataItem), false);\n                    }\n\n                    for (idx = 0; idx < added.length; idx++) {\n                        that._setOption(getter(added[idx].dataItem), true);\n                    }\n                }\n\n                that._refreshTagListAria();\n                that._refreshFloatingLabel();\n\n                that._placeholder();\n            },\n\n            _refreshTagListAria: function() {\n                var that = this;\n                html.renderChipList(that.tagList, $.extend({ selectable: that.value().length === 0 ? \"none\" : \"multiple\" }, that.options));\n            },\n\n            _updateTagListHTML: function() {\n                var that = this;\n                var values = that.value();\n                var total = that.dataSource.total();\n                var tagList = that.tagList;\n\n                tagList.children(CHIP).each(function(index, tag) {\n                    $(tag).remove();\n                });\n\n                if (values.length) {\n                    that.tagList.append(that.tagTemplate({\n                        values: values,\n                        dataItems: that.dataItems(),\n                        maxTotal: that._maxTotal,\n                        currentTotal: total\n                    }));\n\n                    kendo.applyStylesFromKendoAttributes(that.tagList, [\"background-color\"]);\n                }\n\n                that._refreshTagListAria();\n            },\n\n            _select: function(candidate) {\n                var resolved = $.Deferred().resolve();\n\n                if (!candidate) {\n                    return resolved;\n                }\n\n                var that = this;\n                var listView = that.listView;\n                var dataItem = listView.dataItemByIndex(listView.getElementIndex(candidate));\n                var isSelected = candidate.hasClass(\"k-selected\");\n\n                if (that._state === REBIND) {\n                    that._state = \"\";\n                }\n\n                if (!that._allowSelection() && !isSelected) {\n                    return resolved;\n                }\n\n                if (that.trigger(isSelected ? DESELECT : SELECT, { dataItem: dataItem, item: candidate })) {\n                    that._close();\n                    return resolved;\n                }\n\n                that.persistTagList = false;\n                return listView.select(candidate).done(function() {\n                    that._placeholder();\n\n                    if (that._state === FILTER) {\n                        that._state = ACCEPT;\n                        listView.skipUpdate(true);\n                    }\n                });\n            },\n\n            _selectIndices: function(indices) {\n                let listView = this.listView;\n                let that = this;\n\n                listView.select(indices).done(function() {\n                    indices.forEach(function(index) {\n                        var dataItem = listView.dataItemByIndex(index);\n                        var candidate = listView.element.children()[index];\n                        var isSelected = $(candidate).hasClass(\"k-selected\");\n\n                        that.trigger(isSelected ? SELECT : DESELECT, { dataItem: dataItem, item: $(candidate) });\n                    });\n                    that._change();\n                });\n            },\n\n            _selectRange: function(startIndex, endIndex) {\n                var that = this;\n                var maxSelectedItems = this.options.maxSelectedItems;\n                var indices = this._getSelectedIndices().slice();\n                var indicesToSelect = [];\n                var i;\n\n                if (indices.length - 1 === endIndex - startIndex) {\n                    return that._selectIndices(indices);\n                }\n\n                if (startIndex < endIndex) {\n                    for (i = startIndex; i <= endIndex; i++) {\n                        indicesToSelect.push(i);\n                    }\n                } else {\n                    for (i = startIndex; i >= endIndex; i--) {\n                        indicesToSelect.push(i);\n                    }\n                }\n\n                if (maxSelectedItems !== null && indicesToSelect.length > maxSelectedItems) {\n                    indicesToSelect = indicesToSelect.slice(0, maxSelectedItems);\n                }\n\n                for (i = 0; i < indicesToSelect.length; i++) {\n                    var index = indicesToSelect[i];\n\n                    if (this._getSelectedIndices().indexOf(index) == -1) {\n                        indices.push(index);\n                    } else {\n                        indices.splice(indices.indexOf(index), 1);\n                    }\n                }\n\n                if (!indices.length) {\n                    return;\n                }\n\n                that.persistTagList = false;\n                return that._selectIndices(indices);\n            },\n\n            _input: function() {\n                var that = this;\n                var element = that.element;\n                var accessKey = element[0].accessKey;\n                var input = that._inputValuesContainer.children(\"input.k-input-inner\");\n\n                if (!input[0]) {\n                    input = $('<input class=\"k-input-inner\" />').appendTo(that._inputValuesContainer);\n                }\n\n                element.removeAttr(\"accesskey\");\n                input.attr(\"data-validate\", \"false\");\n                input.attr(\"inputmode\", that.options.inputMode);\n\n                that._focused = that.input = input.attr({\n                    \"autocomplete\": AUTOCOMPLETEVALUE,\n                    \"title\": element[0].title\n                });\n\n                if (accessKey) {\n                    that._focused.attr(\"accesskey\", accessKey);\n                }\n            },\n\n            _inputValuesContainer: function() {\n                var that = this,\n                    inputValuesContainer = that.wrapper.children(\".k-input-values\");\n\n                if (!inputValuesContainer[0]) {\n                    inputValuesContainer = $('<div class=\"k-input-values\"></div>').appendTo(that.wrapper);\n                }\n\n                that._inputValuesContainer = inputValuesContainer;\n            },\n\n            _tagList: function() {\n                var that = this,\n                    options = that.options,\n                    tagList = that._inputValuesContainer.children(\".k-chip-list\");\n\n                if (!tagList[0]) {\n                    tagList = $(html.renderChipList('<div unselectable=\"on\" class=\"k-selection-multiple\" />', $.extend({ selectable: \"none\" }, options))).appendTo(that._inputValuesContainer);\n                }\n\n                that.tagList = tagList;\n            },\n\n            _tagTemplate: function() {\n                var that = this;\n                var options = that.options;\n                var tagTemplate = options.tagTemplate;\n                var hasDataSource = options.dataSource;\n                var isMultiple = options.tagMode === \"multiple\";\n                var singleTag = options.messages.singleTag;\n                var defaultTemplate;\n                var multipleTemplateFunc;\n                var singleTemplateFunc;\n\n                if (that.element[0].length && !hasDataSource) {\n                    options.dataTextField = options.dataTextField || \"text\";\n                    options.dataValueField = options.dataValueField || \"value\";\n                }\n\n                multipleTemplateFunc = data => encode(kendo.getter(options.dataTextField)(data));\n                singleTemplateFunc = ({ values }) => `${values.length} ${encode(singleTag)}`;\n\n                defaultTemplate = isMultiple ? multipleTemplateFunc : singleTemplateFunc;\n\n                that.tagTextTemplate = tagTemplate = tagTemplate ? kendo.template(tagTemplate) : defaultTemplate;\n\n                that.tagTemplate = function(data) {\n                    return html.renderChip('<span unselectable=\"on\">' +\n                    '</span>', $.extend({}, options, {\n                            fillMode: \"solid\",\n                            rounded: \"medium\",\n                            enabled: true,\n                            themeColor: \"base\",\n                            text: tagTemplate(data),\n                            attr: {\n                                unselectable: \"on\",\n                                \"aria-selected\": true,\n                                role: \"option\",\n                                \"aria-keyshortcuts\": isMultiple ? \"Enter Delete\" : \"Enter\"\n                            },\n                            removable: isMultiple,\n                            removableAttr: {\n                                unselectable: \"on\",\n                                \"aria-hidden\": true,\n                                \"aria-label\": that.options.messages.deleteTag,\n                                title: that.options.messages.deleteTag\n                            },\n                            icon: !isMultiple ? \"caret-alt-down\" : \"\",\n                            iconAttr: {\n                                unselectable: \"on\",\n                                \"aria-hidden\": true,\n                                \"aria-label\": 'open'\n                            }\n                        })\n                    );\n                };\n            },\n\n            _popup: function() {\n                List.fn._popup.call(this);\n                this.popup.element.addClass(\"k-multiselect-popup\");\n            },\n\n            _clearButton: function() {\n                List.fn._clearButton.call(this);\n\n                if (this.options.clearButton) {\n                    this._clear.insertAfter(this._inputValuesContainer);\n                }\n            },\n\n            _arrowButton: function() {\n                var arrowTitle = encode(this.options.messages.downArrow),\n                    arrow = $(html.renderButton('<button type=\"button\" aria-label=\"' + arrowTitle + '\" class=\"k-input-button\"></button>', $.extend({}, this.options, {\n                        icon: \"caret-alt-down\",\n                        rounded: null\n                    })));\n\n                if (this._arrow) {\n                    this._arrow.remove();\n                    this._arrow = null;\n                }\n\n                if (this.options.downArrow) {\n                    this._arrow = arrow.attr({\n                        \"tabIndex\": -1\n                    });\n\n                    this._arrow.appendTo(this.wrapper);\n                }\n            },\n\n            _textContainer: function() {\n                var computedStyles = kendo.getComputedStyles(this.input[0], styles);\n\n                computedStyles.position = \"absolute\";\n                computedStyles.visibility = \"hidden\";\n                computedStyles.top = -3333;\n                computedStyles.left = -3333;\n\n                this._span = $(\"<span/>\").css(computedStyles).appendTo(this.wrapper);\n            },\n\n            _wrapper: function() {\n                var that = this,\n                    element = that.element,\n                    wrapper = element.parent(\"span.k-multiselect\");\n\n                if (!wrapper[0]) {\n                    wrapper = element.wrap('<span class=\"k-multiselect k-input\" unselectable=\"on\" />').parent();\n                    wrapper[0].style.cssText = element[0].style.cssText;\n                }\n\n                that.wrapper = wrapper\n                                .addClass(element[0].className)\n                                .removeClass('input-validation-error').css(\"display\", \"\");\n            },\n\n            _closeHandler: function(e) {\n                if (this.trigger(CLOSE)) {\n                    e.preventDefault();\n                } else {\n                    this.input.attr(ARIA_EXPANDED, false);\n                    this.ul.attr(ARIA_HIDDEN, true);\n                }\n            },\n\n            _openHandler: function(e) {\n                this._adjustListWidth();\n\n                if (this.trigger(OPEN)) {\n                    e.preventDefault();\n                } else {\n                    this.input.attr(ARIA_EXPANDED, true);\n                    this.ul.attr(ARIA_HIDDEN, false);\n                }\n            }\n        });\n\n        function compare(a, b) {\n            var length;\n\n            if ((a === null && b !== null) || (a !== null && b === null)) {\n                return false;\n            }\n\n            length = a.length;\n            if (length !== b.length) {\n                return false;\n            }\n\n            while (length--) {\n                if (a[length] !== b[length]) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        ui.plugin(MultiSelect);\n\n        kendo.cssProperties.registerPrefix(\"MultiSelect\", \"k-input-\");\n\n        kendo.cssProperties.registerValues(\"MultiSelect\", [{\n            prop: \"rounded\",\n            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}