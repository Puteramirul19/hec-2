{"version":3,"sources":["raw-js/kendo.aiprompt.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Aiprompt","this","$","window","Widget","ui","extend","PROMPT_RESPONSE","FOCUS","cssClasses","defaultViews","prompt","type","name","buttonIcon","output","commands","custom","AIPrompt","init","element","options","that","fn","call","views","length","promptCommands","push","promptOutputs","_initLayout","_initViews","_initToolbar","activeView","service","transport","data","AiTransport","success","_serviceSuccess","bind","requestStart","progress","notify","enabled","toolbarItems","encodedPromptOutputs","popup","messages","promptView","outputView","commandsView","customView","promptPlaceholder","promptSuggestions","generateOutput","outputTitle","outputRetryTitle","copyOutput","retryGeneration","ratePositive","rateNegative","showOutputRating","suffixTemplate","events","outputViewIndex","viewsArray","findIndex","v","trigger","addPromptOutput","_initializeView","view","viewConfig","getter","Error","showOutputSubtitleTooltip","promptSuggestionItemTemplate","_unbindView","destroy","i","l","isSettings","defaultView","buttonText","Object","assign","title","index","getViews","undefined","_activeViewIndex","Number","isInteger","_selectedView","render","_updateToolbarState","toolItem","toolbar","_getAllItems","_resetTabIndex","id","guid","unshift","renderPromptOutput","activeToolIndex","find","each","elm","toggle","header","addClass","append","popupWrapper","closest","_getViewTools","map","text","icon","fillMode","themeColor","rounded","togglable","attributes","items","Array","isArray","closeButton","item","toolbarEl","kendoToolBar","resizable","concat","appendTo","focus","setOptions","empty","deepExtend","off","plugin","jQuery","kendo$1","__meta__","category","description","depends","default","defineProperty","value"],"mappings":"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","file":"kendo.aiprompt.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.core.js'), require('kendo.data.js'), require('kendo.icons.js'), require('kendo.textarea.js'), require('kendo.button.js'), require('kendo.toolbar.js'), require('kendo.aiprompt.views.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.core', 'kendo.data', 'kendo.icons', 'kendo.textarea', 'kendo.button', 'kendo.toolbar', 'kendo.aiprompt.views'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Aiprompt = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n        id: \"aiprompt\",\n        name: \"AIPrompt\",\n        category: \"web\",\n        description: \"The AIPrompt component simplifies the incorporation of external AI services into apps.\",\n        depends: [\"core\", \"icons\", \"textarea\", \"button\", \"toolbar\", \"panelbar\", \"data\", \"aiprompt.views\"],\n    };\n\n    (function($) {\n        let kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            NS = \".kendoAIPrompt\",\n            ui = kendo.ui,\n            extend = $.extend,\n\n            COMMAND_EXECUTE = \"commandExecute\",\n            PROMPT_REQUEST = \"promptRequest\",\n            PROMPT_RESPONSE = \"promptResponse\",\n            OUTPUT_RATING_CHANGE = \"outputRatingChange\",\n            OUTPUT_COPY = \"outputCopy\",\n            OUTPUT_VIEW = \"output\",\n\n            FOCUS = \"focus\",\n            KDISABLED = \"k-disabled\";\n\n        let cssClasses = {\n            menuButton: \"k-menu-button\",\n            aIPrompt: \"k-prompt\"\n        };\n\n        let defaultViews = {\n            prompt: {\n                type: \"kendo.ui.AIPromptPromptView\",\n                name: \"prompt\",\n                buttonIcon: \"sparkles\",\n            },\n            output: {\n                type: \"kendo.ui.AIPromptOutputView\",\n                name: \"output\",\n                buttonIcon: \"comment\",\n            },\n            commands: {\n                type: \"kendo.ui.AIPromptCommandsView\",\n                name: \"commands\",\n                buttonIcon: \"more-horizontal\",\n            },\n            custom: {\n                type: \"kendo.ui.AIPromptCustomView\",\n                name: \"custom\",\n            }\n        };\n\n        let AIPrompt = Widget.extend({\n            init: function(element, options) {\n                let that = this;\n                options = options || {};\n\n                Widget.fn.init.call(that, element, options);\n\n                if (that.options.views.length == 0) {\n                    that.options.views = [\"prompt\", \"output\"];\n\n                    if (this.options.promptCommands && this.options.promptCommands.length) {\n                        this.options.views.push(\"commands\");\n                    }\n                }\n\n                that.promptOutputs = that.options.promptOutputs || [];\n                that._initLayout();\n                that._initViews();\n                that._initToolbar();\n                that.activeView(that.options.activeView);\n\n                if (that.options.service) {\n                    that.transport = new kendo.data.AiTransport({\n                        service: that.options.service,\n                        success: that._serviceSuccess.bind(that),\n                        requestStart: () => kendo.ui.progress(that.element, true)\n                    });\n                }\n\n                kendo.notify(that);\n            },\n\n            options: {\n                name: \"AIPrompt\",\n                enabled: true,\n                toolbarItems: [],\n                promptOutputs: [],\n                encodedPromptOutputs: true,\n                activeView: 0,\n                views: [],\n                popup: null,\n                messages: {\n                    promptView: \"Ask AI\",\n                    outputView: \"Output\",\n                    commandsView: \"\",\n                    customView: \"Custom View\",\n                    promptPlaceholder: \"Ask or generate content with AI\",\n                    promptSuggestions: \"Prompt Suggestions\",\n                    generateOutput: \"Generate\",\n                    outputTitle: \"Generated with AI\",\n                    outputRetryTitle: \"Generated with AI\",\n                    copyOutput: \"Copy\",\n                    retryGeneration: \"Retry\",\n                    ratePositive: \"\",\n                    rateNegative: \"\"\n                },\n                showOutputRating: true,\n                service: null,\n                suffixTemplate: null,\n            },\n\n            events: [\n                COMMAND_EXECUTE,\n                PROMPT_REQUEST,\n                PROMPT_RESPONSE,\n                OUTPUT_RATING_CHANGE,\n                OUTPUT_COPY\n            ],\n\n            _serviceSuccess: function(output) {\n                const that = this;\n                const outputViewIndex = that.viewsArray.findIndex(v => v.name === OUTPUT_VIEW);\n\n                output.activeView = outputViewIndex;\n                that.trigger(PROMPT_RESPONSE, { output });\n                that.addPromptOutput(output);\n                that.activeView(output.activeView);\n\n                kendo.ui.progress(that.element, false);\n            },\n\n            _initializeView: function(name) {\n                let viewConfig = this.views[name];\n                let view;\n                if (viewConfig) {\n                    let type = viewConfig.type;\n\n                    if (typeof type === \"string\") {\n                        type = kendo.getter(viewConfig.type)(window);\n                    }\n\n                    if (type) {\n                        view = new type(this.element, extend(true, {\n                            promptSuggestions: this.options.promptSuggestions,\n                            promptCommands: this.options.promptCommands,\n                            promptOutputs: this.promptOutputs,\n                            showOutputRating: this.options.showOutputRating,\n                            messages: this.options.messages,\n                            showOutputSubtitleTooltip: this.options.showOutputSubtitleTooltip,\n                            encodedPromptOutputs: this.options.encodedPromptOutputs,\n                            promptSuggestionItemTemplate: this.options.promptSuggestionItemTemplate,\n                            service: this.options.service,\n                        },\n                            viewConfig\n                        ));\n                    } else {\n                        throw new Error(\"There is no such view\");\n                    }\n                }\n\n                return view;\n            },\n\n            _unbindView: function(view) {\n                if (view) {\n                    view.destroy();\n                }\n            },\n\n            _initViews: function() {\n                let that = this,\n                    options = that.options,\n                    views = options.views;\n\n                that.views = {};\n                that.viewsArray = [];\n\n                for (let i = 0, l = views.length; i < l; i++) {\n                    let view = views[i];\n                    let isSettings = typeof view === \"object\";\n                    let name = view;\n\n                    if (isSettings) {\n                        name = typeof view.type !== \"string\" ? view.name : view.type;\n                    }\n\n                    let defaultView = defaultViews[name];\n\n                    if (defaultView) {\n                        if (isSettings) {\n                            view.type = defaultView.type;\n                        }\n\n                        defaultView.buttonText = that.options.messages[`${name}View`];\n                    }\n\n                    view = Object.assign({ title: view.title, name, index: i }, defaultView, isSettings ? view : {});\n                    that.viewsArray.push(view);\n\n                    if (name) {\n                        that.views[name] = view;\n                    }\n                }\n            },\n\n            getViews: function() {\n                return this.viewsArray;\n            },\n\n            activeView: function(name) {\n                let that = this;\n                if (name === undefined) {\n                    return that._activeViewIndex;\n                }\n\n                if (Number.isInteger(name)) {\n                    name = that.viewsArray[name].name;\n                }\n\n                if (name && that.views[name]) {\n                    if (that._selectedView) {\n                        that._unbindView(that._selectedView);\n                    }\n\n                    that._selectedView = that._initializeView(name);\n                    that._activeViewIndex = that.viewsArray.findIndex(v => v.name === name);\n                    that._selectedView.render();\n\n                    that._updateToolbarState(that._activeViewIndex);\n\n                    let toolItem = $(that.toolbar._getAllItems()[that._activeViewIndex]);\n                    that.toolbar._resetTabIndex(toolItem);\n                    toolItem.trigger(FOCUS);\n                }\n            },\n\n            addPromptOutput: function(output) {\n                output.id = output.id || kendo.guid();\n                this.promptOutputs.unshift(output);\n\n                if (typeof this._selectedView.renderPromptOutput === \"function\") {\n                    return this._selectedView.renderPromptOutput(output);\n                }\n            },\n\n            _updateToolbarState: function(activeToolIndex) {\n                let toolbar = this.toolbar;\n                toolbar.element.find(\".k-toolbar-toggle-button\").each(function(index, elm) {\n                    toolbar.toggle($(elm), index == activeToolIndex);\n                });\n            },\n\n            _initLayout: function() {\n                let that = this,\n                    header = $(\"<div></div>\").addClass(\"k-prompt-header\");\n                that.header = header;\n                that.element.addClass(cssClasses.aIPrompt);\n                that.element.append(header);\n                const popupWrapper = that.element.closest('.k-popup');\n\n                if (popupWrapper.length) {\n                    $(popupWrapper).addClass('k-prompt-popup');\n                }\n            },\n\n            _getViewTools: function() {\n                let that = this;\n\n                return that.viewsArray.map(v => {\n                    if (v.name === 'commands') {\n                        if (v.buttonText) {\n                            v.title = v.buttonText;\n                        } else {\n                            v.title = \"More Actions\";\n                        }\n                    }\n\n                    return {\n                    type: \"button\",\n                    text: v.buttonText,\n                    icon: v.buttonIcon,\n                    fillMode: \"flat\",\n                    themeColor: v.themeColor || \"primary\",\n                    rounded: \"full\",\n                    togglable: true,\n                    attributes: { title: v.title },\n                    toggle: function() {\n                        that.activeView(v.name);\n                    }\n                };\n            });\n            },\n\n            _initToolbar: function() {\n                let that = this;\n                let items = that.options.toolbarItems;\n                items = Array.isArray(items) ? items : [items];\n                const closeButton = items.find(item => item.icon === 'x');\n\n                if (closeButton) {\n                    closeButton.themeColor = 'base';\n                }\n\n                let toolbarEl = $(\"<div></div>\").kendoToolBar({\n                    resizable: false,\n                    fillMode: \"flat\",\n                    items: that._getViewTools().concat(items)\n                }).appendTo(that.header);\n\n                that.toolbar = toolbarEl.data(\"kendoToolBar\");\n            },\n\n            focus: function() {\n                let that = this;\n                that.element.trigger(FOCUS);\n            },\n\n            setOptions: function(options) {\n                let that = this;\n\n                that.destroy();\n\n                $(that.element).empty();\n\n                kendo.deepExtend(that.options, options);\n                that.init(that.element, options);\n            },\n\n            destroy: function() {\n                let that = this;\n\n                that.toolbar?.destroy();\n                that._selectedView?.destroy();\n\n                that.element.off(NS);\n\n                Widget.fn.destroy.call(that);\n            }\n        });\n\n        ui.plugin(AIPrompt);\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}