{"version":3,"sources":["raw-js/kendo.dataviz.diagram.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","DatavizDiagram","Data","Draganddrop","Userevents","MobileScroller","DiagramCommonCmnChunk","this","kendo_data_js","kendo_draganddrop_js","kendo_userevents_js","kendo_mobile_scroller_js","kendo_diagramCommon_cmn_chunk_js","window","diagram","dataviz","deepExtend","init","element","ui","Utils","U","Range","R","Ticker","T","Point","f","Intersect","I","Geometry","e","Rect","d","Size","c","RectAlign","b","Matrix","a","MatrixVector","M","normalVariable","n","randomId","r","Dictionary","D","HashTable","H","Queue","Q","Set","S","Node","N","Link","L","Graph","G","PathDefiner","P","isFunction","drawing","Canvas","C","constructor","options","super","surface","Surface","create","translate","_translate","undefined","_viewBox","width","height","size","diffNumericOptions","y","Markers","x","Element","E","Scale","w","Translation","v","Rotation","u","Circle","t","Group","s","Rectangle","q","Path","p","Layout","o","Line","m","MarkerBase","l","ArrowMarker","A","CircleMarker","k","Polyline","j","CompositeTransform","i","TextBlock","h","Image","g","VisualBase","V","Cursors","z","CompositeUnit","af","TransformUnit","ae","PanUndoUnit","ad","AddShapeUnit","ac","AddConnectionUnit","ab","DeleteShapeUnit","aa","DeleteConnectionUnit","a9","ConnectionEditAdorner","a8","ConnectionTool","a7","ConnectorVisual","a6","UndoRedoService","a5","ResizingAdorner","a4","Selector","a3","ToolService","a2","ConnectorsAdorner","a1","LayoutUndoUnit","a0","ConnectionEditUnit","$","ToFrontUnit","_","ToBackUnit","Z","ConnectionRouterBase","Y","PolylineRouter","X","CascadingRouter","W","SelectionTool","O","ScrollerTool","K","PointerTool","J","ConnectionEditTool","F","RotateUnit","B","SpringLayout","al","TreeLayout","ak","GraphAdapter","aj","LayeredLayout","ai","LayoutBase","ah","LayoutState","ag","elementStyles","ownerDocument","defaultView","getComputedStyle","cache","getProp","prop","value","getPropertyValue","test","colorMix","curColor","style","color","toColor","diagramTheme","primaryBg","primaryContrast","normalTextColor","shapeDefaults","fill","content","connectorDefaults","stroke","hover","editable","resize","handles","selectable","connectionDefaults","selection","Widget","outerWidth","_outerWidth","outerHeight","_outerHeight","extend","HierarchicalDataSource","data","defined$1","util","defined","isPlainObject","DataSource","NS","CLICK","CHANGE","ERROR","BUTTON_TEMPLATE","className","icon","themeColor","text","html","renderButton","preventDefault","clearField","field","model","set","DefaultConnectors","am","defaultButtons","cancel","update","imageClass","an","kendoTemplateOptions","kendoTemplate","template","Diagram$1","userOptions","that","destroy","fn","call","theme","_initTheme","isEditable","connectionsDataSource","_isEditable","extendedOptions","_syncChanges","bind","_syncShapeChanges","_syncConnectionChanges","_removeConnectionDataItem","_removeShapeDataItem","_addConnection","_addShape","updateConnectionModel","updateShapeModel","cloneDataItem","connect","createToolBar","_createToolBar","destroyToolBar","_destroyToolBar","widget","au","events","forEach","eventName","sender","trigger","wrapper","scrollable","shapes","connections","_connectionsDataMap","_dataMap","_inactiveShapeItems","_copyOffset","_selectedItems","_clipboard","id","undoRedoService","toolService","_resizingAdorner","_connectorsAdorner","selector","_fetchFreshData","_createGlobalToolBar","_createOptionElements","zoom","canvas","draw","at","aq","dataSource","source","target","connection","dataItem","add","uid","redraw","updateModel","connected","addConnection","undoable","addShape","item","remove","items","undo","redo","select","deselect","toFront","toBack","bringIntoView","boundingBox","origin","layout","getShapeById","getConnectionByModelId","connectionResult","as","getConnectionByModelUid","copy","cut","alignShapes","direction","createShape","editor","end","index","view","length","createModel","shape","_createShape","insert","getByUid","edit","createConnection","_createConnection","exportVisual","exportDOMVisual","sync","Promise","all","_deferredConnectionUpdates","then","editModel","editorType","editors","cancelEdit","shapeEditors","shapeTemplate","connectionSelectorHandler","connectionSelector","from","to","connectionEditors","connectionTemplate","PopupEditor","_update","_cancel","type","_editArgs","ap","_getEditDataSource","cancelChanges","_destroyEditor","clear","saveEdit","syncChanges","_suspendModelRefresh","fromX","fromY","fromConnector","sourceConnector","name","toX","toY","toConnector","targetConnector","_resumeModelRefresh","bounds","_bounds","_toolBar","_popup","_destroyGlobalToolBar","documentToModel","point","documentToView","focus","getShapeByModelId","getShapeByModelUid","layerToModel","load","modelToDocument","modelToLayer","modelToView","pan","animate","paste","save","selectAll","selectArea","rect","setDataSource","_dataSource","autoBind","fetch","setConnectionsDataSource","_connectionDataSource","viewToDocument","viewToModel","viewport","themeOptions","themeName","toLowerCase","themes","SASS_THEMES","indexOf","addClass","removeClass","tools","toolBar","DiagramToolBar","click","_toolBarClick","modal","css","textAlign","prepend","_resize","preventClosing","singleToolBar","ar","push","popupZIndex","parseInt","closest","popupWidth","popupHeight","shapeBounds","minus","connectionBounds","scroller","scrollLeft","scrollTop","Math","max","showAt","one","hide","_setOptionsFromModel","result","container","_loadingShapes","_loadingConnections","dsOptions","ds","Array","isArray","_shapesRefreshHandler","unbind","_shapesRequestStartHandler","_shapesErrorHandler","_refreshShapes","_shapesRequestStart","_error","_treeDataSource","_connectionsRefreshHandler","_connectionsRequestStartHandler","_connectionsErrorHandler","_refreshConnections","_connectionsRequestStart","_connectionsError","action","_shouldRefresh","_removeShapes","_updateShapes","_syncShapes","refresh","_rebindShapesAndConnections","_addShapes","_addConnections","_redrawConnections","refreshConnections","dataMap","inactiveItems","inactiveItem","isNew","_addDataItem","activate","updateOptionsFromModel","dataItems","ao","_removeConnections","_updateConnections","_updateConnectors","Error","fields","_refreshHandler","_unbindDataSource","_refreshSource","_errorHandler","node","idx","dataBound","redrawVisual","_removeDataItems","_bindingRoots","_addDataItems","recursive","children","shift","_removeShapeConnections","_removeItem","hasChildren","loaded","close","ExportMixin","PDFMixin","Observable","_tools","createTools","appendTools","createPopup","append","kendoPopup","getKendoPopup","tool","buttons","kendoToolBar","resizable","getKendoToolBar","createTool","toolName","attributes","_setAttributes","open","newGroup","editTool","showText","deleteTool","rotateAnticlockwiseTool","_appendGroup","_rotateGroup","group","step","rotateClockwiseTool","createShapeTool","_createGroup","createConnectionTool","undoTool","_historyGroup","redoTool","attr","_getAttributes","eventData","elements","selectedElements","delete","toRemove","_triggerRemove","selectedElemens","rotateClockwise","angle","parseFloat","_rotate","rotateAnticlockwise","adorner","rotate","Editor","_getFields","_initContainer","createEditable","Editable","clearContainer","modelFields","find","empty","columns","draggable","title","visible","formContent","_renderTemplate","_renderFields","_renderButtons","Window","appendTo","userTriggered","_cancelClick","_attachButtonEvents","unescape","form","_createButton","_cancelClickHandler","on","_updateClickHandler","_updateClick","center","off","_editUpdateClickHandler","reader","textField","idField","kendoDropDownList","dataValueField","dataTextField","toJSON","optionLabel","valuePrimitive","Model","_defaultId","ObservableObject","plugin","Shape","Connection","Connector","ay","QuadNode","ax","QuadRoot","aw","ShapesQuadTree","av","jQuery","kendo$1","__meta__","category","description","depends","features","default","Object","defineProperty"],"mappings":"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","file":"kendo.dataviz.diagram.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.data.js'), require('kendo.draganddrop.js'), require('kendo.userevents.js'), require('kendo.mobile.scroller.js'), require('kendo.diagram-common.cmn.chunk.js'), require('kendo.drawing.js'), require('kendo.toolbar.js'), require('kendo.editable.js'), require('kendo.window.js'), require('kendo.dropdownlist.js'), require('kendo.dataviz.core.js'), require('kendo.dataviz.themes.js'), require('kendo.html.button.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.data', 'kendo.draganddrop', 'kendo.userevents', 'kendo.mobile.scroller', 'kendo.diagram-common.cmn.chunk', 'kendo.drawing', 'kendo.toolbar', 'kendo.editable', 'kendo.window', 'kendo.dropdownlist', 'kendo.dataviz.core', 'kendo.dataviz.themes', 'kendo.html.button'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.DatavizDiagram = {}), global.kendo._globals.Data, global.kendo._globals.Draganddrop, global.kendo._globals.Userevents, global.kendo._globals.MobileScroller, global.kendo._globals.DiagramCommonCmnChunk));\n})(this, (function (exports, kendo_data_js, kendo_draganddrop_js, kendo_userevents_js, kendo_mobile_scroller_js, kendo_diagramCommon_cmn_chunk_js) {\n    (function() {\n        var kendo = window.kendo,\n            diagram = kendo.dataviz.diagram = {};\n\n        kendo.deepExtend(diagram, {\n            init: function(element) {\n                kendo.init(element, diagram.ui);\n            },\n\n            Utils: kendo_diagramCommon_cmn_chunk_js.U,\n            Range: kendo_diagramCommon_cmn_chunk_js.R,\n            Ticker: kendo_diagramCommon_cmn_chunk_js.T\n        });\n    })();\n\n    (function() {\n        // Imports ================================================================\n        var kendo = window.kendo,\n            diagram = kendo.dataviz.diagram;\n\n        kendo.deepExtend(diagram, {\n            init: function(element) {\n                kendo.init(element, diagram.ui);\n            },\n\n            Point: kendo_diagramCommon_cmn_chunk_js.f,\n            Intersect: kendo_diagramCommon_cmn_chunk_js.I,\n            Geometry: kendo_diagramCommon_cmn_chunk_js.e,\n            Rect: kendo_diagramCommon_cmn_chunk_js.d,\n            Size: kendo_diagramCommon_cmn_chunk_js.c,\n            RectAlign: kendo_diagramCommon_cmn_chunk_js.b,\n            Matrix: kendo_diagramCommon_cmn_chunk_js.a,\n            MatrixVector: kendo_diagramCommon_cmn_chunk_js.M,\n            normalVariable: kendo_diagramCommon_cmn_chunk_js.n,\n            randomId: kendo_diagramCommon_cmn_chunk_js.r,\n            Dictionary: kendo_diagramCommon_cmn_chunk_js.D,\n            HashTable: kendo_diagramCommon_cmn_chunk_js.H,\n            Queue: kendo_diagramCommon_cmn_chunk_js.Q,\n            Set: kendo_diagramCommon_cmn_chunk_js.S,\n            Node: kendo_diagramCommon_cmn_chunk_js.N,\n            Link: kendo_diagramCommon_cmn_chunk_js.L,\n            Graph: kendo_diagramCommon_cmn_chunk_js.G,\n            PathDefiner: kendo_diagramCommon_cmn_chunk_js.P\n        });\n    })();\n\n    const { isFunction } = kendo_diagramCommon_cmn_chunk_js.U;\n\n    (function() {\n        // Imports ================================================================\n        var kendo = window.kendo,\n            drawing = kendo.drawing,\n            diagram = kendo.dataviz.diagram;\n\n        class Canvas extends kendo_diagramCommon_cmn_chunk_js.C {\n            constructor(element, options) {\n                options = options || {};\n                super(element, options);\n                this.surface = drawing.Surface.create(element, options);\n                this.translate = isFunction(this.surface.translate) ? this._translate : undefined;\n\n                this._viewBox = new kendo_diagramCommon_cmn_chunk_js.d(0, 0, options.width, options.height);\n                this.size(this._viewBox);\n            }\n        }\n\n        // Exports ================================================================\n        kendo.deepExtend(diagram, {\n            init: function(element) {\n                kendo.init(element, diagram.ui);\n            },\n            diffNumericOptions: kendo_diagramCommon_cmn_chunk_js.y,\n            Markers: kendo_diagramCommon_cmn_chunk_js.x,\n            Element: kendo_diagramCommon_cmn_chunk_js.E,\n            Scale: kendo_diagramCommon_cmn_chunk_js.w,\n            Translation: kendo_diagramCommon_cmn_chunk_js.v,\n            Rotation: kendo_diagramCommon_cmn_chunk_js.u,\n            Circle: kendo_diagramCommon_cmn_chunk_js.t,\n            Group: kendo_diagramCommon_cmn_chunk_js.s,\n            Rectangle: kendo_diagramCommon_cmn_chunk_js.q,\n            Canvas: Canvas,\n            Path: kendo_diagramCommon_cmn_chunk_js.p,\n            Layout: kendo_diagramCommon_cmn_chunk_js.o,\n            Line: kendo_diagramCommon_cmn_chunk_js.m,\n            MarkerBase: kendo_diagramCommon_cmn_chunk_js.l,\n            ArrowMarker: kendo_diagramCommon_cmn_chunk_js.A,\n            CircleMarker: kendo_diagramCommon_cmn_chunk_js.k,\n            Polyline: kendo_diagramCommon_cmn_chunk_js.j,\n            CompositeTransform: kendo_diagramCommon_cmn_chunk_js.i,\n            TextBlock: kendo_diagramCommon_cmn_chunk_js.h,\n            Image: kendo_diagramCommon_cmn_chunk_js.g,\n            VisualBase: kendo_diagramCommon_cmn_chunk_js.V\n        });\n    })();\n\n    (function() {\n            // Imports ================================================================\n            var kendo = window.kendo,\n                dataviz = kendo.dataviz,\n                diagram = dataviz.diagram;\n\n            diagram.Cursors = kendo_diagramCommon_cmn_chunk_js.z;\n\n            kendo.deepExtend(diagram, {\n                CompositeUnit: kendo_diagramCommon_cmn_chunk_js.af,\n                TransformUnit: kendo_diagramCommon_cmn_chunk_js.ae,\n                PanUndoUnit: kendo_diagramCommon_cmn_chunk_js.ad,\n                AddShapeUnit: kendo_diagramCommon_cmn_chunk_js.ac,\n                AddConnectionUnit: kendo_diagramCommon_cmn_chunk_js.ab,\n                DeleteShapeUnit: kendo_diagramCommon_cmn_chunk_js.aa,\n                DeleteConnectionUnit: kendo_diagramCommon_cmn_chunk_js.a9,\n                ConnectionEditAdorner: kendo_diagramCommon_cmn_chunk_js.a8,\n                ConnectionTool: kendo_diagramCommon_cmn_chunk_js.a7,\n                ConnectorVisual: kendo_diagramCommon_cmn_chunk_js.a6,\n                UndoRedoService: kendo_diagramCommon_cmn_chunk_js.a5,\n                ResizingAdorner: kendo_diagramCommon_cmn_chunk_js.a4,\n                Selector: kendo_diagramCommon_cmn_chunk_js.a3,\n                ToolService: kendo_diagramCommon_cmn_chunk_js.a2,\n                ConnectorsAdorner: kendo_diagramCommon_cmn_chunk_js.a1,\n                LayoutUndoUnit: kendo_diagramCommon_cmn_chunk_js.a0,\n                ConnectionEditUnit: kendo_diagramCommon_cmn_chunk_js.$,\n                ToFrontUnit: kendo_diagramCommon_cmn_chunk_js._,\n                ToBackUnit: kendo_diagramCommon_cmn_chunk_js.Z,\n                ConnectionRouterBase: kendo_diagramCommon_cmn_chunk_js.Y,\n                PolylineRouter: kendo_diagramCommon_cmn_chunk_js.X,\n                CascadingRouter: kendo_diagramCommon_cmn_chunk_js.W,\n                SelectionTool: kendo_diagramCommon_cmn_chunk_js.O,\n                ScrollerTool: kendo_diagramCommon_cmn_chunk_js.K,\n                PointerTool: kendo_diagramCommon_cmn_chunk_js.J,\n                ConnectionEditTool: kendo_diagramCommon_cmn_chunk_js.F,\n                RotateUnit: kendo_diagramCommon_cmn_chunk_js.B\n            });\n    })();\n\n    (function() {\n        var kendo = window.kendo,\n            diagram = kendo.dataviz.diagram;\n\n        kendo.deepExtend(diagram, {\n            init: function(element) {\n                kendo.init(element, diagram.ui);\n            },\n            SpringLayout: kendo_diagramCommon_cmn_chunk_js.al,\n            TreeLayout: kendo_diagramCommon_cmn_chunk_js.ak,\n            GraphAdapter: kendo_diagramCommon_cmn_chunk_js.aj,\n            LayeredLayout: kendo_diagramCommon_cmn_chunk_js.ai,\n            LayoutBase: kendo_diagramCommon_cmn_chunk_js.ah,\n            LayoutState: kendo_diagramCommon_cmn_chunk_js.ag\n        });\n    })();\n\n    (function(undefined$1) {\n        const kendo = window.kendo;\n        const dataviz = kendo.dataviz;\n\n        const elementStyles = element => element.ownerDocument.defaultView.getComputedStyle(element);\n        const cache = {};\n\n        const toColor = (colorMix, element) => {\n            if (cache[colorMix]) {\n                return cache[colorMix];\n            }\n\n            const curColor = element.style.color;\n            element.style.color = colorMix;\n            const color = elementStyles(element).color;\n            element.style.color = curColor;\n\n            cache[colorMix] = color;\n\n            return color;\n        };\n\n        const getProp = (element, prop) => {\n            let value = elementStyles(element).getPropertyValue(prop);\n            if (/^color-mix/i.test(value)) {\n                value = toColor(value, element);\n            }\n            return value;\n        };\n\n        const diagramTheme = (element) => {\n            const primaryBg = getProp(element, \"--kendo-chart-primary-bg\");\n            const primaryContrast = getProp(element, \"--kendo-chart-primary-contrast\");\n            const normalTextColor = getProp(element, \"--kendo-chart-text\");\n            const normalBackground = getProp(element, \"--kendo-color-surface\");\n\n            return {\n                shapeDefaults: {\n                    fill: {\n                        color: primaryBg\n                    },\n                    content: {\n                        color: primaryContrast\n                    },\n                    connectorDefaults: {\n                        fill: {\n                            color: normalTextColor\n                        },\n                        stroke: {\n                            color: primaryContrast\n                        },\n                        hover: {\n                            fill: {\n                                color: primaryContrast\n                            },\n                            stroke: {\n                                color: normalTextColor\n                            }\n                        }\n                    }\n                },\n                editable: {\n                    resize: {\n                        handles: {\n                            stroke: {\n                                color: normalTextColor\n                            },\n                            fill: {\n                                color: normalBackground\n                            },\n                            hover: {\n                                stroke: {\n                                    color: normalTextColor\n                                },\n                                fill: {\n                                    color: normalTextColor\n                                }\n                            }\n                        }\n                    }\n                },\n                selectable: {\n                    stroke: {\n                        color: normalTextColor\n                    }\n                },\n                connectionDefaults: {\n                    stroke: {\n                        color: normalTextColor\n                    },\n                    content: {\n                        color: normalTextColor\n                    },\n                    selection: {\n                        handles: {\n                            fill: {\n                                color: primaryContrast\n                            },\n                            stroke: {\n                                color: normalTextColor\n                            },\n                            width: 8,\n                            height: 8\n                        },\n                        stroke: {\n                            color: normalTextColor\n                        }\n                    }\n                }\n            };\n        };\n\n        dataviz.diagramTheme = diagramTheme;\n    })();\n\n    (function($, undefined$1) {\n            // Imports ================================================================\n            var dataviz = kendo.dataviz,\n                diagram = dataviz.diagram,\n                Widget = kendo.ui.Widget,\n                deepExtend = kendo.deepExtend,\n                outerWidth = kendo._outerWidth,\n                outerHeight = kendo._outerHeight,\n                extend = $.extend,\n                HierarchicalDataSource = kendo.data.HierarchicalDataSource,\n                Canvas = diagram.Canvas,\n                Rect = diagram.Rect,\n                Point = diagram.Point,\n                defined$1 = kendo.drawing.util.defined,\n                isPlainObject = $.isPlainObject,\n                DataSource = kendo.data.DataSource;\n\n            // Constants ==============================================================\n            var NS = \".kendoDiagram\",\n                CLICK = \"click\",\n                ROTATED = \"rotated\",\n                CHANGE = \"change\",\n                ERROR = \"error\",\n                BUTTON_TEMPLATE = ({ className, icon, themeColor, text }) =>\n                    kendo.html.renderButton(`<button class=\"${className}\" href=\"#\">${text}</button>`, {\n                        icon: icon,\n                        themeColor\n                    });\n\n            function preventDefault(e) {\n                e.preventDefault();\n            }\n\n            function clearField(field, model) {\n                if (defined$1(model[field])) {\n                    model.set(field, null);\n                }\n            }\n\n            diagram.DefaultConnectors = kendo_diagramCommon_cmn_chunk_js.am;\n\n            var defaultButtons = {\n                cancel: {\n                    text: \"Cancel\",\n                    icon: \"cancel-outline\",\n                    className: \"k-diagram-cancel\",\n                },\n                update: {\n                    text: \"Save\",\n                    imageClass: \"save\",\n                    className: \"k-diagram-update\",\n                    icon: \"save\",\n                    themeColor: \"primary\"\n                }\n            };\n\n            diagram.shapeDefaults = kendo_diagramCommon_cmn_chunk_js.an;\n            const kendoTemplateOptions = {\n                kendoTemplate: kendo.template\n            };\n\n            var Diagram$1 = Widget.extend({\n                init: function(element, userOptions = {}) {\n                    var that = this;\n\n                    kendo.destroy(element);\n                    Widget.fn.init.call(that, element, userOptions);\n\n                    const theme = that._initTheme();\n                    const isEditable = defined$1(userOptions.connectionsDataSource);\n                    this._isEditable = isEditable;\n                    const extendedOptions = {\n                        ...that.options,\n\n                        _syncChanges: that._syncChanges.bind(that),\n                        _syncShapeChanges: that._syncShapeChanges.bind(that),\n                        _syncConnectionChanges: that._syncConnectionChanges.bind(that),\n                        _removeConnectionDataItem: that._removeConnectionDataItem.bind(that),\n                        _removeShapeDataItem: that._removeShapeDataItem.bind(that),\n                        _addConnection: that._addConnection.bind(that),\n                        _addShape: that._addShape.bind(that),\n                        updateConnectionModel: that.updateConnectionModel.bind(that),\n                        updateShapeModel: that.updateShapeModel.bind(that),\n\n                        cloneDataItem: cloneDataItem,\n\n                        connect: isEditable ? that.connect.bind(that) : undefined$1,\n                        createToolBar: that._createToolBar.bind(that),\n                        destroyToolBar: that._destroyToolBar.bind(that),\n                        Canvas,\n                        shapeDefaults: { ...kendoTemplateOptions, ...userOptions.shapeDefaults },\n                        connectionDefaults: { ...kendoTemplateOptions, ...userOptions.connectionDefaults },\n                    };\n\n                    const widget = new kendo_diagramCommon_cmn_chunk_js.au(element, extendedOptions, theme);\n                    that.events.forEach(function(eventName) {\n                        widget.bind(eventName, function(e) {\n                            e.sender = that;\n                            that.trigger(eventName, e);\n                        });\n                    });\n                    that.widget = widget;\n                    that.wrapper = $(widget.wrapper);\n                    that.scrollable = $(widget.scrollable);\n                    that.shapes = widget.shapes;\n                    that.connections = widget.connections;\n                    that._connectionsDataMap = widget._connectionsDataMap;\n                    that._dataMap = widget._dataMap;\n                    that._inactiveShapeItems = widget._inactiveShapeItems;\n                    that._copyOffset = 0;\n                    that._selectedItems = widget._selectedItems;\n                    that.options = widget.options;\n                    that._clipboard = widget._clipboard;\n                    that.id = widget.id;\n                    that.undoRedoService = widget.undoRedoService;\n                    that.toolService = widget.toolService;\n                    that._resizingAdorner = widget._resizingAdorner;\n                    that._connectorsAdorner = widget._connectorsAdorner;\n                    that.selector = widget.selector;\n\n                    that._fetchFreshData();\n\n                    that._createGlobalToolBar();\n\n                    that.widget._createOptionElements();\n                    that.widget.zoom(that.options.zoom);\n                    that.widget.canvas.draw();\n                },\n\n                options: deepExtend({}, kendo_diagramCommon_cmn_chunk_js.at),\n                events: [...kendo_diagramCommon_cmn_chunk_js.aq],\n\n                shapes: [],\n                connections: [],\n                dataSource: null,\n                connectionsDataSource: null,\n\n                /**\n                 * Connects two items.\n                 * @param source Shape, Connector, Point.\n                 * @param target Shape, Connector, Point.\n                 * @param options Connection options that will be passed to the newly created connection.\n                 * @returns The newly created connection.\n                 */\n                connect: function(source, target, options) {\n                    let connection;\n                    if (this.connectionsDataSource && this._isEditable) {\n                        const dataItem = this.connectionsDataSource.add({});\n                        connection = this.widget._connectionsDataMap[dataItem.uid];\n                        connection.source(source);\n                        connection.target(target);\n                        connection.redraw(options);\n                        connection.updateModel();\n                    } else {\n                        connection = this.widget.connect(source, target, options);\n                    }\n\n                    return connection;\n                },\n\n                /**\n                 * Determines whether the the two items are connected.\n                 * @param source Shape, Connector, Point.\n                 * @param target Shape, Connector, Point.\n                 * @returns true if the two items are connected.\n                 */\n                connected: function(source, target) {\n                    return this.widget.connected(source, target);\n                },\n\n                /**\n                 * Adds connection to the diagram.\n                 * @param connection Connection.\n                 * @param undoable Boolean.\n                 * @returns The newly created connection.\n                 */\n                addConnection: function(connection, undoable) {\n                    return this.widget.addConnection(connection, undoable);\n                },\n\n                /**\n                 * Adds shape to the diagram.\n                 * @param item Shape, Point. If point is passed it will be created new Shape and positioned at that point.\n                 * @param options. The options to be passed to the newly created Shape.\n                 * @returns The newly created shape.\n                 */\n                addShape: function(item, undoable) {\n                    return this.widget.addShape(item, undoable);\n                },\n\n                /**\n                 * Removes items (or single item) from the diagram.\n                 * @param items DiagramElement, Array of Items.\n                 * @param undoable.\n                 */\n                remove: function(items, undoable) {\n                    return this.widget.remove(items, undoable);\n                },\n\n                /**\n                 * Executes the next undoable action on top of the undo stack if any.\n                 */\n                undo: function() {\n                    return this.widget.undo();\n                },\n\n                /**\n                 * Executes the previous undoable action on top of the redo stack if any.\n                 */\n                redo: function() {\n                    return this.widget.redo();\n                },\n\n                /**\n                 * Selects items on the basis of the given input or returns the current selection if none.\n                 * @param itemsOrRect DiagramElement, Array of elements, \"All\", false or Rect. A value 'false' will deselect everything.\n                 * @param options\n                 * @returns {Array}\n                 */\n                select: function(item, options) {\n                    return this.widget.select(item, options);\n                },\n\n                deselect: function(item) {\n                    this.widget.deselect(item);\n                },\n\n                 /**\n                 * Brings to front the passed items.\n                 * @param items DiagramElement, Array of Items.\n                 * @param undoable. By default the action is undoable.\n                 */\n                 toFront: function(items, undoable) {\n                    return this.widget.toFront(items, undoable);\n                },\n\n                /**\n                 * Sends to back the passed items.\n                 * @param items DiagramElement, Array of Items.\n                 * @param undoable. By default the action is undoable.\n                 */\n                toBack: function(items, undoable) {\n                    return this.widget.toBack(items, undoable);\n                },\n\n                /**\n                 * Bring into view the passed item(s) or rectangle.\n                 * @param items DiagramElement, Array of Items, Rect.\n                 * @param options. align - controls the position of the calculated rectangle relative to the viewport.\n                 * \"Center middle\" will position the items in the center. animate - controls if the pan should be animated.\n                 */\n                bringIntoView: function(item, options) { // jQuery|Item|Array|Rect\n                    return this.widget.bringIntoView(item, options);\n                },\n\n                /**\n                 * Gets the bounding rectangle of the given items.\n                 * @param items DiagramElement, Array of elements.\n                 * @param origin Boolean. Pass 'true' if you need to get the bounding box of the shapes without their rotation offset.\n                 * @returns {Rect}\n                 */\n                boundingBox: function(items, origin) {\n                    return this.widget.boundingBox(items, origin);\n                },\n\n                /**\n                 * Performs a diagram layout of the given type.\n                 * @param layoutType The layout algorithm to be applied (TreeLayout, LayeredLayout, SpringLayout).\n                 * @param options Layout-specific options.\n                 */\n                layout: function(options) {\n                    return this.widget.layout(options);\n                },\n\n                /**\n                 * Gets a shape on the basis of its identifier.\n                 * @param id (string) the identifier of a shape.\n                 * @returns {Shape}\n                 */\n                getShapeById: function(id) {\n                    return this.widget.getShapeById(id);\n                },\n\n                getConnectionByModelId(id) {\n                    let connectionResult;\n                    if (this.connectionsDataSource) {\n                        connectionResult = kendo_diagramCommon_cmn_chunk_js.as(this.connections, function(connection) {\n                            return (connection.dataItem || {}).id === id;\n                        });\n                    }\n                    return connectionResult;\n                },\n\n                getConnectionByModelUid(uid) {\n                    let connection;\n                    if (this.connectionsDataSource) {\n                        connection = this.widget._connectionsDataMap[uid];\n                    }\n                    return connection;\n                },\n\n                copy: function() {\n                    this.widget.copy();\n                },\n\n                cut: function() {\n                    this.widget.cut();\n                },\n\n                alignShapes: function(direction) {\n                    return this.widget.alignShapes(direction);\n                },\n\n                createShape: function() {\n                    if ((this.editor && this.editor.end()) || !this.editor) {\n                        var dataSource = this.dataSource;\n                        var view = dataSource.view() || [];\n                        var index = view.length;\n                        var model = createModel(dataSource, {});\n                        var shape = this.widget._createShape(model, {});\n\n                        if (!this.trigger(\"add\", { shape: shape })) {\n                            dataSource.insert(index, model);\n                            var inactiveItem = this.widget._inactiveShapeItems.getByUid(model.uid);\n                            inactiveItem.element = shape;\n                            this.edit(shape);\n                        }\n                    }\n                },\n\n                createConnection: function() {\n                    if (((this.editor && this.editor.end()) || !this.editor)) {\n                        var connectionsDataSource = this.connectionsDataSource;\n                        var view = connectionsDataSource.view() || [];\n                        var index = view.length;\n                        var model = createModel(connectionsDataSource, {});\n                        var connection = this.widget._createConnection(model);\n                        if (!this.trigger(\"add\", { connection: connection })) {\n                            this.widget._connectionsDataMap[model.uid] = connection;\n                            connectionsDataSource.insert(index, model);\n                            this.addConnection(connection, false);\n                            this.edit(connection);\n                        }\n                    }\n                },\n\n                exportVisual: function() {\n                    return this.widget.exportVisual();\n                },\n\n                exportDOMVisual: function() {\n                    return this.widget.exportDOMVisual();\n                },\n\n                _syncChanges() {\n                    this._syncShapeChanges();\n                    this._syncConnectionChanges();\n                },\n\n                _syncShapeChanges() {\n                    if (this.dataSource && this._isEditable) {\n                        this.dataSource.sync();\n                    }\n                },\n\n                _syncConnectionChanges() {\n                    if (this.connectionsDataSource && this._isEditable) {\n                        Promise.all(this.widget._deferredConnectionUpdates).then(() => {\n                            this.connectionsDataSource.sync();\n                            this.widget._deferredConnectionUpdates.length = 0;\n                        });\n                    }\n                },\n\n                editModel: function(dataItem, editorType) {\n                    this.cancelEdit();\n                    var editors, template;\n                    var editable = this.widget.options.editable;\n\n                    if (editorType == \"shape\") {\n                        editors = editable.shapeEditors;\n                        template = editable.shapeTemplate;\n                    } else if (editorType == \"connection\") {\n                        var connectionSelectorHandler = connectionSelector.bind(this);\n                        editors = deepExtend({}, { from: connectionSelectorHandler, to: connectionSelectorHandler }, editable.connectionEditors);\n                        template = editable.connectionTemplate;\n                    } else {\n                        return;\n                    }\n\n                    this.editor = new PopupEditor(this.element, {\n                        update: this._update.bind(this),\n                        cancel: this._cancel.bind(this),\n                        model: dataItem,\n                        type: editorType,\n                        target: this,\n                        editors: editors,\n                        template: template\n                    });\n\n                    this.trigger(\"edit\", this._editArgs());\n                },\n\n                edit: function(item) {\n                    if (item.dataItem) {\n                        var editorType = item instanceof kendo_diagramCommon_cmn_chunk_js.ap ? \"shape\" : \"connection\";\n                        this.editModel(item.dataItem, editorType);\n                    }\n                },\n\n                cancelEdit: function() {\n                    if (this.editor) {\n                        this._getEditDataSource().cancelChanges(this.editor.model);\n\n                        this._destroyEditor();\n                    }\n                },\n\n                clear() {\n                    this.widget.clear();\n                },\n\n                saveEdit: function() {\n                    if (this.editor && this.editor.end() &&\n                        !this.trigger(\"save\", this._editArgs())) {\n                        this._getEditDataSource().sync();\n                    }\n                },\n\n                updateConnectionModel: function(connection, syncChanges) {\n                    if (this.connectionsDataSource) {\n                        const model = this.connectionsDataSource.getByUid(connection.dataItem.uid);\n\n                        if (model) {\n                            this._suspendModelRefresh();\n                            if (defined$1(connection.options.fromX) && connection.options.fromX !== null) {\n                                clearField('from', model);\n                                clearField('fromConnector', model);\n                                model.set('fromX', connection.options.fromX);\n                                model.set('fromY', connection.options.fromY);\n                            } else {\n                                model.set('from', connection.options.from);\n                                if (defined$1(model.fromConnector)) {\n                                    model.set('fromConnector', connection.sourceConnector ? connection.sourceConnector.options.name : null);\n                                }\n                                clearField('fromX', model);\n                                clearField('fromY', model);\n                            }\n\n                            if (defined$1(connection.options.toX) && connection.options.toX !== null) {\n                                clearField('to', model);\n                                clearField('toConnector', model);\n                                model.set('toX', connection.options.toX);\n                                model.set('toY', connection.options.toY);\n                            } else {\n                                model.set('to', connection.options.to);\n                                if (defined$1(model.toConnector)) {\n                                    model.set('toConnector', connection.targetConnector ? connection.targetConnector.options.name : null);\n                                }\n                                clearField('toX', model);\n                                clearField('toY', model);\n                            }\n\n                            if (defined$1(connection.options.type) && defined$1(model.type)) {\n                                model.set('type', connection.options.type);\n                            }\n\n                            connection.dataItem = model;\n                            this._resumeModelRefresh();\n\n                            if (syncChanges) {\n                                this._syncConnectionChanges();\n                            }\n                        }\n                    }\n                },\n\n                updateShapeModel: function(shape, syncChanges) {\n                    const bounds = shape._bounds;\n                    const model = shape.dataItem;\n\n                    if (model) {\n                        this._suspendModelRefresh();\n                        if (defined$1(model.x) && bounds.x !== model.x) {\n                            model.set('x', bounds.x);\n                        }\n\n                        if (defined$1(model.y) && bounds.y !== model.y) {\n                            model.set('y', bounds.y);\n                        }\n\n                        if (defined$1(model.width) && bounds.width !== model.width) {\n                            model.set('width', bounds.width);\n                        }\n\n                        if (defined$1(model.height) && bounds.height !== model.height) {\n                            model.set('height', bounds.height);\n                        }\n\n                        shape.dataItem = model;\n                        this._resumeModelRefresh();\n\n                        if (syncChanges) {\n                            this._syncShapeChanges();\n                        }\n                    }\n                },\n\n                destroy: function() {\n                    this.diagram = null;\n                    this.element = null;\n                    this.options = null;\n\n                    if (this._toolBar) {\n                        this._toolBar.destroy();\n                    }\n\n                    if (this._popup) {\n                        this._popup.destroy();\n                    }\n\n                    this._destroyGlobalToolBar();\n                    this._destroyToolBar();\n\n                    if (this.widget) {\n                        this.widget.destroy();\n                        this.widget = null;\n                    }\n                },\n\n                documentToModel: function(point) {\n                    return this.widget.documentToModel(point);\n                },\n\n                documentToView: function(point) {\n                    return this.widget.documentToView(point);\n                },\n\n                focus: function() {\n                    return this.widget.focus();\n                },\n\n                getShapeByModelId: function(id) {\n                    return this.widget.getShapeByModelId(id);\n                },\n\n                getShapeByModelUid: function(uid) {\n                    return this.widget.getShapeByModelUid(uid);\n                },\n\n                layerToModel: function(point) {\n                    return this.widget.layerToModel(point);\n                },\n\n                load: function(options) {\n                    this.widget.load(options);\n                },\n\n                modelToDocument: function(point) {\n                    return this.widget.modelToDocument(point);\n                },\n\n                modelToLayer: function(point) {\n                    return this.widget.modelToLayer(point);\n                },\n\n                modelToView: function(point) {\n                    return this.widget.modelToView(point);\n                },\n\n                pan: function(pan, animate) {\n                    return this.widget.pan(pan, animate);\n                },\n\n                paste: function() {\n                    this.widget.paste();\n                },\n\n                save: function() {\n                    return this.widget.save();\n                },\n\n                selectAll: function() {\n                    this.widget.selectAll();\n                },\n\n                selectArea: function(rect) {\n                    this.widget.selectArea(rect);\n                },\n\n                setDataSource(dataSource) {\n                    this.options.dataSource = dataSource;\n                    this._dataSource();\n                    if (this.options.autoBind !== false) {\n                        this.dataSource.fetch();\n                    }\n                },\n\n                setConnectionsDataSource(dataSource) {\n                    this.options.connectionsDataSource = dataSource;\n                    this._connectionDataSource();\n                    if (this.options.autoBind !== false) {\n                        this.connectionsDataSource.fetch();\n                    }\n                },\n\n                viewToDocument: function(point) {\n                    return this.widget.viewToDocument(point);\n                },\n\n                viewToModel: function(point) {\n                    return this.widget.viewToModel(point);\n                },\n\n                viewport: function() {\n                    return this.widget.viewport();\n                },\n\n                zoom: function(zoom, options) {\n                    return this.widget.zoom(zoom, options);\n                },\n\n                _initTheme: function() {\n                    var that = this;\n                    var themeName = ((that.options || {}).theme || \"\").toLowerCase();\n                    var themes = dataviz.ui.themes || {};\n                    var themeOptions;\n\n                    if (dataviz.SASS_THEMES.indexOf(themeName) != -1) {\n                        that.element.addClass(\"k-diagram\");\n                        themeOptions = dataviz.diagramTheme(that.element[0]);\n                        that.element.removeClass(\"k-diagram\");\n                    }\n                    else {\n                        themeOptions = (themes[themeName] || {}).diagram;\n                    }\n\n                    return themeOptions;\n                },\n\n                items: function() {\n                    return $();\n                },\n\n                _createGlobalToolBar: function() {\n                    const widget = this.widget;\n                    var editable = this.widget.options.editable;\n\n                    if (editable) {\n                        var tools = editable.tools;\n                        if (this._isEditable && tools !== false && (!tools || tools.length === 0)) {\n                            tools = [\"createShape\", \"undo\", \"redo\", \"rotateClockwise\", \"rotateAnticlockwise\"];\n                        }\n\n                        if (tools && tools.length) {\n                            this.toolBar = new DiagramToolBar(this, {\n                                tools: tools || {},\n                                click: this._toolBarClick.bind(this),\n                                modal: false\n                            });\n\n                            this.widget.toolBar = { element: this.toolBar.element[0] };\n\n                            this.toolBar.element.css({\n                                textAlign: \"left\"\n                            });\n\n                            this.element.prepend(this.toolBar.element);\n                            this.widget._resize();\n                        }\n                    }\n                },\n\n                _toolBarClick: function(e) {\n                    this.trigger(\"toolBarClick\", e);\n                    this._destroyToolBar();\n                },\n\n                _createToolBar: function(preventClosing) {\n                    const diagram = this;\n                    const widget = this.widget;\n\n                    if (!this.singleToolBar && diagram.select().length === 1) {\n                        var element = diagram.select()[0];\n                        if (element && element.options.editable !== false) {\n                            var editable = element.options.editable || {};\n                            var tools = editable.tools;\n                            if (this._isEditable && tools && tools.length === 0) {\n                                if (element instanceof kendo_diagramCommon_cmn_chunk_js.ap) {\n                                    tools = [\"edit\", \"rotateClockwise\", \"rotateAnticlockwise\"];\n                                } else if (element instanceof kendo_diagramCommon_cmn_chunk_js.ar) {\n                                    tools = [\"edit\"];\n                                }\n\n                                if (editable && editable.remove !== false) {\n                                    tools.push(\"delete\");\n                                }\n                            }\n\n                            if (tools && tools.length) {\n                                var padding = 20;\n                                var point;\n\n                                this.singleToolBar = new DiagramToolBar(this, {\n                                    tools: tools,\n                                    click: this._toolBarClick.bind(this),\n                                    modal: true,\n                                    popupZIndex: parseInt(diagram.element.closest(\".k-window\").css(\"zIndex\"), 10) + 10\n                                });\n                                var popupWidth = outerWidth(this.singleToolBar._popup.element);\n                                var popupHeight = outerHeight(this.singleToolBar._popup.element);\n                                if (element instanceof kendo_diagramCommon_cmn_chunk_js.ap) {\n                                    var shapeBounds = widget.modelToView(element.bounds(ROTATED));\n                                    point = new Point(shapeBounds.x, shapeBounds.y).minus(new Point(\n                                        (popupWidth - shapeBounds.width) / 2,\n                                        popupHeight + padding));\n                                } else if (element instanceof kendo_diagramCommon_cmn_chunk_js.ar) {\n                                    var connectionBounds = widget.modelToView(element.bounds());\n\n                                    point = new Point(connectionBounds.x, connectionBounds.y)\n                                        .minus(new Point(\n                                            (popupWidth - connectionBounds.width - 20) / 2,\n                                            popupHeight + padding\n                                        ));\n                                }\n\n                                if (point) {\n                                    if (!widget.canvas.translate) {\n                                        point = point.minus(new Point(widget.scroller.scrollLeft, widget.scroller.scrollTop));\n                                    }\n                                    point = this.viewToDocument(point);\n                                    point = new Point(Math.max(point.x, 0), Math.max(point.y, 0));\n                                    this.singleToolBar.showAt(point);\n                                    if (preventClosing) {\n                                        this.singleToolBar._popup.one(\"close\", preventDefault);\n                                    }\n                                } else {\n                                    this._destroyToolBar();\n                                }\n                            }\n                        }\n                    }\n                },\n\n                _destroyToolBar: function() {\n                    if (this.singleToolBar) {\n                        this.singleToolBar.hide();\n                        this.singleToolBar.destroy();\n                        this.singleToolBar = null;\n                    }\n                },\n\n                _destroyGlobalToolBar: function() {\n                    if (this.toolBar) {\n                        this.toolBar.hide();\n                        this.toolBar.destroy();\n                        this.toolBar = null;\n                    }\n                },\n\n                _update: function() {\n                    if (this.editor && this.editor.end() &&\n                        !this.trigger(\"save\", this._editArgs())) {\n                        this._getEditDataSource().sync();\n                        this._destroyEditor();\n                    }\n                },\n\n                _cancel: function() {\n                    if (this.editor && !this.trigger(\"cancel\", this._editArgs())) {\n                        var model = this.editor.model;\n                        this._getEditDataSource().cancelChanges(model);\n                        var element = this.widget._connectionsDataMap[model.uid] || this.widget._dataMap[model.id];\n                        if (element) {\n                            element._setOptionsFromModel(model);\n                        }\n                        this._destroyEditor();\n                    }\n                },\n\n                _getEditDataSource: function() {\n                    return this.editor.options.type === \"shape\" ? this.dataSource : this.connectionsDataSource;\n                },\n\n                _editArgs: function() {\n                    var result = { container: this.editor.wrapper };\n                    result[this.editor.options.type] = this.editor.model;\n                    return result;\n                },\n\n                _fetchFreshData() {\n                    this._dataSource();\n\n                    if (this._isEditable) {\n                        this._connectionDataSource();\n                    }\n\n                    if (this.options.autoBind !== false) {\n                        if (this._isEditable) {\n                            this._loadingShapes = true;\n                            this._loadingConnections = true;\n                            this.dataSource.fetch();\n                            this.connectionsDataSource.fetch();\n                        } else {\n                            this.dataSource.fetch();\n                        }\n                    }\n                },\n\n                _dataSource() {\n                    if (defined$1(this.options.connectionsDataSource)) {\n                        this.widget._isEditable = true;\n                        const dsOptions = this.options.dataSource || {};\n                        const ds = Array.isArray(dsOptions) ? { data: dsOptions } : dsOptions;\n\n                        if (this.dataSource && this._shapesRefreshHandler) {\n                            this.dataSource\n                                .unbind('change', this._shapesRefreshHandler)\n                                .unbind('requestStart', this._shapesRequestStartHandler)\n                                .unbind('error', this._shapesErrorHandler);\n                        } else {\n                            this._shapesRefreshHandler = this._refreshShapes.bind(this);\n                            this._shapesRequestStartHandler = this._shapesRequestStart.bind(this);\n                            this._shapesErrorHandler = this._error.bind(this);\n                        }\n\n                        this.dataSource = DataSource.create(ds)\n                            .bind('change', this._shapesRefreshHandler)\n                            .bind('requestStart', this._shapesRequestStartHandler)\n                            .bind('error', this._shapesErrorHandler);\n                    } else {\n                        this._treeDataSource();\n                        this.widget._isEditable = false;\n                    }\n                },\n\n                _connectionDataSource() {\n                    const dsOptions = this.options.connectionsDataSource;\n                    if (dsOptions) {\n                        const ds = Array.isArray(dsOptions) ? { data: dsOptions } : dsOptions;\n\n                        if (this.connectionsDataSource && this._connectionsRefreshHandler) {\n                            this.connectionsDataSource\n                                .unbind('change', this._connectionsRefreshHandler)\n                                .unbind('requestStart', this._connectionsRequestStartHandler)\n                                .unbind('error', this._connectionsErrorHandler);\n                        } else {\n                            this._connectionsRefreshHandler = this._refreshConnections.bind(this);\n                            this._connectionsRequestStartHandler = this._connectionsRequestStart.bind(this);\n                            this._connectionsErrorHandler = this._connectionsError.bind(this);\n                        }\n\n                        this.connectionsDataSource = DataSource.create(ds)\n                            .bind('change', this._connectionsRefreshHandler)\n                            .bind('requestStart', this._connectionsRequestStartHandler)\n                            .bind('error', this._connectionsErrorHandler);\n                    }\n                },\n\n                _shapesRequestStart(e) {\n                    if (e.type === 'read') {\n                        this._loadingShapes = true;\n                    }\n                },\n\n                _connectionsRequestStart(e) {\n                    if (e.type === 'read') {\n                        this._loadingConnections = true;\n                    }\n                },\n\n                _error() {\n                    this._loadingShapes = false;\n                },\n\n                _connectionsError() {\n                    this._loadingConnections = false;\n                },\n\n                _refreshShapes(e) {\n                    if (e.action === 'remove') {\n                        if (this._shouldRefresh()) {\n                            this._removeShapes(e.items);\n                        }\n                    } else if (e.action === 'itemchange') {\n                        if (this._shouldRefresh()) {\n                            this._updateShapes(e.items, e.field);\n                        }\n                    } else if (e.action === 'add') {\n                        this._inactiveShapeItems.add(e.items);\n                    } else if (e.action === 'sync') {\n                        this._syncShapes(); // e.items\n                    } else {\n                        this.refresh();\n                    }\n                },\n\n                _shouldRefresh() {\n                    return this.widget._shouldRefresh();\n                },\n\n                _suspendModelRefresh() {\n                    this.widget._suspendModelRefresh();\n                },\n\n                _resumeModelRefresh() {\n                    this.widget._resumeModelRefresh();\n                },\n\n                refresh() {\n                    this._loadingShapes = false;\n                    if (!this._loadingConnections) {\n                        this._rebindShapesAndConnections();\n                    }\n                },\n\n                _rebindShapesAndConnections() {\n                    this.clear();\n                    this._addShapes(this.dataSource.view());\n                    if (this.connectionsDataSource) {\n                        this._addConnections(this.connectionsDataSource.view(), false);\n                    }\n\n                    if (this.options.layout) {\n                        this.layout(this.options.layout);\n                    } else {\n                        this._redrawConnections();\n                    }\n                    this.trigger('dataBound');\n                },\n\n                refreshConnections() {\n                    this._loadingConnections = false;\n                    if (!this._loadingShapes) {\n                        this._rebindShapesAndConnections();\n                    }\n                },\n\n                _redrawConnections() {\n                    this.widget._redrawConnections();\n                },\n\n                _removeShapes(items) {\n                    const dataMap = this.widget._dataMap;\n                    let item, i;\n                    for (i = 0; i < items.length; i++) {\n                        item = items[i];\n                        if (dataMap[item.id]) {\n                            this.remove(dataMap[item.id], false);\n                            dataMap[item.id] = null;\n                        }\n                    }\n                },\n\n                _syncShapes() {\n                    const inactiveItems = this._inactiveShapeItems;\n                    inactiveItems.forEach((inactiveItem) => {\n                        const dataItem = inactiveItem.dataItem;\n                        const shape = inactiveItem.element;\n                        if (!dataItem.isNew()) {\n                            if (shape) {\n                                shape._setOptionsFromModel();\n                                this.addShape(shape, inactiveItem.undoable);\n                                this.widget._dataMap[dataItem.id] = shape;\n                            } else {\n                                this._addDataItem(dataItem);\n                            }\n                            inactiveItem.activate();\n                            inactiveItems.remove(dataItem);\n                        }\n                    });\n                },\n\n                _updateShapes(items, field) {\n                    for (let i = 0; i < items.length; i++) {\n                        const dataItem = items[i];\n\n                        const shape = this.widget._dataMap[dataItem.id];\n                        if (shape) {\n                            shape.updateOptionsFromModel(dataItem, field);\n                        }\n                    }\n                },\n\n                _addShapes(dataItems) {\n                    for (let i = 0; i < dataItems.length; i++) {\n                        this._addDataItem(dataItems[i], false);\n                    }\n                },\n\n                _addDataItem(dataItem, undoable) {\n                    if (!kendo_diagramCommon_cmn_chunk_js.ao(dataItem)) {\n                        return;\n                    }\n\n                    let shape = this.widget._dataMap[dataItem.id];\n                    if (shape) {\n                        return shape;\n                    }\n\n                    const options = deepExtend({}, this.widget.options.shapeDefaults);\n                    options.dataItem = dataItem;\n                    shape = new kendo_diagramCommon_cmn_chunk_js.ap(options, this.widget);\n                    this.addShape(shape, undoable !== false);\n                    this.widget._dataMap[dataItem.id] = shape;\n                    return shape;\n                },\n\n                _refreshConnections(e) {\n                    if (e.action === 'remove') {\n                        if (this._shouldRefresh()) {\n                            this._removeConnections(e.items);\n                        }\n                    } else if (e.action === 'add') {\n                        this._addConnections(e.items);\n                    } else if (e.action === 'sync') {\n                        // TO DO: include logic to update the connections with different values returned from the server.\n                    } else if (e.action === 'itemchange') {\n                        if (this._shouldRefresh()) {\n                            this._updateConnections(e.items);\n                        }\n                    } else {\n                        this.refreshConnections();\n                    }\n                },\n\n                _removeConnections(items) {\n                    for (let i = 0; i < items.length; i++) {\n                        this.remove(this.widget._connectionsDataMap[items[i].uid], false);\n                        this.widget._connectionsDataMap[items[i].uid] = null;\n                    }\n                },\n\n                _updateConnections(items) {\n                    for (let i = 0; i < items.length; i++) {\n                        const dataItem = items[i];\n\n                        const connection = this.widget._connectionsDataMap[dataItem.uid];\n                        connection.updateOptionsFromModel(dataItem);\n                    }\n                },\n\n                _addConnections(connections, undoable) {\n                    this.widget._addConnections(connections, undoable);\n                },\n\n                _addShape(shape, undoable) {\n                    const dataSource = this.dataSource;\n                    let dataItem;\n                    if (dataSource && this._isEditable) {\n                        dataItem = createModel(dataSource, cloneDataItem(shape.dataItem));\n                        shape.dataItem = dataItem;\n                        shape.updateModel();\n\n                        if (!this.trigger('add', { shape: shape })) {\n                            this.dataSource.add(dataItem);\n                            const inactiveItem = this.widget._inactiveShapeItems.getByUid(dataItem.uid);\n                            inactiveItem.element = shape;\n                            inactiveItem.undoable = undoable;\n                            return shape;\n                        }\n                    } else if (!this.trigger('add', { shape: shape })) {\n                        return this.addShape(shape, undoable);\n                    }\n                },\n\n                _addConnection(connection, undoable) {\n                    const connectionsDataSource = this.connectionsDataSource;\n                    let dataItem;\n                    if (connectionsDataSource && this._isEditable) {\n                        dataItem = createModel(connectionsDataSource, cloneDataItem(connection.dataItem));\n                        connection.dataItem = dataItem;\n                        connection.updateModel();\n\n                        if (!this.trigger('add', { connection: connection })) {\n                            this.widget._connectionsDataMap[dataItem.uid] = connection;\n\n                            connectionsDataSource.add(dataItem);\n                            this.addConnection(connection, undoable);\n                            connection._updateConnectors();\n\n                            return connection;\n                        }\n                    } else if (!this.trigger('add', { connection: connection })) {\n                        this.addConnection(connection, undoable);\n                        connection._updateConnectors();\n                        return connection;\n                    }\n                },\n\n                _treeDataSource() {\n                    const options = this.widget.options;\n                    let dataSource = options.dataSource;\n\n                    dataSource = Array.isArray(dataSource) ? { data: dataSource } : dataSource;\n\n                    if (dataSource instanceof DataSource && !(dataSource instanceof HierarchicalDataSource)) {\n                        throw new Error('Incorrect DataSource type. If a single dataSource instance is set to the diagram then it should be a HierarchicalDataSource. You should set only the options instead of an instance or a HierarchicalDataSource instance or supply connectionsDataSource as well.');\n                    }\n\n                    if (!dataSource.fields) {\n                        dataSource.fields = [\n                            { field: 'text' },\n                            { field: 'url' },\n                            { field: 'spriteCssClass' },\n                            { field: 'imageUrl' }\n                        ];\n                    }\n                    if (this.dataSource && this._refreshHandler) {\n                        this._unbindDataSource();\n                    }\n\n                    this._refreshHandler = this._refreshSource.bind(this);\n                    this._errorHandler = this._error.bind(this);\n\n                    this.dataSource = HierarchicalDataSource.create(dataSource)\n                        .bind(CHANGE, this._refreshHandler)\n                        .bind(ERROR, this._errorHandler);\n                },\n\n                _unbindDataSource() {\n                    this.dataSource.unbind(CHANGE, this._refreshHandler).unbind(ERROR, this._errorHandler);\n                },\n\n                _refreshSource(e) {\n                    const node = e.node,\n                        action = e.action,\n                        items = e.items,\n                        options = this.options;\n                    let idx,\n                        dataBound;\n\n                    if (e.field) {\n                        for (idx = 0; idx < items.length; idx++) {\n                            if (this.widget._dataMap[items[idx].uid]) {\n                                this.widget._dataMap[items[idx].uid].redrawVisual();\n                            }\n                        }\n                        return;\n                    }\n\n                    if (action === 'remove') {\n                        this._removeDataItems(e.items, true);\n                    } else {\n\n                        if ((!action || action === 'itemloaded') && !this._bindingRoots) {\n                            this._bindingRoots = true;\n                            dataBound = true;\n                        }\n\n                        if (!action && !node) {\n                            this.clear();\n                        }\n\n                        this.widget._addDataItems(items, node);\n\n                        for (idx = 0; idx < items.length; idx++) {\n                            items[idx].load();\n                        }\n                    }\n\n                    if (options.layout && (dataBound || action === 'remove' || action === 'add')) {\n                        this.layout(options.layout);\n                    }\n\n                    if (dataBound) {\n                        this.trigger('dataBound');\n                        this._bindingRoots = false;\n                    }\n                },\n\n                _removeDataItems(items, recursive) {\n                    let item, children, shape, idx;\n                    items = Array.isArray(items) ? items : [items];\n\n                    while (items.length) {\n                        item = items.shift();\n                        shape = this.widget._dataMap[item.uid];\n                        if (shape) {\n                            this.widget._removeShapeConnections(shape);\n                            this.widget._removeItem(shape, false);\n                            delete this.widget._dataMap[item.uid];\n                            if (recursive && item.hasChildren && item.loaded()) {\n                                children = item.children.data();\n                                for (idx = 0; idx < children.length; idx++) {\n                                    items.push(children[idx]);\n                                }\n                            }\n                        }\n                    }\n                },\n\n                _removeConnectionDataItem(dataItem) {\n                    this.connectionsDataSource.remove(dataItem);\n                },\n\n                _removeShapeDataItem(dataItem) {\n                    this.dataSource.remove(dataItem);\n                },\n\n                _destroyEditor: function() {\n                    if (this.editor) {\n                        this.editor.close();\n                        this.editor = null;\n                    }\n                }\n            });\n\n            dataviz.ExportMixin.extend(Diagram$1.fn, true);\n\n            if (kendo.PDFMixin) {\n                kendo.PDFMixin.extend(Diagram$1.fn);\n            }\n\n            var DiagramToolBar = kendo.Observable.extend({\n                init: function(diagram, options) {\n                    kendo.Observable.fn.init.call(this);\n                    this.diagram = diagram;\n                    this.options = deepExtend({}, this.options, options);\n                    this._tools = [];\n                    this.createToolBar();\n                    this.createTools();\n                    this.appendTools();\n\n                    if (this.options.modal) {\n                        this.createPopup();\n                    }\n\n                    this.bind(this.events, options);\n                },\n\n                events: [\"click\"],\n\n                createPopup: function() {\n                    this.container = $(\"<div/>\").append(this.element);\n                    this._popup = this.container.kendoPopup({}).getKendoPopup();\n                },\n\n                appendTools: function() {\n                    for (var i = 0; i < this._tools.length; i++) {\n                        var tool = this._tools[i];\n                        if (tool.buttons && tool.buttons.length || !defined$1(tool.buttons)) {\n                            this._toolBar.add(tool);\n                        }\n                    }\n                },\n\n                createToolBar: function() {\n                    this.element = $(\"<div/>\");\n                    this._toolBar = this.element\n                        .kendoToolBar({\n                            click: this.click.bind(this),\n                            resizable: false\n                        }).getKendoToolBar();\n\n                    this.element.css(\"border\", \"none\");\n                },\n\n                createTools: function() {\n                    for (var i = 0; i < this.options.tools.length; i++) {\n                        this.createTool(this.options.tools[i]);\n                    }\n                },\n\n                createTool: function(tool) {\n                    if (!isPlainObject(tool)) {\n                        tool = {\n                            name: tool\n                        };\n                    }\n                    var toolName = tool.name + \"Tool\";\n                    if (this[toolName]) {\n                        this[toolName](tool);\n                    } else {\n                        this._tools.push(deepExtend({}, tool, {\n                            attributes: this._setAttributes({ action: tool.name })\n                        }));\n                    }\n                },\n\n                showAt: function(point) {\n                    var popupZIndex = parseInt(this.options.popupZIndex, 10);\n\n                    if (this._popup) {\n                        this._popup.open(point.x, point.y);\n\n                        if (popupZIndex) {\n                            this._popup.wrapper.css(\"zIndex\", popupZIndex);\n                        }\n                    }\n                },\n\n                hide: function() {\n                    if (this._popup) {\n                        this._popup.close();\n                    }\n                },\n\n                newGroup: function() {\n                    return {\n                        type: \"buttonGroup\",\n                        buttons: []\n                    };\n                },\n\n                editTool: function() {\n                    this._tools.push({\n                        icon: \"pencil\",\n                        showText: \"overflow\",\n                        type: \"button\",\n                        text: \"Edit\",\n                        attributes: this._setAttributes({ action: \"edit\" })\n                    });\n                },\n\n                deleteTool: function() {\n                    this._tools.push({\n                        icon: \"x\",\n                        showText: \"overflow\",\n                        type: \"button\",\n                        text: \"Delete\",\n                        attributes: this._setAttributes({ action: \"delete\" })\n                    });\n                },\n\n                rotateAnticlockwiseTool: function(options) {\n                    this._appendGroup(\"rotate\");\n                    this._rotateGroup.buttons.push({\n                        icon: \"rotate-left\",\n                        showText: \"overflow\",\n                        text: \"RotateAnticlockwise\",\n                        group: \"rotate\",\n                        attributes: this._setAttributes({ action: \"rotateAnticlockwise\", step: options.step })\n                    });\n                },\n\n                rotateClockwiseTool: function(options) {\n                    this._appendGroup(\"rotate\");\n                    this._rotateGroup.buttons.push({\n                        icon: \"rotate-right\",\n                        attributes: this._setAttributes({ action: \"rotateClockwise\", step: options.step }),\n                        showText: \"overflow\",\n                        text: \"RotateClockwise\",\n                        group: \"rotate\"\n                    });\n                },\n\n                createShapeTool: function() {\n                    this._appendGroup(\"create\");\n                    this._createGroup.buttons.push({\n                        icon: \"shapes\",\n                        showText: \"overflow\",\n                        text: \"CreateShape\",\n                        group: \"create\",\n                        attributes: this._setAttributes({ action: \"createShape\" })\n                    });\n                },\n\n                createConnectionTool: function() {\n                    this._appendGroup(\"create\");\n                    this._createGroup.buttons.push({\n                        icon: \"connector\",\n                        showText: \"overflow\",\n                        text: \"CreateConnection\",\n                        group: \"create\",\n                        attributes: this._setAttributes({ action: \"createConnection\" })\n                    });\n                },\n\n                undoTool: function() {\n                    this._appendGroup(\"history\");\n                    this._historyGroup.buttons.push({\n                        icon: \"undo\",\n                        showText: \"overflow\",\n                        text: \"Undo\",\n                        group: \"history\",\n                        attributes: this._setAttributes({ action: \"undo\" })\n                    });\n                },\n\n                redoTool: function() {\n                    this._appendGroup(\"history\");\n                    this._historyGroup.buttons.push({\n                        icon: \"redo\",\n                        showText: \"overflow\",\n                        text: \"Redo\",\n                        group: \"history\",\n                        attributes: this._setAttributes({ action: \"redo\" })\n                    });\n                },\n\n                _appendGroup: function(name) {\n                    var prop = \"_\" + name + \"Group\";\n                    if (!this[prop]) {\n                        this[prop] = this.newGroup();\n                        this._tools.push(this[prop]);\n                    }\n                },\n\n                _setAttributes: function(attributes) {\n                    var attr = {};\n\n                    if (attributes.action) {\n                        attr[kendo.attr(\"action\")] = attributes.action;\n                    }\n\n                    if (attributes.step) {\n                        attr[kendo.attr(\"step\")] = attributes.step;\n                    }\n\n                    return attr;\n                },\n\n                _getAttributes: function(element) {\n                    var attr = {};\n\n                    var action = element.attr(kendo.attr(\"action\"));\n                    if (action) {\n                        attr.action = action;\n                    }\n\n                    var step = element.attr(kendo.attr(\"step\"));\n                    if (step) {\n                        attr.step = step;\n                    }\n\n                    return attr;\n                },\n\n                click: function(e) {\n                    var attributes = this._getAttributes($(e.target));\n                    var action = attributes.action;\n\n                    if (action && this[action]) {\n                        this[action](attributes);\n                    }\n\n                    this.trigger(\"click\", this.eventData(action, e.target));\n                },\n\n                eventData: function(action, target) {\n                    var elements = this.selectedElements(),\n                        length = elements.length,\n                        shapes = [], connections = [], element;\n\n                    for (var idx = 0; idx < length; idx++) {\n                        element = elements[idx];\n                        if (element instanceof kendo_diagramCommon_cmn_chunk_js.ap) {\n                            shapes.push(element);\n                        } else {\n                            connections.push(element);\n                        }\n                    }\n\n                    return {\n                        shapes: shapes,\n                        connections: connections,\n                        action: action,\n                        target: target\n                    };\n                },\n\n                \"delete\": function() {\n                    var diagram = this.diagram;\n                    var toRemove = diagram.widget._triggerRemove(this.selectedElements());\n                    if (toRemove.length) {\n                        this.diagram.remove(toRemove, true);\n                        this.diagram._syncChanges();\n                    }\n                },\n\n                edit: function() {\n                    var selectedElemens = this.selectedElements();\n                    if (selectedElemens.length === 1) {\n                        this.diagram.edit(selectedElemens[0]);\n                    }\n                },\n\n                rotateClockwise: function(options) {\n                    var angle = parseFloat(options.step || 90);\n                    this._rotate(angle);\n                },\n\n                rotateAnticlockwise: function(options) {\n                    var angle = parseFloat(options.step || 90);\n                    this._rotate(-angle);\n                },\n\n                _rotate: function(angle) {\n                    var adorner = this.diagram.widget._resizingAdorner;\n                    adorner.angle(adorner.angle() + angle);\n                    adorner.rotate();\n                },\n\n                selectedElements: function() {\n                    return this.diagram.select();\n                },\n\n                createShape: function() {\n                    this.diagram.createShape();\n                },\n\n                createConnection: function() {\n                    this.diagram.createConnection();\n                },\n\n                undo: function() {\n                    this.diagram.undo();\n                },\n\n                redo: function() {\n                    this.diagram.redo();\n                },\n\n                destroy: function() {\n                    this.diagram = null;\n                    this.element = null;\n                    this.options = null;\n\n                    if (this._toolBar) {\n                        this._toolBar.destroy();\n                    }\n\n                    if (this._popup) {\n                        this._popup.destroy();\n                    }\n                }\n            });\n\n            var Editor = kendo.Observable.extend({\n                init: function(element, options) {\n                    kendo.Observable.fn.init.call(this);\n\n                    this.options = extend(true, {}, this.options, options);\n                    this.element = element;\n                    this.model = this.options.model;\n                    this.fields = this._getFields();\n                    this._initContainer();\n                    this.createEditable();\n                },\n\n                options: {\n                    editors: {}\n                },\n\n                _initContainer: function() {\n                    this.wrapper = this.element;\n                },\n\n                createEditable: function() {\n                    var options = this.options;\n\n                    this.editable = new kendo.ui.Editable(this.wrapper, {\n                        fields: this.fields,\n                        target: options.target,\n                        clearContainer: false,\n                        model: this.model\n                    });\n                },\n\n                _isEditable: function(field) {\n                    return this.model.editable && this.model.editable(field);\n                },\n\n                _getFields: function() {\n                    var fields = [];\n                    var modelFields = this.model.fields;\n\n                    for (var field in modelFields) {\n                        var result = {};\n                        if (this._isEditable(field)) {\n                            var editor = this.options.editors[field];\n                            if (editor) {\n                                result.editor = editor;\n                            }\n                            result.field = field;\n                            fields.push(result);\n                        }\n                    }\n\n                    return fields;\n                },\n\n                end: function() {\n                    return this.editable.end();\n                },\n\n                destroy: function() {\n                    this.editable.destroy();\n                    this.editable.element.find(\"[\" + kendo.attr(\"container-for\") + \"]\").empty();\n                    this.model = this.wrapper = this.element = this.columns = this.editable = null;\n                }\n            });\n\n            var PopupEditor = Editor.extend({\n                init: function(element, options) {\n                    Editor.fn.init.call(this, element, options);\n                    this.bind(this.events, this.options);\n\n                    this.open();\n                },\n\n                events: [ \"update\", \"cancel\" ],\n\n                options: {\n                    window: {\n                        modal: true,\n                        resizable: false,\n                        draggable: true,\n                        title: \"Edit\",\n                        visible: false\n                    }\n                },\n\n                _initContainer: function() {\n                    var that = this;\n                    this.wrapper = $('<div class=\"k-popup-edit-form\"/>')\n                        .attr(kendo.attr(\"uid\"), this.model.uid);\n\n                    var formContent = \"\";\n\n                    if (this.options.template) {\n                        formContent += this._renderTemplate();\n                        this.fields = [];\n                    } else {\n                        formContent += this._renderFields();\n                    }\n\n                    formContent += this._renderButtons();\n\n                    this.wrapper.append(\n                        $('<div class=\"k-edit-form-container\"/>').append(formContent));\n\n                    this.window = new kendo.ui.Window(this.wrapper.appendTo(this.element), this.options.window);\n                    this.window.bind(\"close\", function(e) {\n                        //The bellow line is required due to: draggable window in IE, change event will be triggered while the window is closing\n                        if (e.userTriggered) {\n                            e.sender.element.trigger(\"focus\");\n                            that._cancelClick(e);\n                        }\n                    });\n\n                    this._attachButtonEvents();\n                },\n\n                _renderTemplate: function() {\n                    var template = this.options.template;\n\n                    if (typeof template === \"string\") {\n                        template = kendo.unescape(template);\n                    }\n\n                    template = kendo.template(template)(this.model);\n\n                    return template;\n                },\n\n                _renderFields: function() {\n                    var form = \"\";\n                    for (var i = 0; i < this.fields.length; i++) {\n                        var field = this.fields[i];\n\n                        form += '<div class=\"k-edit-label\"><label for=\"' + field.field + '\">' + (field.field || \"\") + '</label></div>';\n\n                        if (this._isEditable(field.field)) {\n                            form += '<div ' + kendo.attr(\"container-for\") + '=\"' + field.field +\n                            '\" class=\"k-edit-field\"></div>';\n                        }\n                    }\n\n                    return form;\n                },\n\n                _renderButtons: function() {\n                    var form = '<div class=\"k-edit-buttons\">';\n                    form += this._createButton(\"update\");\n                    form += this._createButton(\"cancel\");\n                    form += '</div>';\n                    return form;\n                },\n\n                _createButton: function(name) {\n                    return kendo.template(BUTTON_TEMPLATE)(defaultButtons[name]);\n                },\n\n                _attachButtonEvents: function() {\n                    this._cancelClickHandler = this._cancelClick.bind(this);\n                    this.window.element.on(CLICK + NS, \"button.k-diagram-cancel\", this._cancelClickHandler);\n\n                    this._updateClickHandler = this._updateClick.bind(this);\n                    this.window.element.on(CLICK + NS, \"button.k-diagram-update\", this._updateClickHandler);\n                },\n\n                _updateClick: function(e) {\n                    e.preventDefault();\n                    this.trigger(\"update\");\n                },\n\n                _cancelClick: function(e) {\n                    e.preventDefault();\n                    this.trigger(\"cancel\");\n                },\n\n                open: function() {\n                    this.window.center().open();\n                },\n\n                close: function() {\n                    this.window.bind(\"deactivate\", this.destroy.bind(this)).close();\n                },\n\n                destroy: function() {\n                    this.window.close().destroy();\n                    this.window.element.off(CLICK + NS, \"a.k-diagram-cancel\", this._cancelClickHandler);\n                    this.window.element.off(CLICK + NS, \"a.k-diagram-update\", this._updateClickHandler);\n                    this._cancelClickHandler = null;\n                    this._editUpdateClickHandler = null;\n                    this.window = null;\n                    Editor.fn.destroy.call(this);\n                }\n            });\n\n            function connectionSelector(container, options) {\n                var model = this.dataSource.reader.model;\n                if (model) {\n                    var textField = model.fn.fields.text ? \"text\" : model.idField;\n                    $(\"<input name='\" + options.field + \"' />\")\n                        .appendTo(container).kendoDropDownList({\n                            dataValueField: model.idField,\n                            dataTextField: textField,\n                            dataSource: this.dataSource.data().toJSON(),\n                            optionLabel: \" \",\n                            valuePrimitive: true\n                        });\n                }\n            }\n\n            function cloneDataItem(dataItem) {\n                var result = dataItem;\n                if (dataItem instanceof kendo.data.Model) {\n                    result = dataItem.toJSON();\n                    result[dataItem.idField] = dataItem._defaultId;\n                }\n                return result;\n            }\n\n            function createModel(dataSource, model) {\n                if (dataSource.reader.model) {\n                    return new dataSource.reader.model(model);\n                }\n\n                return new kendo.data.ObservableObject(model);\n            }\n\n            dataviz.ui.plugin(Diagram$1);\n\n            deepExtend(diagram, {\n                Shape: kendo_diagramCommon_cmn_chunk_js.ap,\n                Connection: kendo_diagramCommon_cmn_chunk_js.ar,\n                Connector: kendo_diagramCommon_cmn_chunk_js.ay,\n                DiagramToolBar: DiagramToolBar,\n                QuadNode: kendo_diagramCommon_cmn_chunk_js.ax,\n                QuadRoot: kendo_diagramCommon_cmn_chunk_js.aw,\n                ShapesQuadTree: kendo_diagramCommon_cmn_chunk_js.av,\n                PopupEditor: PopupEditor\n            });\n    })(window.kendo.jQuery);\n\n    const __meta__ = {\n            id: \"dataviz.diagram\",\n            name: \"Diagram\",\n            category: \"dataviz\",\n            description: \"The Kendo DataViz Diagram \",\n            depends: [\"data\", \"userevents\", \"mobile.scroller\", \"draganddrop\", \"drawing\", \"dataviz.core\", \"dataviz.themes\", \"toolbar\", \"diagram-common.cmn.chunk\"],\n            features: [{\n                id: \"dataviz.diagram-pdf-export\",\n                name: \"PDF export\",\n                description: \"Export Diagram as PDF\",\n                depends: [ \"pdf\" ]\n            },{\n                id: \"dataviz.diagram-editing\",\n                name: \"Editing\",\n                description: \"Support for model editing\",\n                depends: [ \"editable\", \"window\", \"dropdownlist\" ]\n            }]\n        };\n        var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}