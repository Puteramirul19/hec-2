{"version":3,"sources":["raw-js/kendo.timedurationpicker.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Timedurationpicker","this","$","undefined$1","window","ui","Widget","html","map","extend","mediaQuery","OPEN","CLOSE","CHANGE","FOCUSED","ARIA_EXPANDED","HOVEREVENTS","NS","STATEDISABLED","ARIA_HIDDEN","ARIA_DISABLED","ARIA_READONLY","DISABLED","READONLY","STATEINVALID","MASKCHAR","caret","keys","defaultColumns","hours","name","format","divider","min","max","step","minutes","seconds","milliseconds","days","TimeDurationPicker","init","element","options","columns","that","fn","call","_columns","column","extended","selectorFormat","repeat","match","length","readonly","Boolean","attr","enable","is","parents","inputMode","bigScreenMQL","adaptiveMode","onChange","_timeSelector","popup","wrapper","remove","destroy","_popupView","_wrapper","_button","_applyCssClasses","_input","_buildMask","_validation","_editable","disable","_ariaLabel","_listsContainer","value","_old","_maskedInput","val","_canUpdateLast","notify","separator","shortcuts","adaptiveTitle","adaptiveSubtitle","size","fillMode","rounded","messages","set","cancel","events","off","_value","parseInt","_updateValueFromTimeSelector","_toggleHover","e","currentTarget","toggleClass","type","add","addClass","removeClass","on","removeAttr","_attachHandlers","TimeSelector","id","anchor","mediaQueryList","matches","focus","trigger","_selectNearestSection","_lastCaret","close","preventDefault","open","change","_removeInvalidState","button","next","renderButton","icon","shape","insertAfter","role","part","toAdd","currentPartLength","_emtpyMask","_maskParts","i","replace","end","mask","symbolsLength","start","indexOf","numberEnd","lastIndexOf","numberStart","push","autocomplete","inputmode","insertBefore","hide","wrap","parent","_keydown","bind","_inputHandler","_focus","_focusout","_paste","_mouseDown","_mouseUp","_click","_mouseOnInput","selection","_triggerChange","_lastValue","_updateValueFromInput","setTimeout","index","_getPartValue","startSeparator","lastSeparator","substring","_getEmptyPart","_fillParts","clipNumber","symbols","parts","split","join","_clearParts","endBoundary","_updatePart","oldValue","entered","emrtyPart","current","search","_replacePart","newPart","toggle","_switchPart","future","past","key","keyCode","_backward","BACKSPACE","LEFT","RIGHT","visible","_scrollerKeyDownHandler","UP","DOWN","altKey","ENTER","partValue","masksToAdd","valueParts","rest","Math","floor","getTimeParts","_validationIcon","iconClass","_addInvalidState","colValue","values","valid","emptyPart","_isPasted","_pasted","clipboardData","originalEvent","getData","_replaceEntire","_activeElement","validEntry","updatedPart","endSubstring","startSubstring","deletedPart","canUpdate","restored","oldpartValue","nextSeparator","old","lengthDiff","test","cssProperties","registerPrefix","registerValues","prop","roundedValues","concat","plugin","jQuery","kendo$1","__meta__","category","description","docsCategory","depends","default","Object","defineProperty"],"mappings":"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","file":"kendo.timedurationpicker.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.timeselector.js'), require('kendo.icons.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.timeselector', 'kendo.icons'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Timedurationpicker = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n        id: \"timedurationpicker\",\n        name: \"TimeDurationPicker\",\n        category: \"web\",\n        description: \"The TimeDurationPicker widget allows the end user to select a time range stored in milliseconds.\",\n        docsCategory: \"editors\",\n        depends: [ \"timeselector\" ]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            Widget = ui.Widget,\n            html = kendo.html,\n            map = $.map,\n            extend = $.extend,\n            mediaQuery = kendo.mediaQuery,\n            OPEN = \"open\",\n            FOCUS = \"focus\",\n            CLOSE = \"close\",\n            CHANGE = \"change\",\n            CLICK = \"click\",\n            SPAN = \"<span></span>\",\n            KEYDOWN = \"keydown\",\n            FOCUSOUT = \"focusout\",\n            FOCUSED = \"k-focus\",\n            MOUSEUP = \"mouseup\",\n            MOUSEDOWN = \"mousedown\",\n            PASTE = \"paste\",\n            NS = \".kendoTimeDurationPicker\",\n            ARIA_EXPANDED = \"aria-expanded\",\n            HOVEREVENTS = \"mouseenter\" + NS + \" mouseleave\" + NS,\n            STRING = \"string\",\n            INPUT = \"input\",\n            HOVER = \"k-hover\",\n            STATEDISABLED = \"k-disabled\",\n            ARIA_HIDDEN = \"aria-hidden\",\n            ARIA_DISABLED = \"aria-disabled\",\n            ARIA_READONLY = \"aria-readonly\",\n            ARIA_READONLY = \"aria-readonly\",\n            DISABLED = \"disabled\",\n            READONLY = \"readonly\",\n            STATEINVALID = \"k-invalid\",\n            MASKCHAR = \"_\",\n            caret = kendo.caret,\n            keys = kendo.keys,\n            NS = \".kendoTimeDurationPicker\";\n            html = kendo.html;\n\n        var defaultColumns = {\n            \"hours\": {\n                name: \"hours\",\n                format: \"## hours\",\n                divider: 3600000,\n                min: 0,\n                max: 23,\n                step: 1\n            },\n            \"minutes\": {\n                name: \"minutes\",\n                format: \"## mins\",\n                divider: 60000,\n                min: 0,\n                max: 59,\n                step: 1\n            },\n            \"seconds\": {\n                name: \"seconds\",\n                format: \"## sec\",\n                divider: 1000,\n                min: 0,\n                max: 59,\n                step: 1\n            },\n            \"milliseconds\": {\n                name: \"milliseconds\",\n                format: \"### msec\",\n                min: 0,\n                max: 999,\n                step: 1\n            },\n            \"days\": {\n                format: \"### days\",\n                name: \"days\",\n                divider: 86400000,\n                min: 0,\n                max: 365,\n                step: 1\n            }\n        };\n\n        function convertToMsec(value) {\n            return ((value.days || 0) * 86400000) + ((value.hours || 0) * 3600000) + ((value.minutes || 0) * 60000) + ((value.seconds || 0) * 1000) + (value.milliseconds || 0);\n        }\n\n        function getTimeParts(value) {\n            var rest;\n            var days = Math.floor(value / 86400000);\n            rest = value % 86400000;\n            var hours = Math.floor(rest / 3600000);\n            rest = value % 3600000;\n            var minutes = Math.floor(rest / 60000);\n            rest = value % 60000;\n            var seconds = Math.floor(rest / 1000);\n            rest = value % 1000;\n\n            return {\n                days: days,\n                hours: hours,\n                minutes: minutes,\n                seconds: seconds,\n                milliseconds: rest\n            };\n        }\n\n        function normalizeColumns(columns) {\n            return map(columns, function(column) {\n                column = typeof column === STRING ? { name: column } : column;\n                var extended = extend(true, {}, defaultColumns[column.name], column);\n                extended.selectorFormat = \"{0:\" + \"0\".repeat(extended.format.match(/#/g).length) + \"}\";\n                return extended;\n            });\n        }\n\n        var TimeDurationPicker = Widget.extend({\n            init: function(element, options) {\n                var that = this;\n\n                options = options || {};\n\n                Widget.fn.init.call(that, element, options);\n\n                that._columns = normalizeColumns(options.columns);\n                that.options.columns = that._columns;\n                that.options.readonly = options.readonly !== undefined$1 ? options.readonly : Boolean(that.element.attr(\"readonly\"));\n                that.options.enable = options.enable !== undefined$1 ? options.enable : !(Boolean(that.element.is(\"[disabled]\") || $(element).parents(\"fieldset\").is(':disabled')));\n                that.options.inputMode = options.inputMode || that.element.attr(\"inputmode\") || \"text\";\n\n                that.bigScreenMQL = mediaQuery(\"large\");\n                if (that.options.adaptiveMode == \"auto\") {\n                    that.bigScreenMQL.onChange(()=> {\n                        if (that._timeSelector) {\n                            if (that._timeSelector.popup && that._timeSelector.popup.wrapper) {\n                                that._timeSelector.popup.wrapper.remove();\n                            }\n                            that._timeSelector.destroy();\n                            that._timeSelector = null;\n                        }\n\n                        that._popupView();\n                    });\n                }\n\n                that._wrapper();\n                that._button();\n                that._applyCssClasses();\n                that._input();\n                that._popupView();\n\n                that._buildMask();\n                that._validation();\n                that._editable({\n                    readonly: that.options.readonly,\n                    disable: !that.options.enable\n                });\n                that._ariaLabel(that._timeSelector._listsContainer);\n                if (that.options.value) {\n                    that.value(options.value);\n                    that._old = that._maskedInput.val();\n                }\n                that._canUpdateLast = true;\n\n                kendo.notify(that);\n            },\n\n            options: {\n                name: \"TimeDurationPicker\",\n                columns: [],\n                separator: \",\",\n                shortcuts: [],\n                value: null,\n                adaptiveMode: \"none\",\n                adaptiveTitle: null,\n                adaptiveSubtitle: null,\n                size: \"medium\",\n                fillMode: \"solid\",\n                rounded: \"medium\",\n                messages: {\n                    set: \"Set\",\n                    cancel: \"Cancel\",\n                    days: \"Days\",\n                    hours: \"Hours\",\n                    minutes: \"Minutes\",\n                    milliseconds: \"Milliseconds\",\n                    seconds: \"Seconds\"\n                }\n            },\n\n            events: [\n                OPEN,\n                CLOSE,\n                CHANGE\n            ],\n\n            destroy: function() {\n                var that = this;\n\n                that.wrapper.off(NS);\n                that._maskedInput.off(NS);\n                if (that._timeSelector) {\n                    that._timeSelector.destroy();\n                    that._timeSelector = null;\n                }\n\n\n                if (that.bigScreenMQL) {\n                    that.bigScreenMQL.destroy();\n                }\n            },\n\n            value: function(value) {\n                var that = this;\n\n                if (value === undefined$1) {\n                    return that._value;\n                }\n\n                if (typeof value === \"number\") {\n                    value = parseInt(value);\n                } else {\n                    value = null;\n                }\n\n                that._value = value;\n                that.element.val(that._value);\n                that._timeSelector._value = that._value;\n                that._updateValueFromTimeSelector();\n            },\n\n            _toggleHover: function(e) {\n                $(e.currentTarget).toggleClass(HOVER, e.type === \"mouseenter\");\n            },\n\n            _editable: function(options) {\n                var that = this,\n                    disable = options.disable,\n                    readonly = options.readonly,\n                    element = that._maskedInput.add(that.element).off(NS),\n                    wrapper = that.wrapper.off(NS);\n\n                if (!readonly && !disable) {\n                    wrapper\n                        .removeClass(STATEDISABLED)\n                        .on(HOVEREVENTS, that._toggleHover);\n\n                    if (element && element.length) {\n                        element.removeAttr(DISABLED);\n                        element.removeAttr(READONLY);\n                    }\n                    element.attr(ARIA_DISABLED, false)\n                           .attr(ARIA_READONLY, false);\n\n                    that._attachHandlers();\n                } else {\n                    wrapper\n                        .addClass(disable ? STATEDISABLED : \"\")\n                        .removeClass(disable ? \"\" : STATEDISABLED);\n\n                    element.attr(DISABLED, disable)\n                           .attr(READONLY, readonly)\n                           .attr(ARIA_DISABLED, disable)\n                           .attr(ARIA_READONLY, readonly);\n                }\n            },\n\n            readonly: function(readonly) {\n                this._editable({\n                    readonly: readonly === undefined$1 ? true : readonly,\n                    disable: false\n                });\n            },\n\n            enable: function(enable) {\n                this._editable({\n                    readonly: false,\n                    disable: !(enable = enable === undefined$1 ? true : enable)\n                });\n            },\n\n            _popupView: function() {\n                var that = this;\n                var options = that.options;\n\n                if (!that._timeSelector) {\n                    that._timeSelector = new kendo.ui.TimeSelector(that._maskedInput, {\n                        id: that.element.attr(\"id\") + \"_timeSelector\",\n                        anchor: that.wrapper,\n                        adaptiveMode: options.adaptiveMode,\n                        adaptiveTitle: options.adaptiveTitle,\n                        adaptiveSubtitle: options.adaptiveSubtitle,\n                        columns: options.columns,\n                        shortcuts: options.shortcuts,\n                        value: options.value,\n                        size: options.adaptiveMode != \"auto\" || that.bigScreenMQL.mediaQueryList.matches ? options.size : \"large\",\n                        fillMode: options.fillMode,\n                        rounded: options.rounded,\n                        messages: options.messages,\n                        focus: function() {\n                            that._maskedInput.trigger(\"focus\");\n                            that._selectNearestSection(that._lastCaret || 0);\n                        },\n                        close: function(e) {\n                            if (that.trigger(CLOSE)) {\n                                e.preventDefault();\n                            } else {\n                                that._maskedInput.attr(ARIA_EXPANDED, false);\n                                that._timeSelector._listsContainer.attr(ARIA_HIDDEN, true);\n                            }\n                        },\n                        open: function(e) {\n                            if (that.trigger(OPEN)) {\n                                e.preventDefault();\n                            } else {\n                                that._maskedInput.attr(ARIA_EXPANDED, true);\n                                that._timeSelector._listsContainer.attr(ARIA_HIDDEN, false);\n                                that._lastCaret = caret(that._maskedInput)[0];\n                                if (that._lastCaret === that._maskedInput.val().length) {\n                                    that._lastCaret = 0;\n                                }\n                            }\n                        },\n                        change: function(value) {\n                            that._value = value;\n                            that._updateValueFromTimeSelector();\n                            that._removeInvalidState();\n                            that.trigger(CHANGE);\n                        }\n                    });\n                }\n            },\n\n            _button: function() {\n                var that = this,\n                    element = that.element,\n                    options = that.options,\n                    button;\n\n                button = element.next(\"button.k-input-button\");\n\n                if (!button[0]) {\n                    button = $(html.renderButton('<button unselectable=\"on\" tabindex=\"-1\" class=\"k-input-button\" aria-label=\"select\"></button>', {\n                        icon: \"clock-arrow-rotate\",\n                        size: options.size,\n                        fillMode: options.fillMode,\n                        shape: \"none\",\n                        rounded: \"none\"\n                    })).insertAfter(element);\n                }\n\n                that._button = button.attr({\n                    \"role\": \"button\"\n                });\n            },\n\n            _buildMask: function() {\n                var columns = this.options.columns;\n                var format;\n                var toAdd = \"\";\n                var part;\n                var currentPartLength = 0;\n\n                this._emtpyMask = \"\";\n                this._maskParts = [];\n\n                for (var i = 0; i < columns.length; i++) {\n                    part = {};\n                    format = columns[i].format;\n\n                    if (i) {\n                        toAdd = this.options.separator;\n                    }\n\n                    toAdd += format.replace(/#/g, '_');\n                    this._emtpyMask += toAdd;\n                    part.end = this._emtpyMask.length - 1;\n                    part.mask = format.replace(/#/g, '_');\n                    part.symbolsLength = part.mask.match(/_/g).length;\n                    part.start = this._emtpyMask.indexOf(part.mask, currentPartLength);\n                    part.numberEnd = this._emtpyMask.lastIndexOf(MASKCHAR) + 1;\n                    part.numberStart = this._emtpyMask.indexOf(MASKCHAR, part.start);\n\n                    currentPartLength += part.mask.length;\n                    this._maskParts.push(part);\n                }\n\n                this._old = this._emtpyMask;\n                this._maskedInput.val(this._emtpyMask);\n            },\n\n            _input: function() {\n                var that = this;\n\n                that._maskedInput = $(\"<input />\")\n                            .attr(kendo.attr(\"validate\"), \"false\")\n                            .attr({\n                                \"role\": \"combobox\",\n                                \"aria-expanded\": false,\n                                \"aria-controls\": that.element.attr(\"id\") + \"_timeSelector\",\n                                \"autocomplete\": \"off\",\n                                \"inputmode\": that.options\n                            })\n                            .addClass(\"k-input-inner\")\n                            .insertBefore(that.element);\n\n                let inputMode = that.options.inputMode;\n                if (inputMode) {\n                    that._maskedInput.attr(\"inputmode\", inputMode);\n                }\n\n                that.element.hide();\n            },\n\n            _wrapper: function() {\n                var that = this,\n                    element = that.element,\n                    wrapper;\n\n                wrapper = element.parents(\".k-timedurationpicker\");\n\n                if (!wrapper[0]) {\n                    wrapper = element.wrap(SPAN).parent();\n                }\n\n                that.wrapper = wrapper.addClass(\"k-timedurationpicker k-input\");\n            },\n\n            _attachHandlers: function() {\n                var that = this;\n\n                that._maskedInput\n                        .on(KEYDOWN + NS, that._keydown.bind(that))\n                        .on(INPUT + NS, that._inputHandler.bind(that))\n                        .on(FOCUS + NS, that._focus.bind(that))\n                        .on(FOCUSOUT + NS, that._focusout.bind(that))\n                        .on(PASTE + NS, that._paste.bind(that))\n                        .on(MOUSEDOWN + NS, that._mouseDown.bind(that))\n                        .on(MOUSEUP + NS, that._mouseUp.bind(that));\n\n                that.wrapper.on(CLICK + NS, \".k-input-button\", that._click.bind(that));\n            },\n\n            _mouseDown: function() {\n                this._mouseOnInput = true;\n            },\n\n            _mouseUp: function() {\n                var selection = caret(this._maskedInput[0]);\n                var value = this._maskedInput[0].value;\n                if (selection[0] === selection[1]) {\n                    this._selectNearestSection(selection[1] == value.length ? value.length - 1 : selection[1]);\n                }\n            },\n\n            _triggerChange: function() {\n                if ((this._lastValue == undefined$1 && this._value) || this._lastValue != this._value) {\n                    this._lastValue = this._value;\n                    this.trigger(CHANGE);\n                }\n            },\n\n            _focusout: function() {\n                this._updateValueFromInput();\n                this._triggerChange();\n\n                this._canUpdateLast = true;\n                this.wrapper.removeClass(FOCUSED);\n            },\n\n            _focus: function() {\n                var that = this;\n                if (!that._mouseOnInput) {\n                    setTimeout(function() {\n                        that._selectNearestSection(0);\n                    }, 10);\n                }\n                that._mouseOnInput = false;\n                that.wrapper.addClass(FOCUSED);\n            },\n\n            _selectNearestSection: function(index) {\n                var part;\n\n                for (var i = 0; i < this._maskParts.length; i++ ) {\n                    part = this._maskParts[i];\n                    if (index >= part.start && index <= part.end) {\n                        caret(this._maskedInput[0], part.numberStart, part.numberEnd);\n                    }\n                }\n            },\n\n            _getPartValue: function(value, index) {\n                var that = this;\n                var separator = that.options.separator;\n                var startSeparator = value.indexOf(separator,index);\n                var lastSeparator = value.lastIndexOf(separator,index);\n                return value.substring(lastSeparator < 0 ? 0 : lastSeparator + 1 , startSeparator < 0 ? value.length : startSeparator );\n            },\n\n            _getEmptyPart: function(index) {\n                return this._getPartValue(this._emtpyMask, index);\n            },\n\n            _fillParts: function(clipNumber) {\n                var parts = this._emtpyMask.split(this.options.separator);\n                var symbols;\n                clipNumber = clipNumber + \"\";\n\n                for (var i = 0; i < parts.length; i++) {\n                    symbols = parts[i].match(/_/g).length;\n                    if (symbols > clipNumber.length) {\n                        parts[i] = parts[i].replace(MASKCHAR.repeat(symbols), \"0\".repeat(symbols - clipNumber.length) + clipNumber);\n                    } else {\n                        parts[i] = parts[i].replace(MASKCHAR.repeat(symbols), clipNumber.substring(0, symbols));\n                        clipNumber = clipNumber.substring(symbols, symbols.length);\n                    }\n                }\n                return parts.join(this.options.separator);\n            },\n\n            _clearParts: function(value, start, end) {\n                var parts = value.split(this.options.separator);\n                var index = 0;\n                var endBoundary;\n\n                for (var i = 0; i < parts.length; i++) {\n                    endBoundary = index + parts[i].length;\n                    if ((index <= start && endBoundary >= start) || (index <= end && endBoundary >= end)) {\n                        parts[i] = this._getEmptyPart(index);\n                    }\n                    index += (parts[i].length + 1);\n                }\n                return parts.join(this.options.separator);\n            },\n\n            _updatePart: function(oldValue, entered) {\n                var emrtyPart = this._getEmptyPart(this._old.indexOf(oldValue));\n                var current = oldValue.substring(emrtyPart.indexOf(MASKCHAR), emrtyPart.lastIndexOf(MASKCHAR) + 1);\n                var format = \"{0:\" + \"0\".repeat(current.length) + \"}\";\n\n                if (current.indexOf(MASKCHAR) >= 0 || !(oldValue[oldValue.search(/[0-9]/)] === \"0\") || entered.length > 1) {\n                    return oldValue.replace(current, kendo.format(format, parseInt(entered)));\n                } else {\n                    return oldValue.replace(current, kendo.format(format, parseInt(current + entered)));\n                }\n            },\n\n            _replacePart: function(oldValue, newPart, index) {\n                return oldValue.replace(this._getPartValue(oldValue, index), newPart);\n            },\n\n            _click: function() {\n                var that = this;\n\n                if (!that._timeSelector) {\n                    return;\n                }\n\n                that._timeSelector.toggle();\n            },\n\n            _switchPart: function(options) {\n                var separator = this.options.separator;\n                var selection = options.caret != undefined$1 ? options.caret : caret(this._maskedInput[0])[0];\n                var value = this._maskedInput.val();\n                var index;\n\n                if (options.next) {\n                    index = value.indexOf(separator, selection);\n                    if (index < 0) {\n                        index = value.length - 1;\n                    } else {\n                        index++;\n                    }\n                } else {\n                    index = value.lastIndexOf(separator, selection);\n                    if (index < 0 ) {\n                        index = 0;\n                    } else {\n                        index--;\n                    }\n                }\n                this._selectNearestSection(index);\n            },\n\n            _keydown: function(e) {\n                var key = e.keyCode;\n                var separator = this.options.separator;\n                var selection;\n                var value;\n                var index;\n                var future;\n                var past;\n\n                this._backward = key === keys.BACKSPACE;\n                if (key == keys.LEFT || key == keys.RIGHT) {\n                    e.preventDefault();\n                    selection = caret(this._maskedInput[0])[0];\n                    value = this._maskedInput.val();\n                    future = value.indexOf(separator, selection);\n                    past = value.lastIndexOf(separator, selection);\n\n                    if ((future < 0 && key == keys.RIGHT) || (past < 0 && key == keys.LEFT)) {\n                        return;\n                    }\n\n                    index = (key == keys.LEFT) ? (past - 1) : (future + 1);\n                    this._selectNearestSection(index);\n                    if (key == keys.LEFT) {\n                        this._canUpdateLast = true;\n                    }\n                } else if (this._timeSelector.popup.visible()) {\n                    this._timeSelector._scrollerKeyDownHandler(e);\n                } else if (key == keys.UP || key == keys.DOWN) {\n                    e.preventDefault();\n                    if (e.altKey) {\n                        this._timeSelector.toggle();\n                    }\n                } else if (key == keys.ENTER) {\n                    this._updateValueFromInput();\n                    this._triggerChange();\n                }\n            },\n\n            _updateValueFromTimeSelector: function() {\n                var that = this;\n                var valueParts = getTimeParts(that._value);\n                var value = \"\";\n                var column = this._columns[i];\n                var part;\n                var partValue;\n                var masksToAdd;\n\n                for (var i = 0; i < this._columns.length; i++) {\n                    column = this._columns[i];\n                    partValue = valueParts[column.name] + '';\n                    part = this._maskParts[i];\n\n                    if (i) {\n                        value += that.options.separator;\n                    }\n\n                    if (!valueParts[column.name]) {\n                        value += part.mask;\n                        continue;\n                    }\n\n                    masksToAdd = part.symbolsLength - partValue.length;\n                    value += part.mask.replace(MASKCHAR.repeat(part.symbolsLength), \"0\".repeat(masksToAdd < 0 ? 0 : masksToAdd) + partValue);\n                }\n\n                that._maskedInput.val(value);\n                that._old = value;\n            },\n\n            _validation: function() {\n                var that = this;\n                var element = that.element;\n\n                that._validationIcon = $(kendo.ui.icon({ icon: \"exclamation-circle\", iconClass: \"k-input-validation-icon k-hidden\" })).insertAfter(element);\n            },\n\n            _addInvalidState: function() {\n                this.wrapper.addClass(STATEINVALID);\n                this._validationIcon.removeClass('k-hidden');\n            },\n\n            _removeInvalidState: function() {\n                this.wrapper.removeClass(STATEINVALID);\n                this._validationIcon.addClass('k-hidden');\n            },\n\n            _updateValueFromInput: function() {\n                var val = this._maskedInput.val();\n                var values = {};\n                var valid = true;\n                var column;\n                var part;\n                var colValue;\n\n                for (var i = 0; i < this._columns.length; i++) {\n                    column = this._columns[i];\n                    part = this._maskParts[i];\n                    colValue = val.substring(part.numberStart, part.numberEnd).replace(/_/g, \"\");\n                    colValue = kendo.parseInt(colValue || 0);\n\n                    if (colValue >= column.min && colValue <= column.max) {\n                        values[column.name] = colValue;\n                    } else {\n                        valid = false;\n                        break;\n                    }\n                }\n\n                if (valid) {\n                    this._value = convertToMsec(values);\n                    this.element.val(this._value || \"\");\n                    this._timeSelector._value = this._value;\n                    this._removeInvalidState();\n                } else {\n                    this._addInvalidState();\n                }\n            },\n\n            _paste: function(e) {\n                this._isPasted = true;\n                this._pasted = (e.clipboardData || e.originalEvent.clipboardData).getData('Text');\n                var emptyPart;\n\n                var selection = caret(this._maskedInput);\n\n                if (this._maskedInput.val().length == selection[1] && !selection[0]) {\n                    this._replaceEntire = true;\n                } else {\n                    emptyPart = this._getEmptyPart(selection[0]);\n                    this._pasted = this._pasted.substring(0, emptyPart.match(/_/g).length);\n                }\n            },\n\n            _inputHandler: function() {\n                if (kendo._activeElement() !== this._maskedInput[0]) {\n                    return;\n                }\n\n                var that = this;\n                var old = that._old;\n                var separator = that.options.separator;\n                var value = that._maskedInput[0].value;\n                var selection = caret(that._maskedInput)[0];\n                var lengthDiff = old.length - value.length;\n                var entered;\n                var validEntry;\n                var updatedPart;\n                var endSubstring;\n                var startSubstring;\n                var deletedPart;\n                var emptyPart;\n                var canUpdate;\n                var restored;\n                var oldpartValue;\n                var nextSeparator;\n\n                entered = that._isPasted ? that._pasted : value.substring(selection - 1, selection);\n                validEntry = /\\d/.test(entered);\n\n                if (that._isPasted && that._replaceEntire && validEntry) {\n                    that._old = that._fillParts(parseInt(entered));\n                    that._maskedInput.val(that._old);\n                    that._selectNearestSection(0);\n                    that._isPasted = that._replaceEntire = false;\n                    return;\n                }\n\n                if (that._isPasted) {\n                    lengthDiff = 0;\n                }\n\n                that._isPasted = false;\n\n                if ((entered === separator && !that._backward)) {\n                    that._maskedInput.val(that._old);\n                    that._switchPart({ caret: selection, next: true });\n                    return;\n                }\n\n                if (!value && that._backward) {\n                    that._old = that._emtpyMask;\n                    that._maskedInput.val(that._old);\n                    that._selectNearestSection(selection);\n                    return;\n                }\n\n                if ((!validEntry && !that._backward)) {\n                    that._maskedInput.val(that._old);\n                    that._selectNearestSection(selection);\n                    return;\n                }\n\n                if (!lengthDiff || lengthDiff > 0) {\n                    endSubstring = value.substring(selection, value.length);\n                    startSubstring = value.substring(0, selection);\n                    deletedPart = that._emtpyMask.substring(startSubstring.length, old.indexOf(endSubstring));\n\n                    restored = startSubstring + deletedPart + endSubstring;\n                    oldpartValue = that._getPartValue(that._old, selection);\n                    nextSeparator = that._old.indexOf(separator, that._old.indexOf(oldpartValue) + 1);\n\n                    if (that._backward) {\n                        // if multiple parts\n                        if (deletedPart.split(separator).length > 1) {\n                            that._old = this._clearParts(restored, selection, selection + deletedPart.length);\n                        } else {\n                            emptyPart = this._getEmptyPart(selection);\n                            if (emptyPart == oldpartValue) {\n                                that._maskedInput.val(that._old);\n                                that._switchPart({ caret: selection });\n                                return;\n                            }\n                            that._old = that._replacePart(restored, emptyPart, selection);\n                        }\n                        that._maskedInput.val(that._old);\n                        that._selectNearestSection(selection);\n                        return;\n                    }\n\n                    if (nextSeparator < 0 && oldpartValue.indexOf(MASKCHAR) === -1 && !that._canUpdateLast) {\n                        that._maskedInput.val(that._old);\n                        that._selectNearestSection(selection);\n                        return;\n                    }\n\n                    if (validEntry) {\n                        updatedPart = that._updatePart(oldpartValue, entered);\n                        canUpdate = updatedPart[updatedPart.search(/[0-9]/)] === \"0\";\n                        restored = that._replacePart(restored, updatedPart, selection);\n                        that._maskedInput.val(restored);\n                        if (nextSeparator > 0 && !canUpdate) {\n                            that._selectNearestSection(nextSeparator + 1, true);\n                        } else {\n                            that._selectNearestSection(selection);\n                        }\n\n                        that._canUpdateLast = !(nextSeparator < 0 && !canUpdate);\n                    }\n                    that._old = restored;\n                } else if (lengthDiff < 0) {\n                    that._maskedInput.val(that._old);\n                    that._selectNearestSection(that._old.length - 1);\n                }\n            },\n\n        });\n\n        kendo.cssProperties.registerPrefix(\"TimeDurationPicker\", \"k-input-\");\n\n        kendo.cssProperties.registerValues(\"TimeDurationPicker\", [{\n            prop: \"rounded\",\n            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n\n        ui.plugin(TimeDurationPicker);\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}