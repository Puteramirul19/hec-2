{"version":3,"sources":["raw-js/kendo.inlineaiprompt.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Inlineaiprompt","this","$","window","Widget","ui","PROMPT_REQUEST","PROMPT_RESPONSE","PROMPT_ACTION","InlineAIPrompt","extend","init","element","options","that","systemPrompt","fn","call","commands","transport","data","AiTransport","service","success","_serviceSuccess","bind","requestStart","progress","_popup","_initPopup","_initContextMenu","_bindEvents","notify","name","context","prompt","events","open","x","y","output","find","html","show","trigger","_template","width","css","Popup","anchor","animation","effects","duration","close","hide","empty","val","_aiContextMenu","renderButton","attr","icon","fillMode","length","addClass","itemsHtml","map","command","_createCommandHtml","join","append","kendoContextMenu","target","showOn","appendTo","document","body","filter","select","_executeCommand","focus","renderIcon","text","items","item","id","e","_findCommand","getAttribute","query","selection","read","history","isRetry","found","on","_requestService","keyCode","currentTarget","action","content","trim","destroy","toolbar","_selectedView","off","plugin","jQuery","kendo$1","__meta__","category","description","depends","default","Object","defineProperty","value"],"mappings":";;;;;;;;CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,oBAAAC,OAAAF,EAAAC,QAAAE,QAAA,iBAAAA,QAAA,iBAAAA,QAAA,kBAAAA,QAAA,qBAAAA,QAAA,mBAAAA,QAAA,oBAAAA,QAAA,mBACA,mBAAAC,QAAAA,OAAAC,IAAAD,OAAA,CAAA,UAAA,iBAAA,iBAAA,kBAAA,qBAAA,mBAAA,oBAAA,mBAAAJ,GACAA,IAAAD,EAAA,oBAAAO,WAAAA,WAAAP,GAAAQ,MAAAC,MAAAT,EAAAS,OAAA,CAAA,EAAAT,EAAAS,MAAAC,SAAAV,EAAAS,MAAAC,UAAA,CAAA,EAAAV,EAAAS,MAAAC,SAAAC,eAAA,CAAA,GACA,CAJA,CAIAC,MAAA,SAAAV,IASA,SAAAW,GACA,IAAAJ,EAAAK,OAAAL,MACAM,EAAAN,EAAAO,GAAAD,OAEAC,EAAAP,EAAAO,GAEAC,EAAA,gBACAC,EAAA,iBACAC,EAAA,eAIAC,EAAAL,EAAAM,OAAA,CACAC,KAAA,SAAAC,EAAAC,GACA,IAAAC,EAAAb,KACAY,EAAAA,GAAA,CAAA,EAEAC,EAAAD,QAAAE,aAAAF,EAAAE,cAAAD,EAAAD,QAAAE,aACAX,EAAAY,GAAAL,KAAAM,KAAAH,EAAAF,EAAAC,GAEAA,EAAAK,WACAJ,EAAAD,QAAAK,SAAAL,EAAAK,UAGAJ,EAAAK,UAAA,IAAArB,EAAAsB,KAAAC,YAAA,CACAC,QAAAR,EAAAD,QAAAS,QACAC,QAAAT,EAAAU,gBAAAC,KAAAX,GACAY,aAAA,IAAA5B,EAAAO,GAAAsB,SAAAb,EAAAc,OAAAhB,SAAA,KAGAE,EAAAe,aACAf,EAAAgB,mBACAhB,EAAAiB,cAEAjC,EAAAkC,OAAAlB,EACA,EAEAD,QAAA,CACAoB,KAAA,iBACAlB,aAAA,CAAAmB,EAAAC,IAAA,wiBAMAD,yFAGAC,iDAGAjB,SAAA,IAGAkB,OAAA,CACA9B,EACAC,EACAC,GAGA6B,KAAA,SAAAC,EAAAC,GACAtC,KAEA2B,OAAAS,KAAAC,EAAAC,EACA,EAEAf,gBAAA,SAAAgB,GACA,MAAA1B,EAAAb,KAEAa,EAAAc,OAAAhB,QAAA6B,KAAA,gBAAAC,KAAAF,EAAAA,QACA1B,EAAAc,OAAAhB,QAAA6B,KAAA,WAAAE,OACA7B,EAAA8B,QAAArC,EAAA,CAAAiC,WACA1C,EAAAO,GAAAsB,SAAAb,EAAAc,OAAAhB,SAAA,EACA,EAEAiB,WAAA,WACA,MAAAf,EAAAb,KACAyC,EAAAxC,EAAAY,EAAA+B,aAAAC,MAAAhC,EAAAD,QAAAiC,OACAJ,EAAAK,IAAA,CAAA,YAAA,SAEAjC,EAAAc,OAAA,IAAA9B,EAAAO,GAAA2C,MAAAN,EAAA,CACAO,OAAAnC,EAAAF,QACAsC,UAAA,CACAb,KAAA,CACAc,QAAA,UACAC,SAAA,KAEAC,MAAA,CACAF,QAAA,WACAC,SAAA,MAGAf,KAAA,WACApC,KAAAW,QAAA6B,KAAA,WAAAa,OACArD,KAAAW,QAAA6B,KAAA,gBAAAc,QACAtD,KAAAW,QAAA6B,KAAA,kBAAAe,IAAA,GACA,EACAH,MAAA,WACAvD,EAAAO,GAAAsB,SAAAb,EAAAc,OAAAhB,SAAA,GACAE,EAAA2C,gBAAAJ,OACA,GAEA,EAEAR,UAAA,WA6BA,MA5BA,kmBAQA/C,EAAA4C,KAAAgB,aAAA,WAAA5D,EAAA6D,KAAA,qCAAA,CAAAC,KAAA,gBAAAC,SAAA,yDACA/D,EAAA4C,KAAAgB,aAAA,WAAA5D,EAAA6D,KAAA,uCAAA,CAAAC,KAAA,QAAAC,SAAA,yDACA/D,EAAA4C,KAAAgB,aAAA,WAAA5D,EAAA6D,KAAA,sCAAA,CAAAC,KAAA,iBAAAC,SAAA,kWAKA/D,EAAA4C,KAAAgB,aAAA,oBAAA,CAAAE,KAAA,WAAAC,SAAA,sWAIA/D,EAAA4C,KAAAgB,aAAA,oBAAA,CAAAE,KAAA,cAAAC,SAAA,wQAUA,EAEA/B,iBAAA,WACA,MAAAhB,EAAAb,KACA,IAAAa,EAAAD,QAAAK,UAAA,IAAAJ,EAAAD,QAAAK,UAAA4C,OAEA,YADAhD,EAAAc,OAAAhB,QAAA6B,KAAA,0BAAAsB,SAAA,cAIA,MAAAC,EAAAlD,EAAAD,QAAAK,SAAA+C,KAAAC,GAAApD,EAAAqD,mBAAAD,KAAAE,KAAA,IACA1B,EAAAxC,EAAA,yCACA8D,wCAGA9D,EAAA,QAAAmE,OAAA3B,GAEA5B,EAAA2C,eAAAf,EAAA4B,iBAAA,CACAC,OAAAzD,EAAAc,OAAAhB,QACAqC,OAAAnC,EAAAc,OAAAhB,QACA4D,OAAA,QACAC,SAAAvE,EAAAwE,SAAAC,MACAC,OAAA,WACAC,OAAA/D,EAAAgE,gBAAArD,KAAAX,GACAuC,MAAA,KACAvC,EAAAc,OAAAhB,QAAA6B,KAAA,kBAAAsC,OAAA,IAEA3D,KAAA,mBACA,EAEA+C,mBAAA,SAAAD,GACA,MAAApD,EAAAb,KACA2D,EAAA9D,EAAA4C,KAAAsC,WAAA,CAAApB,KAAAM,EAAAN,OACAqB,EAAAf,EAAAe,KAEAjB,GADAE,EAAAgB,OAAA,IACAjB,KAAAkB,GAAArE,EAAAqD,mBAAAgB,KAAAf,KAAA,IAEA,MAAA,OAAAtE,EAAA6D,KAAA,WAAAO,EAAAkB,MAAAxB,KAAAqB,IAAAjB,EAAA,OAAAA,EAAA,QAAA,SACA,EAEAc,gBAAA,SAAAO,GACA,MAAAvE,EAAAb,KACAiE,EAAApD,EAAAwE,aAAAxE,EAAAD,QAAAK,SAAAmE,EAAAF,KAAAI,aAAAzF,EAAA6D,KAAA,UACAvC,EAAA,CACAoE,MAAAtB,EAAAkB,GACAK,UAAA,IAGA3E,EAAA8B,QAAAtC,EAAAc,GAEA,MAAAqE,EAAArE,EAAAqE,WAAArE,EAAAc,QACAC,EAAA+B,EAAA/B,OAAAsD,GAEA3E,EAAA2C,gBAAAJ,QAEAvC,EAAAK,UAAAuE,KAAA,CAAAvD,SAAAwD,QAAA,GAAAC,SAAA,GACA,EAEAN,aAAA,SAAApE,EAAAkE,GACA,MAAAtE,EAAAb,KAEA,IAAA,MAAAiE,KAAAhD,EAAA,CACA,GAAAgD,EAAAkB,KAAAA,EACA,OAAAlB,EAGA,GAAAA,EAAAgB,MAAA,CACA,MAAAW,EAAA/E,EAAAwE,aAAApB,EAAAgB,MAAAE,GAEA,GAAAS,EACA,OAAAA,CAEA,CACA,CACA,EAEA9D,YAAA,WACA,MAAAjB,EAAAb,KAEAa,EAAAc,OAAAhB,QAAA6B,KAAA,0BAAAqD,GAAA,SAAA,WACAhF,EAAA2C,gBAAApB,MACA,IAEAvB,EAAAc,OAAAhB,QAAA6B,KAAA,0BAAAqD,GAAA,SAAA,WACA,MAAA3D,EAAArB,EAAAc,OAAAhB,QAAA6B,KAAA,kBAAAe,MAEA1C,EAAAiF,gBAAA5D,EACA,IAEArB,EAAAc,OAAAhB,QAAA6B,KAAA,kBAAAqD,GAAA,YAAA,SAAAT,GACA,GAAA,KAAAA,EAAAW,QAAA,CACA,MAAA7D,EAAAjC,EAAAmF,EAAAY,eAAAzC,MAEA1C,EAAAiF,gBAAA5D,EACA,CACA,IAEArB,EAAAc,OAAAhB,QAAA6B,KAAA,0BAAAqD,GAAA,SAAA,SAAAT,GACA,MAAAa,EAAAhG,EAAAmF,EAAAY,eAAAtC,KAAA7D,EAAA6D,KAAA,WACAwC,EAAArF,EAAAc,OAAAhB,QAAA6B,KAAA,gBAAAwC,OAEAnE,EAAA8B,QAAApC,EAAA,CAAA0F,SAAAC,YACArF,EAAAc,OAAAyB,OACA,GACA,EAEA0C,gBAAA,SAAAP,GACA,MAAA1E,EAAAb,KACAmB,EAAA,CACAoE,QACAtD,QAAA,IAGA,IAAAsD,EAAAY,OACA,OAGAtF,EAAA8B,QAAAtC,EAAAc,GAEA,MAAAc,EAAAd,EAAAc,QACAC,EAAArB,EAAAD,QAAAE,aAAAmB,EAAAsD,GAEA1E,EAAAK,UAAAuE,KAAA,CAAAvD,SAAAwD,QAAA,GAAAC,SAAA,GACA,EAEAb,MAAA,WACA9E,KACAW,QAAAgC,QA1PA,QA2PA,EAEAyD,QAAA,WACA,IAAAvF,EAAAb,KAEAa,EAAAwF,SAAAD,UACAvF,EAAAyF,eAAAF,UAEAvF,EAAAF,QAAA4F,IA1QA,wBA4QApG,EAAAY,GAAAqF,QAAApF,KAAAH,EACA,IAGAT,EAAAoG,OAAAhG,EAEA,CArRA,CAqRAN,OAAAL,MAAA4G,QACA,IAAAC,EAAA7G,MAEAP,EAAAqH,SAhSA,CACAxB,GAAA,iBACAnD,KAAA,iBACA4E,SAAA,MACAC,YAAA,+FACAC,QAAA,CAAA,OAAA,QAAA,WAAA,SAAA,UAAA,QAAA,SA4RAxH,EAAAyH,QAAAL,EAEAM,OAAAC,eAAA3H,EAAA,aAAA,CAAA4H,OAAA,GAEA","file":"kendo.inlineaiprompt.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.core.js'), require('kendo.data.js'), require('kendo.icons.js'), require('kendo.textarea.js'), require('kendo.button.js'), require('kendo.toolbar.js'), require('kendo.popup.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.core', 'kendo.data', 'kendo.icons', 'kendo.textarea', 'kendo.button', 'kendo.toolbar', 'kendo.popup'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Inlineaiprompt = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n        id: \"inlineaiprompt\",\n        name: \"InlineAIPrompt\",\n        category: \"web\",\n        description: \"The InlineAIPrompt component simplifies the incorporation of external AI services into apps.\",\n        depends: [\"core\", \"icons\", \"textarea\", \"button\", \"toolbar\", \"popup\", \"data\"],\n    };\n\n    (function($) {\n        let kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            NS = \".kendoInlineAIPrompt\",\n            ui = kendo.ui,\n\n            PROMPT_REQUEST = \"promptRequest\",\n            PROMPT_RESPONSE = \"promptResponse\",\n            PROMPT_ACTION = \"promptAction\",\n\n            FOCUS = \"focus\";\n\n        let InlineAIPrompt = Widget.extend({\n            init: function(element, options) {\n                let that = this;\n                options = options || {};\n\n                that.options.systemPrompt = options.systemPrompt || that.options.systemPrompt;\n                Widget.fn.init.call(that, element, options);\n\n                if (options.commands) {\n                   that.options.commands = options.commands;\n                }\n\n                that.transport = new kendo.data.AiTransport({\n                    service: that.options.service,\n                    success: that._serviceSuccess.bind(that),\n                    requestStart: () => kendo.ui.progress(that._popup.element, true)\n                });\n\n                that._initPopup();\n                that._initContextMenu();\n                that._bindEvents();\n\n                kendo.notify(that);\n            },\n\n            options: {\n                name: \"InlineAIPrompt\",\n                systemPrompt: (context, prompt) => `You are an advanced AI language assistant.\n                                A user has selected a portion of their text and provided a query regarding how they want it modified.\n                                Your task is to accurately respond to their request while preserving the original intent of the text.\n                                Follow the instructions strictly and provide only the requested output unless explicitly asked to explain your changes.\n\n                                Selected Text:\n                                ${context}\n\n                                User's Request:\n                                ${prompt}\n\n                                Response:`,\n                commands: []\n            },\n\n            events: [\n                PROMPT_REQUEST,\n                PROMPT_RESPONSE,\n                PROMPT_ACTION\n            ],\n\n            open: function(x, y) {\n                let that = this;\n\n                that._popup.open(x, y);\n            },\n\n            _serviceSuccess: function(output) {\n                const that = this;\n\n                that._popup.element.find('.k-card-body').html(output.output);\n                that._popup.element.find('.k-card').show();\n                that.trigger(PROMPT_RESPONSE, { output });\n                kendo.ui.progress(that._popup.element, false);\n            },\n\n            _initPopup: function() {\n                const that = this,\n                    html = $(that._template()).width(that.options.width);\n                    html.css({ \"max-width\": \"98vw\" });\n\n                that._popup = new kendo.ui.Popup(html, {\n                    anchor: that.element,\n                    animation: {\n                        open: {\n                            effects: \"zoom:in\",\n                            duration: 200\n                        },\n                        close: {\n                            effects: \"zoom:out\",\n                            duration: 200\n                        }\n                    },\n                    open: function() {\n                        this.element.find('.k-card').hide();\n                        this.element.find('.k-card-body').empty();\n                        this.element.find('.k-input-inner').val('');\n                    },\n                    close: function() {\n                        kendo.ui.progress(that._popup.element, false);\n                        that._aiContextMenu?.close();\n                    }\n                });\n            },\n\n            _template: function() {\n                const template = `<div class=\"k-child-animation-container\">\n                    <div class=\"k-prompt-popup k-popup\">\n                        <div class=\"k-prompt\">\n                            <div class=\"k-prompt-content\">\n                                <div class=\"k-prompt-view\">\n                                    <div class=\"k-card\">\n                                        <div class=\"k-card-body\" style=\"max-height: 150px; overflow-y: auto;\"></div>\n                                        <div class=\"k-actions k-actions-start k-actions-horizontal k-card-actions\">\n                                            ${kendo.html.renderButton(`<button ${kendo.attr(\"action\")}='insert'>Insert</button>`, { icon: \"insert-bottom\", fillMode: \"flat\" })}\n                                            ${kendo.html.renderButton(`<button ${kendo.attr(\"action\")}='replace'>Replace</button>`, { icon: \"check\", fillMode: \"flat\" })}\n                                            ${kendo.html.renderButton(`<button ${kendo.attr(\"action\")}='cancel'>Discard</button>`, { icon: \"cancel-outline\", fillMode: \"flat\" })}\n                                        </div>\n                                    </div>\n                                    <span class=\"k-textbox k-input k-input-md k-input-solid k-rounded-md\">\n                                        <span class=\"k-input-prefix k-input-prefix-horizontal\">\n                                            ${kendo.html.renderButton(`<button></button>`, { icon: \"sparkles\", fillMode: \"flat\" })}\n                                        </span>\n                                        <input type=\"text\" class=\"k-input-inner\" placeholder=\"Edit, generate or explain ...\" autocomplete=\"off\" value=\"\">\n                                        <span class=\"k-input-suffix k-input-suffix-horizontal\">\n                                            ${kendo.html.renderButton(`<button></button>`, { icon: \"paper-plane\", fillMode: \"flat\" })}\n                                        </span>\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>`;\n\n                return template;\n            },\n\n            _initContextMenu: function() {\n                const that = this;\n                if (!that.options.commands || that.options.commands?.length === 0) {\n                    that._popup.element.find('.k-input-prefix button').addClass('k-disabled');\n                    return;\n                }\n\n                const itemsHtml = that.options.commands.map(command => that._createCommandHtml(command)).join('');\n                const html = $(`<ul>\n                                ${itemsHtml}\n                            </ul>`);\n\n                $('body').append(html);\n\n                that._aiContextMenu = html.kendoContextMenu({\n                    target: that._popup.element,\n                    anchor: that._popup.element,\n                    showOn: 'click',\n                    appendTo: $(document.body),\n                    filter: '.invalid',\n                    select: that._executeCommand.bind(that),\n                    close: () => {\n                        that._popup.element.find('.k-input-inner').focus();\n                    }\n                }).data('kendoContextMenu');\n            },\n\n            _createCommandHtml: function(command) {\n                const that = this;\n                const icon = kendo.html.renderIcon({ icon: command.icon });\n                const text = command.text;\n                const items = command.items || [];\n                const itemsHtml = items.map(item => that._createCommandHtml(item)).join('');\n\n                return `<li ${kendo.attr(\"name\")}=${command.id}>${icon} ${text}${itemsHtml ? \"<ul>\" + itemsHtml + \"</ul>\" : \"\"}</li>`;\n            },\n\n            _executeCommand: function(e) {\n                const that = this;\n                const command = that._findCommand(that.options.commands, e.item.getAttribute(kendo.attr(\"name\")));\n                const data = {\n                    query: command.id,\n                    selection: \"\"\n                };\n\n                that.trigger(PROMPT_REQUEST, data);\n\n                const selection = data.selection || data.context;\n                const prompt = command.prompt(selection);\n\n                that._aiContextMenu?.close();\n\n                that.transport.read({ prompt, history: [], isRetry: false });\n            },\n\n            _findCommand: function(commands, id) {\n                const that = this;\n\n                for (const command of commands) {\n                    if (command.id === id) {\n                        return command;\n                    }\n\n                    if (command.items) {\n                        const found = that._findCommand(command.items, id);\n\n                        if (found) {\n                            return found;\n                        }\n                    }\n                }\n            },\n\n            _bindEvents: function() {\n                const that = this;\n\n                that._popup.element.find('.k-input-prefix button').on('click', function() {\n                    that._aiContextMenu?.open();\n                });\n\n                that._popup.element.find('.k-input-suffix button').on('click', function() {\n                    const prompt = that._popup.element.find('.k-input-inner').val();\n\n                    that._requestService(prompt);\n                });\n\n                that._popup.element.find('.k-input-inner').on('keypress', function(e) {\n                    if (e.keyCode === 13) {\n                        const prompt = $(e.currentTarget).val();\n\n                        that._requestService(prompt);\n                    }\n                });\n\n                that._popup.element.find('.k-card-actions button').on('click', function(e) {\n                    const action = $(e.currentTarget).attr(kendo.attr(\"action\"));\n                    const content = that._popup.element.find('.k-card-body').text();\n\n                    that.trigger(PROMPT_ACTION, { action, content });\n                    that._popup.close();\n                });\n            },\n\n            _requestService: function(query) {\n                const that = this;\n                const data = {\n                    query,\n                    context: \"\"\n                };\n\n                if (!query.trim()) {\n                    return;\n                }\n\n                that.trigger(PROMPT_REQUEST, data);\n\n                const context = data.context;\n                const prompt = that.options.systemPrompt(context, query);\n\n                that.transport.read({ prompt, history: [], isRetry: false });\n            },\n\n            focus: function() {\n                let that = this;\n                that.element.trigger(FOCUS);\n            },\n\n            destroy: function() {\n                let that = this;\n\n                that.toolbar?.destroy();\n                that._selectedView?.destroy();\n\n                that.element.off(NS);\n\n                Widget.fn.destroy.call(that);\n            }\n        });\n\n        ui.plugin(InlineAIPrompt);\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}